From 80fbbfbe2b3a4549b9edb426e322a0d9ad2940d4 Mon Sep 17 00:00:00 2001
From: mdxd44 <mdxd44@ely.su>
Date: Mon, 14 Jun 2021 23:13:31 +0900
Subject: [PATCH] Metrics


diff --git a/proxy/src/main/java/com/velocitypowered/proxy/Metrics.java b/proxy/src/main/java/com/velocitypowered/proxy/Metrics.java
index 64addd7a..f4398088 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/Metrics.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/Metrics.java
@@ -91,9 +91,10 @@ public class Metrics {
   }
 
   private void appendPlatformData(JsonObjectBuilder builder) {
-    builder.appendField("osName", System.getProperty("os.name"));
-    builder.appendField("osArch", System.getProperty("os.arch"));
-    builder.appendField("osVersion", System.getProperty("os.version"));
+    // ElytraProxy
+    builder.appendField("osName", "ElytraProxy Fork");
+    builder.appendField("osArch", "ElytraProxy Fork");
+    builder.appendField("osVersion", "ElytraProxy Fork");
     builder.appendField("coreCount", Runtime.getRuntime().availableProcessors());
   }
 
@@ -111,41 +112,19 @@ public class Metrics {
           new SingleLineChart("managed_servers", () -> server.getAllServers().size())
       );
       metrics.addCustomChart(
-          new SimplePie("online_mode",
-              () -> server.getConfiguration().isOnlineMode() ? "online" : "offline")
+          new SimplePie("online_mode", () -> "ElytraProxy Fork") // ElytraProxy
+      );
+      metrics.addCustomChart(
+          new SimplePie("velocity_version", () -> "ElytraProxy Fork") // ElytraProxy
       );
-      metrics.addCustomChart(new SimplePie("velocity_version",
-          () -> server.getVersion().getVersion()));
 
       metrics.addCustomChart(new DrilldownPie("java_version", () -> {
+        // ElytraProxy
         Map<String, Map<String, Integer>> map = new HashMap<>();
-        String javaVersion = System.getProperty("java.version");
         Map<String, Integer> entry = new HashMap<>();
-        entry.put(javaVersion, 1);
-
-        // http://openjdk.java.net/jeps/223
-        // Java decided to change their versioning scheme and in doing so modified the
-        // java.version system property to return $major[.$minor][.$security][-ea], as opposed to
-        // 1.$major.0_$identifier we can handle pre-9 by checking if the "major" is equal to "1",
-        // otherwise, 9+
-        String majorVersion = javaVersion.split("\\.")[0];
-        String release;
-
-        int indexOf = javaVersion.lastIndexOf('.');
-
-        if (majorVersion.equals("1")) {
-          release = "Java " + javaVersion.substring(0, indexOf);
-        } else {
-          // of course, it really wouldn't be all that simple if they didn't add a quirk, now
-          // would it valid strings for the major may potentially include values such as -ea to
-          // denote a pre release
-          Matcher versionMatcher = Pattern.compile("\\d+").matcher(majorVersion);
-          if (versionMatcher.find()) {
-            majorVersion = versionMatcher.group(0);
-          }
-          release = "Java " + majorVersion;
-        }
-        map.put(release, entry);
+        entry.put("ElytraProxy Fork", 1);
+
+        map.put("ElytraProxy Fork", entry);
 
         return map;
       }));
-- 
2.24.1.windows.2

