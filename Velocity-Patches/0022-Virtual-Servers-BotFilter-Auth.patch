From 7d1762d7ad434a72c552616a2020f44ec38c9452 Mon Sep 17 00:00:00 2001
From: Petr Ilin <hevav@hevav.dev>
Date: Thu, 24 Jun 2021 15:01:38 +0900
Subject: [PATCH] Virtual Servers, BotFilter, Auth

Signed-off-by: Petr Ilin <hevav@hevav.dev>

diff --git a/.gitignore b/.gitignore
index 2ffb4fd0..fbdf3cea 100644
--- a/.gitignore
+++ b/.gitignore
@@ -84,7 +84,7 @@ logs/
 server-icon.png
 /bin/
 run/
-#plugins/
+plugins/
 
 ### Natives stuff ###
 native/mbedtls
diff --git a/api/build.gradle b/api/build.gradle
index 368004ab..b074ecce 100644
--- a/api/build.gradle
+++ b/api/build.gradle
@@ -37,11 +37,12 @@ dependencies {
     api("net.kyori:adventure-text-serializer-legacy")
     api("net.kyori:adventure-text-serializer-plain")
 
-    // ElytraProxy: Revert deprecated kyori dependencies for backward compatibility
+    // ElytraProxy Start: Revert deprecated kyori dependencies for backward compatibility
     api "net.kyori:text-api:${textVersion}"
     api "net.kyori:text-serializer-gson:${textVersion}"
     api "net.kyori:text-serializer-legacy:${textVersion}"
     api "net.kyori:text-serializer-plain:${textVersion}"
+    // ElytraProxy End
 
     api "org.slf4j:slf4j-api:${slf4jVersion}"
     api 'com.google.inject:guice:5.0.1'
diff --git a/api/src/main/java/com/velocitypowered/api/network/ProtocolVersion.java b/api/src/main/java/com/velocitypowered/api/network/ProtocolVersion.java
index a24b9229..0070c5ba 100644
--- a/api/src/main/java/com/velocitypowered/api/network/ProtocolVersion.java
+++ b/api/src/main/java/com/velocitypowered/api/network/ProtocolVersion.java
@@ -22,7 +22,10 @@ import java.util.Set;
 public enum ProtocolVersion {
   UNKNOWN(-1, "Unknown"),
   LEGACY(-2, "Legacy"),
+
+  // ElytraProxy: Maintenance mode
   MAINTENANCE(-99, "Maintenance"),
+
   MINECRAFT_1_7_2(4,
           "1.7.2", "1.7.3", "1.7.4", "1.7.5"),
   MINECRAFT_1_7_6(5,
@@ -232,7 +235,7 @@ public enum ProtocolVersion {
     return this == LEGACY;
   }
 
-  //BotFilter start
+  // BotFilter BackPort Start
   public boolean isBefore(ProtocolVersion other) {
     return this.compareTo(other) < 0;
   }
@@ -248,12 +251,11 @@ public enum ProtocolVersion {
   public boolean isAfterOrEq(ProtocolVersion other) {
     return this.compareTo(other) >= 0;
   }
-  //BotFilter add
 
   public static ProtocolVersion adapt(int protocol) {
     return ID_TO_PROTOCOL_CONSTANT.get(protocol);
   }
-  //BotFilter end
+  // BotFilter BackPort End
 
   @Override
   public String toString() {
diff --git a/api/src/main/java/com/velocitypowered/api/proxy/config/ProxyConfig.java b/api/src/main/java/com/velocitypowered/api/proxy/config/ProxyConfig.java
index 262e21bd..7ec5bdd0 100644
--- a/api/src/main/java/com/velocitypowered/api/proxy/config/ProxyConfig.java
+++ b/api/src/main/java/com/velocitypowered/api/proxy/config/ProxyConfig.java
@@ -121,12 +121,14 @@ public interface ProxyConfig {
    */
   int getLoginRatelimit();
 
+  // BotFilter BackPort Start
   /**
    * Get the limit for how many times a player must login before rate limit will work.
    *
    * @return the max join attempts before rate limiting
    */
   int getLoginRatelimitAttempts();
+  // BotFilter BackPort End
 
   /**
    * Get the proxy favicon shown in the tablist.
diff --git a/native/src/main/java/com/velocitypowered/natives/compression/JavaVelocityCompressor.java b/native/src/main/java/com/velocitypowered/natives/compression/JavaVelocityCompressor.java
index 37b994ba..0c0c0871 100644
--- a/native/src/main/java/com/velocitypowered/natives/compression/JavaVelocityCompressor.java
+++ b/native/src/main/java/com/velocitypowered/natives/compression/JavaVelocityCompressor.java
@@ -38,7 +38,9 @@ public class JavaVelocityCompressor implements VelocityCompressor {
   private boolean disposed = false;
 
   private JavaVelocityCompressor(int level) {
-    level = Math.min(9, level); //BotFilter
+    // BotFilter Backport
+    level = Math.min(9, level);
+
     this.deflater = new Deflater(level);
     this.inflater = new Inflater();
   }
diff --git a/proxy/build.gradle b/proxy/build.gradle
index 578a56e5..4540796e 100644
--- a/proxy/build.gradle
+++ b/proxy/build.gradle
@@ -10,12 +10,19 @@ apply from: '../gradle/checkstyle.gradle'
 apply plugin: 'com.github.johnrengelman.shadow'
 
 license {
+    // ElytraProxy Start: Add licenses
     matching(includes: ['**/elytraproxy/**']) {
         header = project.rootProject.file('HEADER_ELYTRAPROXY.txt')
     }
     matching(includes: ['**/elytraproxy/config/helpers/**']) {
         header = project.rootProject.file('HEADER_BUNGEECORD.txt')
     }
+    matching(includes: ['**/virtual/**']) {
+        header = project.rootProject.file('HEADER_BOTFILTER.txt')
+    }
+    matching(includes: ['**/virtual/server/VirtualSessionHandler.java']) {
+        header = project.rootProject.file('HEADER_ELYTRAPROXY.txt')
+    }
     matching(includes: ['**/botfilter/**']) {
         header = project.rootProject.file('HEADER_BOTFILTER.txt')
     }
@@ -25,6 +32,7 @@ license {
     matching(includes: ['**/ElytraProxyCommand.java']) {
         header = project.rootProject.file('HEADER.txt')
     }
+    // ElytraProxy End
     header = project.rootProject.file('HEADER.txt')
 }
 
@@ -39,9 +47,9 @@ jar {
         }
 
         attributes 'Main-Class': 'com.velocitypowered.proxy.Velocity'
-        attributes 'Implementation-Title': "ElytraProxy"
+        attributes 'Implementation-Title': /*"Velocity"*/"ElytraProxy"
         attributes 'Implementation-Version': version
-        attributes 'Implementation-Vendor': "Velocity Contributors, ElytraProxy Contributors"
+        attributes 'Implementation-Vendor': "Velocity Contributors, ElytraProxy Contributors" // ElytraProxy
         attributes 'Multi-Release': 'true'
     }
 }
@@ -52,25 +60,31 @@ shadowJar {
 
 tasks.withType(Checkstyle) {
     exclude('**/com/velocitypowered/proxy/protocol/packet/*.java')
+
+    // ElytraProxy
     exclude('**/net/elytrium/elytraproxy/botfilter/**') // temp
+    exclude('**/net/elytrium/elytraproxy/virtual/**') // temp
     exclude('**/net/elytrium/elytraproxy/config/Settings.java')
 }
 
 dependencies {
-    // BotFilter backport: Add lombok
+    // BotFilter Backport Start: Add lombok
     compileOnly 'org.projectlombok:lombok:1.18.20'
     annotationProcessor 'org.projectlombok:lombok:1.18.20'
 
     testCompileOnly 'org.projectlombok:lombok:1.18.20'
     testAnnotationProcessor 'org.projectlombok:lombok:1.18.20'
+    // BotFilter Backport End
 
-    // Note: we depend on the API twice, first the main sourceset, and then the annotation processor.
-    implementation project(':elytraproxy-api')
-    implementation project(':elytraproxy-api').sourceSets.ap.output
-    implementation project(':elytraproxy-native')
-
-    // ElytraProxy
+    // ElytraProxy Start
     implementation "org.mariadb.jdbc:mariadb-java-client:2.7.3"
+    implementation 'at.favre.lib:bcrypt:0.9.0'
+
+    // Note: we depend on the API twice, first the main sourceset, and then the annotation processor.
+    implementation project(/*':velocity-api'*/':elytraproxy-api')
+    implementation project(/*':velocity-api'*/':elytraproxy-api').sourceSets.ap.output
+    implementation project(/*':velocity-native'*/':elytraproxy-native')
+    // ElytraProxy End
 
     implementation "io.netty:netty-codec:${nettyVersion}"
     implementation "io.netty:netty-codec-haproxy:${nettyVersion}"
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/ProxyOptions.java b/proxy/src/main/java/com/velocitypowered/proxy/ProxyOptions.java
index 8ac26cda..c80b471a 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/ProxyOptions.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/ProxyOptions.java
@@ -27,7 +27,6 @@ import org.apache.logging.log4j.Logger;
 import org.checkerframework.checker.nullness.qual.Nullable;
 
 public final class ProxyOptions {
-
   private static final Logger logger = LogManager.getLogger(ProxyOptions.class);
   private final boolean help;
   private final @Nullable Integer port;
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/Velocity.java b/proxy/src/main/java/com/velocitypowered/proxy/Velocity.java
index 9d31a75e..fdc14a45 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/Velocity.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/Velocity.java
@@ -70,7 +70,8 @@ public class Velocity {
 
     // ElytraProxy
     logger.warn("PLEASE REPORT ALL BUGS, ERRORS AND JUST NOTES"
-            + " OR SUGGESTIONS ON GITHUB PAGE. (https://github.com/Elytrium/ElytraProxy/issues)");
+        + " OR SUGGESTIONS ON GITHUB PAGE. (https://github.com/Elytrium/ElytraProxy/issues)");
+
     server.getConsoleCommandSource().start();
 
     // If we don't have a console available (because SimpleTerminalConsole returned), then we still
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/VelocityServer.java b/proxy/src/main/java/com/velocitypowered/proxy/VelocityServer.java
index 318363a0..dab1866b 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/VelocityServer.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/VelocityServer.java
@@ -54,9 +54,7 @@ import com.velocitypowered.proxy.protocol.util.GameProfileSerializer;
 import com.velocitypowered.proxy.scheduler.VelocityScheduler;
 import com.velocitypowered.proxy.server.ServerMap;
 import com.velocitypowered.proxy.util.AddressUtil;
-import com.velocitypowered.proxy.util.ClosestLocaleMatcher;
 import com.velocitypowered.proxy.util.EncryptionUtils;
-import com.velocitypowered.proxy.util.FileSystemUtils;
 import com.velocitypowered.proxy.util.VelocityChannelRegistrar;
 import com.velocitypowered.proxy.util.bossbar.AdventureBossBarManager;
 import com.velocitypowered.proxy.util.ratelimit.Ratelimiter;
@@ -80,7 +78,6 @@ import java.util.Locale;
 import java.util.Map;
 import java.util.Objects;
 import java.util.Optional;
-import java.util.ResourceBundle;
 import java.util.UUID;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ConcurrentHashMap;
@@ -96,11 +93,7 @@ import net.elytrium.elytraproxy.ElytraProxy;
 import net.elytrium.elytraproxy.config.Settings;
 import net.kyori.adventure.audience.Audience;
 import net.kyori.adventure.audience.ForwardingAudience;
-import net.kyori.adventure.key.Key;
 import net.kyori.adventure.text.Component;
-import net.kyori.adventure.translation.GlobalTranslator;
-import net.kyori.adventure.translation.TranslationRegistry;
-import net.kyori.adventure.util.UTF8ResourceBundleControl;
 import net.kyori.adventure.text.serializer.gson.GsonComponentSerializer;
 import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
 import org.apache.logging.log4j.LogManager;
@@ -145,16 +138,18 @@ public class VelocityServer implements ProxyServer, ForwardingAudience {
   // ElytraProxy
   @Getter
   private static final Map<UUID, ConnectedPlayer> connectionsByUuid = new ConcurrentHashMap<>();
+
   private final Map<String, ConnectedPlayer> connectionsByName = new ConcurrentHashMap<>();
   private final VelocityConsole console;
   private @MonotonicNonNull Ratelimiter ipAttemptLimiter;
   private final VelocityEventManager eventManager;
   private final VelocityScheduler scheduler;
   private final VelocityChannelRegistrar channelRegistrar = new VelocityChannelRegistrar();
-  // ElytraProxy
+  // ElytraProxy Start
   @Getter
-  private ElytraProxy elytraProxy;
+  private @MonotonicNonNull ElytraProxy elytraProxy;
   private Component maintenanceMotd;
+  // ElytraProxy End
 
   VelocityServer(final ProxyOptions options) {
     pluginManager = new VelocityPluginManager(this);
@@ -184,15 +179,14 @@ public class VelocityServer implements ProxyServer, ForwardingAudience {
     String implVersion;
     String implVendor;
     if (pkg != null) {
-      // ElytraProxy
-      implName = MoreObjects.firstNonNull(pkg.getImplementationTitle(), "ElytraProxy");
+      implName = MoreObjects.firstNonNull(pkg.getImplementationTitle(), /*"Velocity"*/"ElytraProxy");
       implVersion = MoreObjects.firstNonNull(pkg.getImplementationVersion(), "<unknown>");
       implVendor = MoreObjects.firstNonNull(pkg.getImplementationVendor(), "Velocity Contributors,"
-          + " ElytraProxy Contributors");
+          + " ElytraProxy Contributors"); // ElytraProxy
     } else {
-      implName = "ElytraProxy";
+      implName = /*"Velocity"*/"ElytraProxy";
       implVersion = "<unknown>";
-      implVendor = "Velocity Contributors, ElytraProxy Contributors";
+      implVendor = "Velocity Contributors, ElytraProxy Contributors"; // ElytraProxy
     }
 
     return new ProxyVersion(implName, implVendor, implVersion);
@@ -212,9 +206,11 @@ public class VelocityServer implements ProxyServer, ForwardingAudience {
   void start() {
     // ElytraProxy
     logger.info("Booting up {} {}...", getVersion().getName(), Settings.IMP.VERSION);
+
     console.setupStreams();
 
-    registerTranslations();
+    // ElytraProxy: Removed as unnecessary
+    //registerTranslations();
 
     serverKeyPair = EncryptionUtils.createRsaKeyPair(1024);
 
@@ -223,7 +219,7 @@ public class VelocityServer implements ProxyServer, ForwardingAudience {
     // Initialize commands first
 
     // ElytraProxy: Move initialization to ElytraProxy main class
-    // commandManager.register("elytraproxy", new ElytraProxyCommand(this));
+    //commandManager.register("velocity", new VelocityCommand(this));
     commandManager.register("server", new ServerCommand(this));
     commandManager.register("shutdown", new ShutdownCommand(this),"end");
     new GlistCommand(this).register();
@@ -235,7 +231,11 @@ public class VelocityServer implements ProxyServer, ForwardingAudience {
     }
 
     ipAttemptLimiter = Ratelimiters.createWithMilliseconds(configuration.getLoginRatelimit(),
-        configuration.getLoginRatelimitAttempts()); // BotFilter backport: global rate limiter
+        configuration.getLoginRatelimitAttempts()); // BotFilter Backport: Global rate limiter
+
+    // ElytraProxy
+    this.elytraProxy = new ElytraProxy(this);
+
     loadPlugins();
 
     // Go ahead and fire the proxy initialization event. We block since plugins should have a chance
@@ -258,11 +258,11 @@ public class VelocityServer implements ProxyServer, ForwardingAudience {
     }
 
     Metrics.VelocityMetrics.startMetrics(this, configuration.getMetrics());
-
-    // ElytraProxy
-    this.elytraProxy = new ElytraProxy(this);
   }
 
+
+  // ElytraProxy: Removed as unnecessary
+  /*
   private void registerTranslations() {
     final TranslationRegistry translationRegistry = TranslationRegistry
         .create(Key.key("velocity", "translations"));
@@ -304,6 +304,7 @@ public class VelocityServer implements ProxyServer, ForwardingAudience {
     }
     GlobalTranslator.get().addSource(translationRegistry);
   }
+  */
 
   @SuppressFBWarnings("DM_EXIT")
   private void doStartupConfigLoad() {
@@ -457,9 +458,8 @@ public class VelocityServer implements ProxyServer, ForwardingAudience {
     }
 
     commandManager.setAnnounceProxyCommands(newConfiguration.isAnnounceProxyCommands());
-    // BotFilter backport: global rate limiter
     ipAttemptLimiter = Ratelimiters.createWithMilliseconds(newConfiguration.getLoginRatelimit(),
-        newConfiguration.getLoginRatelimitAttempts());
+        newConfiguration.getLoginRatelimitAttempts()); // BotFilter Backport: Global rate limiter
     this.configuration = newConfiguration;
     eventManager.fireAndForget(new ProxyReloadEvent());
     return true;
@@ -469,7 +469,7 @@ public class VelocityServer implements ProxyServer, ForwardingAudience {
    * Shuts down the proxy, kicking players with the specified {@param reason}.
    *
    * @param explicitExit whether the user explicitly shut down the proxy
-   * @param reason message to kick online players with
+   * @param reason       message to kick online players with
    */
   public void shutdown(boolean explicitExit, Component reason) {
     if (eventManager == null || pluginManager == null || cm == null || scheduler == null) {
@@ -500,8 +500,8 @@ public class VelocityServer implements ProxyServer, ForwardingAudience {
           // makes sure that all the disconnect events are being fired
 
           CompletableFuture<Void> playersTeardownFuture = CompletableFuture.allOf(players.stream()
-                  .map(ConnectedPlayer::getTeardownFuture)
-                  .toArray((IntFunction<CompletableFuture<Void>[]>) CompletableFuture[]::new));
+              .map(ConnectedPlayer::getTeardownFuture)
+              .toArray((IntFunction<CompletableFuture<Void>[]>) CompletableFuture[]::new));
 
           playersTeardownFuture.get(10, TimeUnit.SECONDS);
         } catch (TimeoutException e) {
@@ -552,13 +552,12 @@ public class VelocityServer implements ProxyServer, ForwardingAudience {
    * @param explicitExit whether the user explicitly shut down the proxy
    */
   public void shutdown(boolean explicitExit) {
+    // ElytraProxy Start
     shutdown(explicitExit,
         LegacyComponentSerializer
             .legacyAmpersand()
-            .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK.PROXY_SHUTTING_DOWN
-                .replace("{NL}", "\n")
-                .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-            ));
+            .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK.PROXY_SHUTTING_DOWN));
+    // ElytraProxy End
   }
 
   @Override
@@ -650,8 +649,8 @@ public class VelocityServer implements ProxyServer, ForwardingAudience {
     Objects.requireNonNull(partialName);
 
     return getAllPlayers().stream().filter(p -> p.getUsername()
-            .regionMatches(true, 0, partialName, 0, partialName.length()))
-            .collect(Collectors.toList());
+        .regionMatches(true, 0, partialName, 0, partialName.length()))
+        .collect(Collectors.toList());
   }
 
   @Override
@@ -659,8 +658,8 @@ public class VelocityServer implements ProxyServer, ForwardingAudience {
     Objects.requireNonNull(partialName);
 
     return getAllServers().stream().filter(s -> s.getServerInfo().getName()
-            .regionMatches(true, 0, partialName, 0, partialName.length()))
-            .collect(Collectors.toList());
+        .regionMatches(true, 0, partialName, 0, partialName.length()))
+        .collect(Collectors.toList());
   }
 
   @Override
@@ -670,12 +669,13 @@ public class VelocityServer implements ProxyServer, ForwardingAudience {
 
   @Override
   public int getPlayerCount() {
-    // ElytraProxy: Exclude online at servers in list
+    // ElytraProxy Start: Exclude online at servers in list
     return (int) getAllPlayers().stream().filter(p -> p.getCurrentServer()
         .isPresent())
         .filter(p -> !Settings.IMP.MAIN_SETTINGS.IGNORE_ONLINE_AT
             .contains(p.getCurrentServer().get().getServerInfo().getName()))
         .count();
+    // ElytraProxy End
   }
 
   @Override
@@ -771,25 +771,20 @@ public class VelocityServer implements ProxyServer, ForwardingAudience {
     return new VelocityResourcePackInfo.BuilderImpl(url);
   }
 
-  // ElytraProxy
+  // ElytraProxy Start
   public Component getMaintenanceMotd() {
     if (Settings.IMP.MAIN_SETTINGS.MAINTENANCE.ENABLED) {
       if (Settings.IMP.MAIN_SETTINGS.MAINTENANCE.MOTD.startsWith("{")) {
         maintenanceMotd = GsonComponentSerializer
             .gson()
-            .deserialize(Settings.IMP.MAIN_SETTINGS.MAINTENANCE.MOTD
-                .replace("{NL}", "\n")
-                .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-            );
+            .deserialize(Settings.IMP.MAIN_SETTINGS.MAINTENANCE.MOTD);
       } else {
         maintenanceMotd = LegacyComponentSerializer
             .legacyAmpersand()
-            .deserialize(Settings.IMP.MAIN_SETTINGS.MAINTENANCE.MOTD
-                .replace("{NL}", "\n")
-                .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-            );
+            .deserialize(Settings.IMP.MAIN_SETTINGS.MAINTENANCE.MOTD);
       }
     }
     return maintenanceMotd;
   }
+  // ElytraProxy End
 }
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/CommandMessages.java b/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/CommandMessages.java
index 59102c9b..40661ade 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/CommandMessages.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/CommandMessages.java
@@ -23,20 +23,25 @@ import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
 
 public class CommandMessages {
 
+  // ElytraProxy Start
+  /*
+  public static final TranslatableComponent PLAYERS_ONLY = Component.translatable(
+      "velocity.command.players-only", NamedTextColor.RED);
+  */
   public static final Component PLAYERS_ONLY = LegacyComponentSerializer
       .legacyAmpersand()
-      .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.PLAYERS_ONLY
-          .replace("{NL}", "\n")
-          .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-      );
+      .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.PLAYERS_ONLY);
 
+  /*
+  public static final TranslatableComponent SERVER_DOES_NOT_EXIST = Component.translatable(
+      "velocity.command.server-does-not-exist", NamedTextColor.RED);
+  */
   public static Component SERVER_DOES_NOT_EXIST(String serverName) {
     return LegacyComponentSerializer
         .legacyAmpersand()
         .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.SERVER_DOES_NOT_EXIST
-            .replace("{NL}", "\n")
-            .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
             .replace("{0}", serverName)
         );
+    // ElytraProxy End
   }
 }
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/GlistCommand.java b/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/GlistCommand.java
index f9251320..a2fe6dcc 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/GlistCommand.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/GlistCommand.java
@@ -37,8 +37,6 @@ import net.elytrium.elytraproxy.config.Settings;
 import net.kyori.adventure.identity.Identity;
 import net.kyori.adventure.text.Component;
 import net.kyori.adventure.text.TextComponent;
-import net.kyori.adventure.text.TranslatableComponent;
-import net.kyori.adventure.text.format.NamedTextColor;
 import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
 
 public class GlistCommand {
@@ -57,7 +55,9 @@ public class GlistCommand {
   public void register() {
     LiteralCommandNode<CommandSource> totalNode = LiteralArgumentBuilder
         .<CommandSource>literal("glist")
-        .requires(source -> source.hasPermission("velocity.command.glist"))
+        // ElytraProxy
+        .requires(source ->
+            source./*getPermissionValue*/hasPermission("velocity.command.glist")/* == Tristate.TRUE*/)
         .executes(this::totalCount)
         .build();
     ArgumentCommandNode<CommandSource, String> serverNode = RequiredArgumentBuilder
@@ -79,12 +79,11 @@ public class GlistCommand {
     final CommandSource source = context.getSource();
     sendTotalProxyCount(source);
     source.sendMessage(Identity.nil(),
+        // ElytraProxy
+        /*Component.translatable("velocity.command.glist-view-all", NamedTextColor.YELLOW));*/
         LegacyComponentSerializer
             .legacyAmpersand()
-            .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.GLIST_VIEW_ALL
-                .replace("{NL}", "\n")
-                .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-            ));
+            .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.GLIST_VIEW_ALL));
     return 1;
   }
 
@@ -100,7 +99,8 @@ public class GlistCommand {
       Optional<RegisteredServer> registeredServer = server.getServer(serverName);
       if (!registeredServer.isPresent()) {
         source.sendMessage(Identity.nil(),
-            CommandMessages.SERVER_DOES_NOT_EXIST(serverName));
+            // ElytraProxy
+            CommandMessages.SERVER_DOES_NOT_EXIST(serverName)/*.args(Component.text(serverName))*/);
         return -1;
       }
       sendServerPlayers(source, registeredServer.get(), false);
@@ -109,23 +109,26 @@ public class GlistCommand {
   }
 
   private void sendTotalProxyCount(CommandSource target) {
-    int online = server.getAllPlayers().size();
-    Component msg = online == 1
+    // ElytraProxy Start
+    int online = server./*getPlayerCount*/getAllPlayers().size();
+    /*TranslatableComponent*/Component msg = online == 1
+        /*
+        ? Component.translatable("velocity.command.glist-player-singular")
+        : Component.translatable("velocity.command.glist-player-plural");
+        */
         ? LegacyComponentSerializer
-            .legacyAmpersand()
-            .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.GLIST_PLAYER_SINGULAR
-                .replace("{NL}", "\n")
-                .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                .replace("{0}", Integer.toString(online)
-        ))
-            : LegacyComponentSerializer
-                .legacyAmpersand()
-                .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.GLIST_PLAYER_PLURAL
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                    .replace("{0}", Integer.toString(online)
-        ));
-    target.sendMessage(msg);
+        .legacyAmpersand()
+        .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.GLIST_PLAYER_SINGULAR
+            .replace("{0}", Integer.toString(online)
+            ))
+        : LegacyComponentSerializer
+        .legacyAmpersand()
+        .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.GLIST_PLAYER_PLURAL
+            .replace("{0}", Integer.toString(online)
+            ));
+    target.sendMessage(msg/*.color(NamedTextColor.YELLOW)
+        .args(Component.text(Integer.toString(online), NamedTextColor.GREEN))*/);
+    // ElytraProxy End
   }
 
   private void sendServerPlayers(CommandSource target, RegisteredServer server, boolean fromAll) {
@@ -134,16 +137,20 @@ public class GlistCommand {
       return;
     }
 
-    TextComponent.Builder builder = Component
-        .text().append(
+    // ElytraProxy Start
+    TextComponent.Builder builder = Component.text()
+        .append(/*Component.text("[" + server.getServerInfo().getName() + "] ",
+            NamedTextColor.DARK_AQUA))
+        .append(Component.text("(" + onServer.size() + ")", NamedTextColor.GRAY))
+        .append(Component.text(": "))*/
             LegacyComponentSerializer
                 .legacyAmpersand()
                 .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.GLIST_FORMAT_VIEW_ALL
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
                     .replace("{0}", server.getServerInfo().getName())
-                    .replace("{1}", Integer.toString(onServer.size())
-        ))).resetStyle();
+                    .replace("{1}", Integer.toString(onServer.size()))
+                ))
+        // ElytraProxy End
+        .resetStyle();
 
     for (int i = 0; i < onServer.size(); i++) {
       Player player = onServer.get(i);
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/ServerCommand.java b/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/ServerCommand.java
index fa55a506..f5aef727 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/ServerCommand.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/ServerCommand.java
@@ -64,7 +64,10 @@ public class ServerCommand implements SimpleCommand {
       String serverName = args[0];
       Optional<RegisteredServer> toConnect = server.getServer(serverName);
       if (!toConnect.isPresent()) {
-        player.sendMessage(Identity.nil(), CommandMessages.SERVER_DOES_NOT_EXIST(serverName));
+        // ElytraProxy Start
+        player.sendMessage(Identity.nil(), CommandMessages.SERVER_DOES_NOT_EXIST
+            /*.args(Component.text(*/(serverName))/*)*/;
+        // ElytraProxy End
         return;
       }
 
@@ -77,36 +80,37 @@ public class ServerCommand implements SimpleCommand {
   private void outputServerInformation(Player executor) {
     String currentServer = executor.getCurrentServer().map(ServerConnection::getServerInfo)
         .map(ServerInfo::getName).orElse("<unknown>");
-    executor.sendMessage(Identity.nil(),
+    // ElytraProxy Start
+    executor.sendMessage(Identity.nil(), /*Component.translatable(
+        "velocity.command.server-current-server",
+        NamedTextColor.YELLOW,
+        Component.text(currentServer)));*/
         LegacyComponentSerializer
             .legacyAmpersand()
             .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.SERVER_CURRENT_SERVER
-                .replace("{NL}", "\n")
-                .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
                 .replace("{0}", currentServer)
             ));
 
     List<RegisteredServer> servers = BuiltinCommandUtil.sortedServerList(server);
     if (servers.size() > MAX_SERVERS_TO_LIST) {
-      executor.sendMessage(Identity.nil(),
+      executor.sendMessage(Identity.nil(), /*Component.translatable(
+          "velocity.command.server-too-many", NamedTextColor.RED));*/
           LegacyComponentSerializer
               .legacyAmpersand()
-              .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.SERVER_TOO_MANY
-                  .replace("{NL}", "\n")
-                  .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-              ));
+              .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.SERVER_TOO_MANY));
       return;
     }
 
     // Assemble the list of servers as components
-    TextComponent.Builder serverListBuilder = Component
-        .text().append(
+    TextComponent.Builder serverListBuilder = Component.text()
+        .append(/*Component.translatable("velocity.command.server-available",
+            NamedTextColor.YELLOW))
+        .append(Component.space());*/
             LegacyComponentSerializer
                 .legacyAmpersand()
                 .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.SERVER_AVAILABLE
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
                 ));
+    // ElytraProxy End
     for (int i = 0; i < servers.size(); i++) {
       RegisteredServer rs = servers.get(i);
       serverListBuilder.append(formatServerComponent(currentServer, rs));
@@ -123,22 +127,21 @@ public class ServerCommand implements SimpleCommand {
     TextComponent serverTextComponent = Component.text(serverInfo.getName());
 
     int connectedPlayers = server.getPlayersConnected().size();
-    Component playersTextComponent;
+    // ElytraProxy Start
+    /*TranslatableComponent*/Component playersTextComponent;
     if (connectedPlayers == 1) {
-      playersTextComponent = LegacyComponentSerializer
-          .legacyAmpersand()
-          .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.SERVER_TOOLTIP_PLAYER_ONLINE
-              .replace("{NL}", "\n")
-              .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-              .replace("{0}", String.valueOf(connectedPlayers))
+      playersTextComponent = /*Component.translatable("velocity.command.server-tooltip-player-online");*/
+          LegacyComponentSerializer
+              .legacyAmpersand()
+              .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.SERVER_TOOLTIP_PLAYER_ONLINE
+                  .replace("{0}", String.valueOf(connectedPlayers))
           );
     } else {
-      playersTextComponent = LegacyComponentSerializer
-          .legacyAmpersand()
-          .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.SERVER_TOOLTIP_PLAYERS_ONLINE
-              .replace("{NL}", "\n")
-              .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-              .replace("{0}", String.valueOf(connectedPlayers))
+      playersTextComponent = /*Component.translatable("velocity.command.server-tooltip-players-online");*/
+          LegacyComponentSerializer
+              .legacyAmpersand()
+              .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.SERVER_TOOLTIP_PLAYERS_ONLINE
+                  .replace("{0}", String.valueOf(connectedPlayers))
           );
     }
 
@@ -146,32 +149,28 @@ public class ServerCommand implements SimpleCommand {
       serverTextComponent = serverTextComponent.color(NamedTextColor.GREEN)
           .hoverEvent(
               showText(
+                  /*Component.translatable("velocity.command.server-tooltip-current-server")
+                      .append(Component.newline())
+                      .append(playersTextComponent))*/
                   LegacyComponentSerializer
                       .legacyAmpersand()
-                      .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND
-                              .SERVER_TOOLTIP_CURRENT_SERVER
-                          .replace("{NL}", "\n")
-                          .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                          .replace("{0}", LegacyComponentSerializer
-                              .legacySection()
-                              .serialize(playersTextComponent))
+                      .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.SERVER_TOOLTIP_CURRENT_SERVER
+                          .replace("{0}", LegacyComponentSerializer.legacySection().serialize(playersTextComponent))
                       )));
     } else {
       serverTextComponent = serverTextComponent.color(NamedTextColor.GRAY)
           .clickEvent(ClickEvent.runCommand("/server " + serverInfo.getName()))
           .hoverEvent(
-              showText(
+              showText(/*Component.translatable("velocity.command.server-tooltip-offer-connect-server")
+                  .append(Component.newline())
+                  .append(playersTextComponent))*/
                   LegacyComponentSerializer
                       .legacyAmpersand()
-                      .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND
-                              .SERVER_TOOLTIP_OFFER_CONNECT_SERVER
-                          .replace("{NL}", "\n")
-                          .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                          .replace("{0}", LegacyComponentSerializer
-                              .legacySection()
-                              .serialize(playersTextComponent))
+                      .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.SERVER_TOOLTIP_OFFER_CONNECT_SERVER
+                          .replace("{0}", LegacyComponentSerializer.legacySection().serialize(playersTextComponent))
                       )));
     }
+    // ElytraProxy End
     return serverTextComponent;
   }
 
@@ -194,6 +193,7 @@ public class ServerCommand implements SimpleCommand {
 
   @Override
   public boolean hasPermission(final SimpleCommand.Invocation invocation) {
-    return invocation.source().hasPermission("velocity.command.server");
+    // ElytraProxy
+    return invocation.source()./*getPermissionValue*/hasPermission("velocity.command.server")/* != Tristate.FALSE*/;
   }
 }
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/ShutdownCommand.java b/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/ShutdownCommand.java
index 995b6bfc..08da1725 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/ShutdownCommand.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/ShutdownCommand.java
@@ -19,7 +19,6 @@ package com.velocitypowered.proxy.command.builtin;
 
 import com.velocitypowered.api.command.RawCommand;
 import com.velocitypowered.proxy.VelocityServer;
-import net.elytrium.elytraproxy.config.Settings;
 import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
 
 public class ShutdownCommand implements RawCommand {
@@ -36,17 +35,18 @@ public class ShutdownCommand implements RawCommand {
     if (reason.isEmpty() || reason.trim().isEmpty()) {
       server.shutdown(true);
     } else {
+      // ElytraProxy Start
+      /*server.shutdown(true, LegacyComponentSerializer.legacy('&').deserialize(reason));*/
       server.shutdown(true, LegacyComponentSerializer
           .legacyAmpersand()
-          .deserialize(reason
-              .replace("{NL}", "\n")
-              .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-          ));
+          .deserialize(reason));
+      // ElytraProxy End
     }
   }
 
   @Override
   public boolean hasPermission(final Invocation invocation) {
-    return invocation.source().hasPermission("velocity.command.shutdown");
+    // ElytraProxy
+    return invocation.source()/* == server.getConsoleCommandSource()*/.hasPermission("velocity.command.shutdown");
   }
 }
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/config/VelocityConfiguration.java b/proxy/src/main/java/com/velocitypowered/proxy/config/VelocityConfiguration.java
index 71469abd..caf3eb1a 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/config/VelocityConfiguration.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/config/VelocityConfiguration.java
@@ -28,6 +28,7 @@ import com.google.gson.annotations.Expose;
 import com.velocitypowered.api.proxy.config.ProxyConfig;
 import com.velocitypowered.api.util.Favicon;
 import com.velocitypowered.proxy.util.AddressUtil;
+
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.io.File;
 import java.io.IOException;
@@ -58,14 +59,16 @@ public class VelocityConfiguration implements ProxyConfig {
 
   private static final Logger logger = LogManager.getLogger(VelocityConfiguration.class);
 
-  @Expose private String bind = "0.0.0.0:25565";
-  @Expose private String motd = "&3An ElytraProxy Server";
+  // ElytraProxy Start
+  @Expose private String bind = /*"0.0.0.0:25577"*/"0.0.0.0:25565";
+  @Expose private String motd = /*"&3A Velocity Server"*/"&3An ElytraProxy Server";
   @Expose private int showMaxPlayers = 500;
   @Expose private boolean onlineMode = true;
-  @Expose private boolean preventClientProxyConnections = true;
+  @Expose private boolean preventClientProxyConnections = /*false*/true;
   @Expose private PlayerInfoForwarding playerInfoForwardingMode = PlayerInfoForwarding.NONE;
   private byte[] forwardingSecret = generateRandomString(12).getBytes(StandardCharsets.UTF_8);
-  @Expose private boolean announceForge = true;
+  @Expose private boolean announceForge = /*false*/true;
+  // ElytraProxy End
   @Expose private boolean onlineModeKickExistingPlayers = false;
   @Expose private PingPassthroughMode pingPassthrough = PingPassthroughMode.DISABLED;
   private final Servers servers;
@@ -254,19 +257,17 @@ public class VelocityConfiguration implements ProxyConfig {
   public net.kyori.adventure.text.Component getMotd() {
     if (motdAsComponent == null) {
       if (motd.startsWith("{")) {
+        // ElytraProxy Start
+        /*motdAsComponent = GsonComponentSerializer.gson().deserialize(motd);*/
         motdAsComponent = GsonComponentSerializer
             .gson()
-            .deserialize(motd
-                .replace("{NL}", "\n")
-                .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-            );
+            .deserialize(motd);
       } else {
+        /*motdAsComponent = LegacyComponentSerializer.legacy('&').deserialize(motd);*/
         motdAsComponent = LegacyComponentSerializer
             .legacyAmpersand()
-            .deserialize(motd
-                .replace("{NL}", "\n")
-                .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-            );
+            .deserialize(motd);
+        // ElytraProxy End
       }
     }
     return motdAsComponent;
@@ -325,11 +326,12 @@ public class VelocityConfiguration implements ProxyConfig {
     return advanced.getLoginRatelimit();
   }
 
-  //BotFilter - global rate limiter
+  // BotFilter Backport Start: Global rate limiter
   @Override
   public int getLoginRatelimitAttempts() {
     return Settings.IMP.MAIN_SETTINGS.LOGIN_RATELIMIT_ATTEMPTS;
   }
+  // BotFilter Backport End
 
   @Override
   public Optional<Favicon> getFavicon() {
@@ -465,8 +467,10 @@ public class VelocityConfiguration implements ProxyConfig {
     PingPassthroughMode pingPassthroughMode = config.getEnumOrElse("ping-passthrough",
         PingPassthroughMode.DISABLED);
 
-    String bind = config.getOrElse("bind", "0.0.0.0:25565");
-    String motd = config.getOrElse("motd", "&#09add3Am ElytraProxy Server");
+    // ElytraProxy Start
+    String bind = config.getOrElse("bind", /*"0.0.0.0:25577"*/"0.0.0.0:25565");
+    String motd = config.getOrElse("motd", /*"&#09add3A Velocity Server"*/"&#09add3An ElytraProxy Server");
+    // ElytraProxy End
     int maxPlayers = config.getIntOrElse("show-max-players", 500);
     Boolean onlineMode = config.getOrElse("online-mode", true);
     Boolean announceForge = config.getOrElse("announce-forge", true);
@@ -632,26 +636,29 @@ public class VelocityConfiguration implements ProxyConfig {
 
   private static class Advanced {
 
-    @Expose private int compressionThreshold = 512;
-    @Expose private int compressionLevel = 9;
+    // ElytraProxy Start
+    @Expose private int compressionThreshold = /*256*/512;
+    @Expose private int compressionLevel = /*-1*/9;
+    // ElytraProxy End
     @Expose private int loginRatelimit = 3000;
     @Expose private int connectionTimeout = 5000;
     @Expose private int readTimeout = 30000;
     @Expose private boolean proxyProtocol = false;
     @Expose private boolean tcpFastOpen = false;
     @Expose private boolean bungeePluginMessageChannel = true;
-    @Expose private boolean showPingRequests = true;
+    @Expose private boolean showPingRequests = /*false*/true;
     @Expose private boolean failoverOnUnexpectedServerDisconnect = true;
     @Expose private boolean announceProxyCommands = true;
-    @Expose private boolean logCommandExecutions = true;
+    @Expose private boolean logCommandExecutions = /*false*/true;
 
     private Advanced() {
     }
 
     private Advanced(CommentedConfig config) {
       if (config != null) {
-        this.compressionThreshold = config.getIntOrElse("compression-threshold", 512);
-        this.compressionLevel = config.getIntOrElse("compression-level", 9);
+        // ElytraProxy Start
+        this.compressionThreshold = config.getIntOrElse("compression-threshold", /*256*/512);
+        this.compressionLevel = config.getIntOrElse("compression-level", /*-1*/9);
         this.loginRatelimit = config.getIntOrElse("login-ratelimit", 3000);
         this.connectionTimeout = config.getIntOrElse("connection-timeout", 5000);
         this.readTimeout = config.getIntOrElse("read-timeout", 30000);
@@ -662,11 +669,12 @@ public class VelocityConfiguration implements ProxyConfig {
         }
         this.tcpFastOpen = config.getOrElse("tcp-fast-open", false);
         this.bungeePluginMessageChannel = config.getOrElse("bungee-plugin-message-channel", true);
-        this.showPingRequests = config.getOrElse("show-ping-requests", true);
+        this.showPingRequests = config.getOrElse("show-ping-requests", /*false*/true);
         this.failoverOnUnexpectedServerDisconnect = config
             .getOrElse("failover-on-unexpected-server-disconnect", true);
         this.announceProxyCommands = config.getOrElse("announce-proxy-commands", true);
-        this.logCommandExecutions = config.getOrElse("log-command-executions", true);
+        this.logCommandExecutions = config.getOrElse("log-command-executions", /*false*/true);
+        // ElytraProxy End
       }
     }
 
@@ -740,8 +748,10 @@ public class VelocityConfiguration implements ProxyConfig {
   private static class Query {
 
     @Expose private boolean queryEnabled = false;
-    @Expose private int queryPort = 25565;
-    @Expose private String queryMap = "ElytraProxy";
+    // ElytraProxy Start
+    @Expose private int queryPort = /*25577*/25565;
+    @Expose private String queryMap = /*"Velocity"*/"ElytraProxy";
+    // ElytraProxy End
     @Expose private boolean showPlugins = false;
 
     private Query() {
@@ -757,8 +767,10 @@ public class VelocityConfiguration implements ProxyConfig {
     private Query(CommentedConfig config) {
       if (config != null) {
         this.queryEnabled = config.getOrElse("enabled", false);
-        this.queryPort = config.getIntOrElse("port", 25565);
-        this.queryMap = config.getOrElse("map", "ElytraProxy");
+        // ElytraProxy Start
+        this.queryPort = config.getIntOrElse("port", /*25577*/25565);
+        this.queryMap = config.getOrElse("map", /*"Velocity"*/"ElytraProxy");
+        // ElytraProxy End
         this.showPlugins = config.getOrElse("show-plugins", false);
       }
     }
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/MinecraftConnection.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/MinecraftConnection.java
index 03901b49..dc1e6773 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/MinecraftConnection.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/MinecraftConnection.java
@@ -28,12 +28,12 @@ import static com.velocitypowered.proxy.network.Connections.MINECRAFT_ENCODER;
 
 import com.google.common.base.Preconditions;
 import com.velocitypowered.api.network.ProtocolVersion;
-import com.velocitypowered.api.proxy.Player;
 import com.velocitypowered.natives.compression.VelocityCompressor;
 import com.velocitypowered.natives.encryption.VelocityCipher;
 import com.velocitypowered.natives.encryption.VelocityCipherFactory;
 import com.velocitypowered.natives.util.Natives;
 import com.velocitypowered.proxy.VelocityServer;
+import com.velocitypowered.proxy.connection.client.ConnectedPlayer;
 import com.velocitypowered.proxy.connection.client.HandshakeSessionHandler;
 import com.velocitypowered.proxy.connection.client.LoginSessionHandler;
 import com.velocitypowered.proxy.connection.client.StatusSessionHandler;
@@ -64,7 +64,6 @@ import java.security.GeneralSecurityException;
 import java.util.concurrent.TimeUnit;
 import javax.crypto.SecretKey;
 import javax.crypto.spec.SecretKeySpec;
-import net.elytrium.elytraproxy.config.Settings;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.checkerframework.checker.nullness.qual.Nullable;
@@ -90,7 +89,7 @@ public class MinecraftConnection extends ChannelInboundHandlerAdapter {
   /**
    * Initializes a new {@link MinecraftConnection} instance.
    * @param channel the channel on the connection
-   * @param server the Velocity instance
+   * @param server  the Velocity instance
    */
   public MinecraftConnection(Channel channel, VelocityServer server) {
     this.channel = channel;
@@ -139,60 +138,6 @@ public class MinecraftConnection extends ChannelInboundHandlerAdapter {
       }
 
       if (msg instanceof MinecraftPacket) {
-        // ElytraProxy Start
-        // TODO: FIX
-        if (Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.ENABLE) {
-          InetSocketAddress adr = (InetSocketAddress) ctx.channel().localAddress();
-          InetSocketAddress adr1 = (InetSocketAddress) ctx.channel().remoteAddress();
-          String notifymsg = "{} tried to connect using {}";
-          if (!Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.IGNORED_IPS.contains(
-                  adr1.getAddress().getHostAddress())) {
-            if (Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.WHITELIST) {
-              if (Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.IPS_CHECK) {
-                if (!Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.HOSTNAMES.contains(
-                        adr.getAddress().getHostAddress())) {
-                  server.getElytraProxy().getLogger().info(notifymsg,
-                          ctx.channel().remoteAddress(),
-                          adr.getAddress().getHostAddress());
-                  server.getElytraProxy().getStatistics().addBlockedConnection();
-                  return;
-                }
-              }
-              if (Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.DOMAINS_CHECK) {
-                if (!Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.HOSTNAMES.contains(
-                        adr.getHostName())) {
-                  server.getElytraProxy().getLogger().info(notifymsg,
-                          ctx.channel().remoteAddress(),
-                          adr.getHostName());
-                  server.getElytraProxy().getStatistics().addBlockedConnection();
-                  return;
-                }
-              }
-            } else {
-              if (Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.IPS_CHECK) {
-                if (Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.HOSTNAMES.contains(
-                        adr.getAddress().getHostAddress())) {
-                  server.getElytraProxy().getLogger().info(notifymsg,
-                          ctx.channel().remoteAddress(),
-                          adr.getAddress().getHostAddress());
-                  server.getElytraProxy().getStatistics().addBlockedConnection();
-                  return;
-                }
-              }
-              if (Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.DOMAINS_CHECK) {
-                if (Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.HOSTNAMES.contains(
-                        adr.getHostName())) {
-                  server.getElytraProxy().getLogger().info(notifymsg,
-                          ctx.channel().remoteAddress(),
-                          adr.getHostName());
-                  server.getElytraProxy().getStatistics().addBlockedConnection();
-                  return;
-                }
-              }
-            }
-          }
-        }
-        // ElytraProxy End
         MinecraftPacket pkt = (MinecraftPacket) msg;
         if (!pkt.handle(sessionHandler)) {
           sessionHandler.handleGeneric((MinecraftPacket) msg);
@@ -222,7 +167,7 @@ public class MinecraftConnection extends ChannelInboundHandlerAdapter {
       if (sessionHandler != null) {
         try {
           // ElytraProxy Start - Fix long message while player disconnect unexpectedly
-          if (cause instanceof ReadTimeoutException && association instanceof Player) {
+          if (cause instanceof ReadTimeoutException && association instanceof ConnectedPlayer) {
             logger.info("{} may have disconnect by closing minecraft.", association);
           } else {
             sessionHandler.exception(cause);
@@ -311,7 +256,7 @@ public class MinecraftConnection extends ChannelInboundHandlerAdapter {
     if (channel.isActive()) {
       boolean is17 = this.getProtocolVersion().compareTo(ProtocolVersion.MINECRAFT_1_8) < 0
           && this.getProtocolVersion().compareTo(ProtocolVersion.MINECRAFT_1_7_2) >= 0;
-      // BotFilter looks like it works ok for Login protocol
+      // BotFilter BackPort: Looks like it works ok for Login protocol
       if (is17 && this.getState() == StateRegistry.PLAY) {
         channel.eventLoop().execute(() -> {
           // 1.7.x versions have a race condition with switching protocol states, so just explicitly
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/MinecraftSessionHandler.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/MinecraftSessionHandler.java
index e3d2cae0..e72f42d6 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/MinecraftSessionHandler.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/MinecraftSessionHandler.java
@@ -53,7 +53,6 @@ import com.velocitypowered.proxy.protocol.packet.title.TitleSubtitlePacket;
 import com.velocitypowered.proxy.protocol.packet.title.TitleTextPacket;
 import com.velocitypowered.proxy.protocol.packet.title.TitleTimesPacket;
 import io.netty.buffer.ByteBuf;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.PlayerPositionAndLook;
 
 public interface MinecraftSessionHandler {
 
@@ -232,10 +231,4 @@ public interface MinecraftSessionHandler {
   default boolean handle(ResourcePackResponse packet) {
     return false;
   }
-
-  //BotFilter start - add handle methods
-  default boolean handle(PlayerPositionAndLook packet) {
-    return false;
-  }
-  //BotFilter end
 }
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/LoginSessionHandler.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/LoginSessionHandler.java
index b8627700..3451c59b 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/LoginSessionHandler.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/LoginSessionHandler.java
@@ -45,17 +45,16 @@ import javax.crypto.Mac;
 import javax.crypto.SecretKey;
 import javax.crypto.spec.SecretKeySpec;
 import net.elytrium.elytraproxy.config.Settings;
-import net.kyori.adventure.text.TextComponent;
+import net.kyori.adventure.text.Component;
 import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
 
 public class LoginSessionHandler implements MinecraftSessionHandler {
 
-  private static final TextComponent MODERN_IP_FORWARDING_FAILURE = LegacyComponentSerializer
-      .legacyAmpersand()
-      .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.MODERN_FORWARDING_FAILED
-          .replace("{NL}", "\n")
-          .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-      );
+  private static final Component MODERN_IP_FORWARDING_FAILURE = /*Component
+      .translatable("velocity.error.modern-forwarding-failed");*/
+      LegacyComponentSerializer
+          .legacyAmpersand()
+          .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.MODERN_FORWARDING_FAILED);
 
   private final VelocityServer server;
   private final VelocityServerConnection serverConn;
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/TransitionSessionHandler.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/TransitionSessionHandler.java
index 35682584..0479c30a 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/TransitionSessionHandler.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/TransitionSessionHandler.java
@@ -38,6 +38,7 @@ import com.velocitypowered.proxy.protocol.packet.PluginMessage;
 import com.velocitypowered.proxy.protocol.util.PluginMessageUtil;
 import java.io.IOException;
 import java.util.concurrent.CompletableFuture;
+import net.elytrium.elytraproxy.virtual.protocol.packet.PlayerPositionAndLook;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -54,8 +55,8 @@ public class TransitionSessionHandler implements MinecraftSessionHandler {
 
   /**
    * Creates the new transition handler.
-   * @param server the Velocity server instance
-   * @param serverConn the server connection
+   * @param server       the Velocity server instance
+   * @param serverConn   the server connection
    * @param resultFuture the result future
    */
   TransitionSessionHandler(VelocityServer server,
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/VelocityServerConnection.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/VelocityServerConnection.java
index 62be4a34..9d692eb4 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/VelocityServerConnection.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/VelocityServerConnection.java
@@ -69,8 +69,8 @@ public class VelocityServerConnection implements MinecraftConnectionAssociation,
   /**
    * Initializes a new server connection.
    * @param registeredServer the server to connect to
-   * @param proxyPlayer the player connecting to the server
-   * @param server the Velocity proxy instance
+   * @param proxyPlayer      the player connecting to the server
+   * @param server           the Velocity proxy instance
    */
   public VelocityServerConnection(VelocityRegisteredServer registeredServer,
       ConnectedPlayer proxyPlayer, VelocityServer server) {
@@ -82,7 +82,7 @@ public class VelocityServerConnection implements MinecraftConnectionAssociation,
   /**
    * Connects to the server.
    * @return a {@link com.velocitypowered.api.proxy.ConnectionRequestBuilder.Result} representing
-   *         whether or not the connect succeeded
+   * whether or not the connect succeeded
    */
   public CompletableFuture<Impl> connect() {
     CompletableFuture<Impl> result = new CompletableFuture<>();
@@ -230,7 +230,7 @@ public class VelocityServerConnection implements MinecraftConnectionAssociation,
   /**
    * Sends a plugin message to the server through this connection.
    * @param identifier the channel ID to use
-   * @param data the data
+   * @param data       the data
    * @return whether or not the message was sent
    */
   public boolean sendPluginMessage(ChannelIdentifier identifier, ByteBuf data) {
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ClientPlaySessionHandler.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ClientPlaySessionHandler.java
index 67b46aca..f2fc8dae 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ClientPlaySessionHandler.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ClientPlaySessionHandler.java
@@ -68,7 +68,6 @@ import java.util.UUID;
 import java.util.concurrent.CompletableFuture;
 import net.elytrium.elytraproxy.commands.ElytraProxyCommand;
 import net.elytrium.elytraproxy.config.Settings;
-import net.kyori.adventure.identity.Identity;
 import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -84,11 +83,6 @@ public class ClientPlaySessionHandler implements MinecraftSessionHandler {
 
   private final ConnectedPlayer player;
   private boolean spawned = false;
-  // ElytraProxy
-  private boolean checkedBySettings = false;
-  private boolean checkedByBrand = false;
-  private boolean willBeKickedChat = false;
-  private boolean willBeKickedUnk = false;
   private final List<UUID> serverBossBars = new ArrayList<>();
   private final Queue<PluginMessage> loginPluginMessages = new ArrayDeque<>();
   private final VelocityServer server;
@@ -122,34 +116,6 @@ public class ClientPlaySessionHandler implements MinecraftSessionHandler {
     }
   }
 
-  // ElytraProxy
-  private void kickIfCheckNotPassed() {
-    if (Settings.IMP.ANTIBOT.ENABLE) {
-      if ((!checkedBySettings) && Settings.IMP.ANTIBOT.CHECK_CLIENT_SETTINGS) {
-        player.disconnect(
-            LegacyComponentSerializer
-                .legacyAmpersand()
-                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK.CLIENT_CHECK_SETTINGS
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                ));
-        server.getElytraProxy().getStatistics().addBlockedConnection();
-        server.getElytraProxy().getStatistics().addBlockedBots();
-      }
-      if ((!checkedByBrand) && Settings.IMP.ANTIBOT.CHECK_CLIENT_BRAND) {
-        player.disconnect(
-            LegacyComponentSerializer
-                .legacyAmpersand()
-                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK.CLIENT_CHECK_BRAND
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                ));
-        server.getElytraProxy().getStatistics().addBlockedConnection();
-        server.getElytraProxy().getStatistics().addBlockedBots();
-      }
-    }
-  }
-
   @Override
   public boolean handle(KeepAlive packet) {
     VelocityServerConnection serverConnection = player.getConnectedServer();
@@ -169,74 +135,11 @@ public class ClientPlaySessionHandler implements MinecraftSessionHandler {
   @Override
   public boolean handle(ClientSettings packet) {
     player.setPlayerSettings(packet);
-    // ElytraProxy
-    // TODO: Move to botfilter check
-    String toStringPacket = "{} send settings \"locale= '"
-        + packet.getLocale() + '\''
-        + ", viewDistance=" + packet.getViewDistance()
-        + ", chatVisibility=" + packet.getChatVisibility()
-        + ", chatColors=" + packet.isChatColors()
-        + ", skinParts=" + packet.getSkinParts()
-        + ", mainHand=" + packet.getMainHand()
-        + ", chatFilteringEnabled=" + packet.isChatFilteringEnabled() + '"';
-    if (Settings.IMP.ANTIBOT.ENABLE) {
-      if ((!checkedBySettings) && Settings.IMP.ANTIBOT.CHECK_CLIENT_SETTINGS) {
-        if (packet.toString().contains("null")) {
-          logger.error(toStringPacket, player);
-          player.disconnect(
-              LegacyComponentSerializer
-                  .legacyAmpersand()
-                  .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK.CLIENT_CHECK_SETTINGS
-                      .replace("{NL}", "\n")
-                      .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                  ));
-          server.getElytraProxy().getLogger().error("{} has null in settings packet", player);
-          server.getElytraProxy().getStatistics().addBlockedConnection();
-          server.getElytraProxy().getStatistics().addBlockedBots();
-        } else if (!packet.isChatColors()) {
-          logger.error(toStringPacket, player);
-          player.disconnect(
-              LegacyComponentSerializer
-                  .legacyAmpersand()
-                  .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK
-                          .CLIENT_CHECK_SETTINGS_CHAT_COLOR
-                      .replace("{NL}", "\n")
-                      .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                  ));
-          server.getElytraProxy().getLogger().error("{} doesn't send isChatColors packet",
-              player);
-          server.getElytraProxy().getStatistics().addBlockedConnection();
-          server.getElytraProxy().getStatistics().addBlockedBots();
-        } else if (packet.getSkinParts() == 0) {
-          logger.error(toStringPacket, player);
-          player.disconnect(
-              LegacyComponentSerializer
-                  .legacyAmpersand()
-                  .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK
-                          .CLIENT_CHECK_SETTINGS_SKIN_PARTS
-                      .replace("{NL}", "\n")
-                      .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                  ));
-          server.getElytraProxy().getLogger().error("{} doesn't send skin parts packet",
-              player);
-          server.getElytraProxy().getStatistics().addBlockedConnection();
-          server.getElytraProxy().getStatistics().addBlockedBots();
-        }
-        logger.info(toStringPacket, player);
-      }
-    }
-    checkedBySettings = true;
     return false; // will forward onto the server
   }
 
   @Override
   public boolean handle(Chat packet) {
-    // ElytraProxy
-    // TODO: Move to botfilter check
-    if (!willBeKickedChat) {
-      kickIfCheckNotPassed();
-      willBeKickedChat = true;
-    }
     VelocityServerConnection serverConnection = player.getConnectedServer();
     if (serverConnection == null) {
       return true;
@@ -261,8 +164,6 @@ public class ClientPlaySessionHandler implements MinecraftSessionHandler {
                       LegacyComponentSerializer
                           .legacyAmpersand()
                           .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.COMMAND_SPY_FORMAT
-                              .replace("{NL}", "\n")
-                              .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
                               .replace("{0}", player.getUsername())
                               .replace("{1}", "/" + originalCommand)
                           ));
@@ -270,25 +171,22 @@ public class ClientPlaySessionHandler implements MinecraftSessionHandler {
               }
             }
             if (server.getConfiguration().isLogCommandExecutions()) {
-              logger.info(Settings.IMP.MESSAGES.ELYTRAPROXY.CONSOLE_LOG_COMMAND_EXECUTIONS_FORMAT
-                  .replace("{NL}", "\n")
-                  .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                  .replace("&", "§")
-                  .replace("{0}", String.valueOf(player))
-                  .replace("{1}", "/" + originalCommand)
+              logger.info(/*"{} -> executed command /{}", player, originalCommand);*/
+                  Settings.IMP.MESSAGES.ELYTRAPROXY.CONSOLE_LOG_COMMAND_EXECUTIONS_FORMAT
+                      .replace("&", "§")
+                      .replace("{0}", String.valueOf(player))
+                      .replace("{1}", "/" + originalCommand)
               );
             }
           })
           .exceptionally(e -> {
             logger.info("Exception occurred while running command for {}",
                 player.getUsername(), e);
-            player.sendMessage(Identity.nil(),
+            player.sendMessage(/*Component.translatable("velocity.command.generic-error",
+                NamedTextColor.RED));*/
                 LegacyComponentSerializer
                     .legacyAmpersand()
-                    .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.GENERIC_ERROR
-                        .replace("{NL}", "\n")
-                        .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                    ));
+                    .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.GENERIC_ERROR));
             // ElytraProxy End
             return null;
           });
@@ -354,11 +252,6 @@ public class ClientPlaySessionHandler implements MinecraftSessionHandler {
         player.setClientBrand(PluginMessageUtil.readBrandMessage(packet.content()));
         backendConn.write(PluginMessageUtil
             .rewriteMinecraftBrand(packet, server.getVersion(), player.getProtocolVersion()));
-        if (!checkedByBrand) {
-          logger.info("{} has client brand {}", player,
-              PluginMessageUtil.readBrandMessage(packet.content()));
-          checkedByBrand = true;
-        }
       } else if (BungeeCordMessageResponder.isBungeeCordMessage(packet)) {
         return true;
       } else {
@@ -444,12 +337,6 @@ public class ClientPlaySessionHandler implements MinecraftSessionHandler {
     if (smc != null && !smc.isClosed() && serverConnection.getPhase().consideredComplete()) {
       smc.write(buf.retain());
     }
-    // ElytraProxy
-    // TODO: Move to botfilter check
-    if (!willBeKickedUnk) {
-      kickIfCheckNotPassed();
-      willBeKickedUnk = true;
-    }
   }
 
   @Override
@@ -460,13 +347,11 @@ public class ClientPlaySessionHandler implements MinecraftSessionHandler {
   @Override
   public void exception(Throwable throwable) {
     // ElytraProxy
-    player.disconnect(
+    player.disconnect(/*Component.translatable("velocity.error.player-connection-error",
+        NamedTextColor.RED));*/
         LegacyComponentSerializer
             .legacyAmpersand()
-            .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.PLAYER_CONNECTION_ERROR
-                .replace("{NL}", "\n")
-                .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-            ));
+            .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.PLAYER_CONNECTION_ERROR));
   }
 
   @Override
@@ -723,7 +608,7 @@ public class ClientPlaySessionHandler implements MinecraftSessionHandler {
         }, player.getConnection().eventLoop())
         .exceptionally((ex) -> {
           logger.error(
-              "Exception while finishing regular tab completion, with request {} and response {}",
+              "Exception while finishing regular tab completion, with request {} and response{}",
               request, response, ex);
           return null;
         });
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ConnectedPlayer.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ConnectedPlayer.java
index c40d7c3c..9279aa05 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ConnectedPlayer.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ConnectedPlayer.java
@@ -67,7 +67,6 @@ import com.velocitypowered.proxy.protocol.packet.title.GenericTitlePacket;
 import com.velocitypowered.proxy.server.VelocityRegisteredServer;
 import com.velocitypowered.proxy.tablist.VelocityTabList;
 import com.velocitypowered.proxy.tablist.VelocityTabListLegacy;
-import com.velocitypowered.proxy.util.ClosestLocaleMatcher;
 import com.velocitypowered.proxy.util.DurationUtils;
 import com.velocitypowered.proxy.util.collect.CappedSet;
 import io.netty.buffer.ByteBufUtil;
@@ -78,7 +77,6 @@ import java.util.Collection;
 import java.util.Collections;
 import java.util.List;
 import java.util.Locale;
-import java.util.Objects;
 import java.util.Optional;
 import java.util.Queue;
 import java.util.UUID;
@@ -94,10 +92,6 @@ import net.kyori.adventure.pointer.Pointers;
 import net.kyori.adventure.text.Component;
 import net.kyori.adventure.text.serializer.gson.GsonComponentSerializer;
 import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
-import net.kyori.adventure.text.serializer.plain.PlainComponentSerializer;
-import net.kyori.adventure.title.Title;
-import net.kyori.adventure.title.Title.Times;
-import net.kyori.adventure.translation.GlobalTranslator;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
@@ -108,6 +102,11 @@ import org.jetbrains.annotations.NotNull;
 public class ConnectedPlayer implements MinecraftConnectionAssociation, Player {
 
   private static final int MAX_PLUGIN_CHANNELS = 1024;
+  // ElytraProxy: Removed as unnecessary
+  /*
+  private static final PlainComponentSerializer PASS_THRU_TRANSLATE = new PlainComponentSerializer(
+      c -> "", TranslatableComponent::key);
+  */
   static final PermissionProvider DEFAULT_PERMISSIONS = s -> PermissionFunction.ALWAYS_UNDEFINED;
 
   private static final Logger logger = LogManager.getLogger(ConnectedPlayer.class);
@@ -140,10 +139,10 @@ public class ConnectedPlayer implements MinecraftConnectionAssociation, Player {
   private @Nullable ResourcePackInfo pendingResourcePack;
   private @Nullable ResourcePackInfo appliedResourcePack;
   private final @NotNull Pointers pointers = Player.super.pointers().toBuilder()
-          .withDynamic(Identity.UUID, this::getUniqueId)
-          .withDynamic(Identity.NAME, this::getUsername)
-          .withStatic(PermissionChecker.POINTER, getPermissionChecker())
-          .build();
+      .withDynamic(Identity.UUID, this::getUniqueId)
+      .withDynamic(Identity.NAME, this::getUsername)
+      .withStatic(PermissionChecker.POINTER, getPermissionChecker())
+      .build();
   private @Nullable String clientBrand;
 
   ConnectedPlayer(VelocityServer server, GameProfile profile, MinecraftConnection connection,
@@ -264,22 +263,23 @@ public class ConnectedPlayer implements MinecraftConnectionAssociation, Player {
     return connection.getProtocolVersion();
   }
 
-  /**
-   * Translates the message in the user's locale.
-   *
-   * @param message the message to translate
-   * @return the translated message
-   */
-  public Component translateMessage(Component message) {
-    Locale locale = ClosestLocaleMatcher.INSTANCE
-        .lookupClosest(this.settings == null ? Locale.getDefault() : this.settings.getLocale());
-    return GlobalTranslator.render(message, locale);
-  }
+  //ElytraProxy Start: Removed as unnecessary
+  ///**
+  // * Translates the message in the user's locale.
+  // *
+  // * @param message the message to translate
+  // * @return the translated message
+  // */
+  //public Component translateMessage(Component message) {
+  //  Locale locale = ClosestLocaleMatcher.INSTANCE
+  //      .lookupClosest(this.settings == null ? Locale.getDefault() : this.settings.getLocale());
+  //  return GlobalTranslator.render(message, locale);
+  //}
 
   @Override
   public void sendMessage(@NonNull Identity identity, @NonNull Component message) {
-    Component translated = translateMessage(message);
-    connection.write(Chat.createClientbound(identity, translated, this.getProtocolVersion()));
+    //Component translated = translateMessage(message);
+    connection.write(Chat.createClientbound(identity, message/*translated*/, this.getProtocolVersion()));
   }
 
   @Override
@@ -288,30 +288,30 @@ public class ConnectedPlayer implements MinecraftConnectionAssociation, Player {
     Preconditions.checkNotNull(message, "message");
     Preconditions.checkNotNull(type, "type");
 
-    Component translated = translateMessage(message);
-    Chat packet = Chat.createClientbound(identity, translated, this.getProtocolVersion());
+    //Component translated = translateMessage(message);
+    Chat packet = Chat.createClientbound(identity, message/*translated*/, this.getProtocolVersion());
     packet.setType(type == MessageType.CHAT ? Chat.CHAT_TYPE : Chat.SYSTEM_TYPE);
     connection.write(packet);
   }
 
   @Override
   public void sendActionBar(net.kyori.adventure.text.@NonNull Component message) {
-    Component translated = translateMessage(message);
+    //Component translated = translateMessage(message);
 
     ProtocolVersion playerVersion = getProtocolVersion();
     if (playerVersion.compareTo(ProtocolVersion.MINECRAFT_1_11) >= 0) {
       // Use the title packet instead.
       GenericTitlePacket pkt = GenericTitlePacket.constructTitlePacket(
-              GenericTitlePacket.ActionType.SET_ACTION_BAR, playerVersion);
+          GenericTitlePacket.ActionType.SET_ACTION_BAR, playerVersion);
       pkt.setComponent(ProtocolUtils.getJsonChatSerializer(playerVersion)
-          .serialize(translated));
+          .serialize(message/*translated*/));
       connection.write(pkt);
     } else {
       // Due to issues with action bar packets, we'll need to convert the text message into a
       // legacy message and then inject the legacy text into a component... yuck!
       JsonObject object = new JsonObject();
       object.addProperty("text", LegacyComponentSerializer.legacySection()
-          .serialize(translated));
+          .serialize(message/*translated*/));
       Chat chat = new Chat();
       chat.setMessage(object.toString());
       chat.setType(Chat.GAME_INFO_TYPE);
@@ -341,10 +341,12 @@ public class ConnectedPlayer implements MinecraftConnectionAssociation, Player {
 
   @Override
   public void sendPlayerListHeaderAndFooter(final Component header, final Component footer) {
+    /*
     Component translatedHeader = translateMessage(header);
     Component translatedFooter = translateMessage(footer);
-    this.playerListHeader = translatedHeader;
-    this.playerListFooter = translatedFooter;
+    */
+    this.playerListHeader = header/*translatedHeader*/;
+    this.playerListFooter = footer/*translatedFooter*/;
     if (this.getProtocolVersion().compareTo(ProtocolVersion.MINECRAFT_1_8) >= 0) {
       this.connection.write(HeaderAndFooter.create(header, footer, this.getProtocolVersion()));
     }
@@ -357,17 +359,17 @@ public class ConnectedPlayer implements MinecraftConnectionAssociation, Player {
           .getProtocolVersion());
 
       GenericTitlePacket titlePkt = GenericTitlePacket.constructTitlePacket(
-                      GenericTitlePacket.ActionType.SET_TITLE, this.getProtocolVersion());
-      titlePkt.setComponent(serializer.serialize(translateMessage(title.title())));
+          GenericTitlePacket.ActionType.SET_TITLE, this.getProtocolVersion());
+      titlePkt.setComponent(serializer.serialize(title.title()/*translateMessage(title.title())*/));
       connection.delayedWrite(titlePkt);
 
       GenericTitlePacket subtitlePkt = GenericTitlePacket.constructTitlePacket(
-              GenericTitlePacket.ActionType.SET_SUBTITLE, this.getProtocolVersion());
-      subtitlePkt.setComponent(serializer.serialize(translateMessage(title.subtitle())));
+          GenericTitlePacket.ActionType.SET_SUBTITLE, this.getProtocolVersion());
+      subtitlePkt.setComponent(serializer.serialize(title.title()/*translateMessage(title.subtitle())*/));
       connection.delayedWrite(subtitlePkt);
 
       GenericTitlePacket timesPkt = GenericTitlePacket.constructTitlePacket(
-              GenericTitlePacket.ActionType.SET_TIMES, this.getProtocolVersion());
+          GenericTitlePacket.ActionType.SET_TIMES, this.getProtocolVersion());
       net.kyori.adventure.title.Title.Times times = title.times();
       if (times != null) {
         timesPkt.setFadeIn((int) DurationUtils.toTicks(times.fadeIn()));
@@ -384,7 +386,7 @@ public class ConnectedPlayer implements MinecraftConnectionAssociation, Player {
   public void clearTitle() {
     if (this.getProtocolVersion().compareTo(ProtocolVersion.MINECRAFT_1_8) >= 0) {
       connection.write(GenericTitlePacket.constructTitlePacket(
-              GenericTitlePacket.ActionType.HIDE, this.getProtocolVersion()));
+          GenericTitlePacket.ActionType.HIDE, this.getProtocolVersion()));
     }
   }
 
@@ -392,7 +394,7 @@ public class ConnectedPlayer implements MinecraftConnectionAssociation, Player {
   public void resetTitle() {
     if (this.getProtocolVersion().compareTo(ProtocolVersion.MINECRAFT_1_8) >= 0) {
       connection.write(GenericTitlePacket.constructTitlePacket(
-                      GenericTitlePacket.ActionType.RESET, this.getProtocolVersion()));
+          GenericTitlePacket.ActionType.RESET, this.getProtocolVersion()));
     }
   }
 
@@ -446,16 +448,17 @@ public class ConnectedPlayer implements MinecraftConnectionAssociation, Player {
 
   /**
    * Disconnects the player from the proxy.
-   * @param reason the reason for disconnecting the player
+   * @param reason      the reason for disconnecting the player
    * @param duringLogin whether the disconnect happened during login
    */
   public void disconnect0(Component reason, boolean duringLogin) {
-    Component translated = this.translateMessage(reason);
+    //Component translated = this.translateMessage(reason);
 
     logger.info("{} has disconnected: {}", this,
-        LegacyComponentSerializer.legacySection().serialize(translated));
-    connection.closeWith(Disconnect.create(translated, this.getProtocolVersion()));
+        LegacyComponentSerializer.legacySection().serialize(reason/*translated*/));
+    connection.closeWith(Disconnect.create(reason/*translated*/, this.getProtocolVersion()));
   }
+  // ElytraProxy End
 
   public @Nullable VelocityServerConnection getConnectedServer() {
     return connectedServer;
@@ -471,9 +474,9 @@ public class ConnectedPlayer implements MinecraftConnectionAssociation, Player {
 
   /**
    * Handles unexpected disconnects.
-   * @param server the server we disconnected from
+   * @param server    the server we disconnected from
    * @param throwable the exception
-   * @param safe whether or not we can safely reconnect to a new server
+   * @param safe      whether or not we can safely reconnect to a new server
    */
   public void handleConnectionException(RegisteredServer server, Throwable throwable,
       boolean safe) {
@@ -496,32 +499,34 @@ public class ConnectedPlayer implements MinecraftConnectionAssociation, Player {
 
     Component friendlyError;
     if (connectedServer != null && connectedServer.getServerInfo().equals(server.getServerInfo())) {
-      friendlyError = LegacyComponentSerializer
+      // ElytraProxy Start
+      friendlyError = /*Component.translatable("velocity.error.connected-server-error",
+          Component.text(server.getServerInfo().getName()));*/
+      LegacyComponentSerializer
           .legacyAmpersand()
           .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.CONNECTED_SERVER_ERROR
-              .replace("{NL}", "\n")
-              .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
               .replace("{0}", server.getServerInfo().getName())
           );
     } else {
       logger.error("{}: unable to connect to server {}", this, server.getServerInfo().getName(),
           wrapped);
-      friendlyError = LegacyComponentSerializer
+      friendlyError = /*Component.translatable("velocity.error.connecting-server-error",
+          Component.text(server.getServerInfo().getName()));*/
+      LegacyComponentSerializer
           .legacyAmpersand()
           .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.CONNECTING_SERVER_ERROR
-              .replace("{NL}", "\n")
-              .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
               .replace("{0}", server.getServerInfo().getName())
           );
+      // ElytraProxy Start
     }
     handleConnectionException(server, null, friendlyError, safe);
   }
 
   /**
    * Handles unexpected disconnects.
-   * @param server the server we disconnected from
+   * @param server     the server we disconnected from
    * @param disconnect the disconnect packet
-   * @param safe whether or not we can safely reconnect to a new server
+   * @param safe       whether or not we can safely reconnect to a new server
    */
   public void handleConnectionException(RegisteredServer server, Disconnect disconnect,
       boolean safe) {
@@ -531,40 +536,38 @@ public class ConnectedPlayer implements MinecraftConnectionAssociation, Player {
     }
 
     Component disconnectReason = GsonComponentSerializer.gson().deserialize(disconnect.getReason());
+    // ElytraProxy Start
+    //String plainTextReason = PASS_THRU_TRANSLATE.serialize(disconnectReason);
     if (connectedServer != null && connectedServer.getServerInfo().equals(server.getServerInfo())) {
       logger.info("{}: kicked from server {}: {}", this, server.getServerInfo().getName(),
+          /*plainTextReason);*/
           LegacyComponentSerializer
               .legacySection()
               .serialize(disconnectReason));
-      // TODO: rewrite this shit
       handleConnectionException(server, disconnectReason,
           LegacyComponentSerializer
               .legacyAmpersand()
               .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.MOVED_TO_NEW_SERVER
-                  .replace("{NL}", "\n")
-                  .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
                   .replace("{0}", server.getServerInfo().getName())
-                  .replace("{1}", LegacyComponentSerializer
-                      .legacySection()
-                      .serialize(disconnectReason))
+                  .replace("{1}", LegacyComponentSerializer.legacySection().serialize(disconnectReason))
               ), safe);
     } else {
       logger.error("{}: disconnected while connecting to {}: {}", this,
-          server.getServerInfo().getName(),
-              LegacyComponentSerializer
-                  .legacySection()
-                  .serialize(disconnectReason));
+          server.getServerInfo().getName(), /*plainTextReason);*/
+          LegacyComponentSerializer
+              .legacySection()
+              .serialize(disconnectReason));
       handleConnectionException(server, disconnectReason,
+          /*Component.translatable("velocity.error.cant-connect", NamedTextColor.RED,
+              Component.text(server.getServerInfo().getName()),
+              disconnectReason),*/
           LegacyComponentSerializer
               .legacyAmpersand()
               .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.CANT_CONNECT
-                  .replace("{NL}", "\n")
-                  .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
                   .replace("{0}", server.getServerInfo().getName())
-                  .replace("{1}", LegacyComponentSerializer
-                      .legacySection()
-                      .serialize(disconnectReason))
+                  .replace("{1}", LegacyComponentSerializer.legacySection().serialize(disconnectReason))
               ), safe);
+      // ElytraProxy End
     }
   }
 
@@ -637,7 +640,7 @@ public class ConnectedPlayer implements MinecraftConnectionAssociation, Player {
                     // Impossible/nonsensical cases
                     case ALREADY_CONNECTED:
                     case CONNECTION_IN_PROGRESS:
-                    // Fatal case
+                      // Fatal case
                     case CONNECTION_CANCELLED:
                       Component fallbackMsg = res.getMessageComponent();
                       if (fallbackMsg == null) {
@@ -652,19 +655,22 @@ public class ConnectedPlayer implements MinecraftConnectionAssociation, Player {
                           getProtocolVersion()), ((Impl) status).isSafe());
                       break;
                     case SUCCESS:
-                      // ElytraProxy
-                      sendMessage(Identity.nil(),
-                          LegacyComponentSerializer
-                              .legacyAmpersand()
-                              .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.MOVED_TO_NEW_SERVER
-                                  .replace("{NL}", "\n")
-                                  .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                                  .replace("{0}", originalEvent
-                                      .getServer().getServerInfo().getName())
-                                  .replace("{1}", LegacyComponentSerializer
-                                      .legacySection()
-                                      .serialize(friendlyReason))
-                              ));
+                      Component requestedMessage = res.getMessageComponent();
+                      if (requestedMessage == null) {
+                        // ElytraProxy Start
+                        requestedMessage = /*Component.translatable("velocity.error.moved-to-new-server",
+                            NamedTextColor.RED,
+                            Component.text(originalEvent.getServer().getServerInfo().getName()),
+                            friendlyReason);*/
+                            LegacyComponentSerializer
+                                .legacyAmpersand()
+                                .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.MOVED_TO_NEW_SERVER
+                                    .replace("{0}", originalEvent.getServer().getServerInfo().getName())
+                                    .replace("{1}", LegacyComponentSerializer.legacySection().serialize(friendlyReason))
+                                );
+                        // ElytraProxy End
+                      }
+                      sendMessage(requestedMessage);
                       break;
                     default:
                       // The only remaining value is successful (no need to do anything!)
@@ -882,7 +888,7 @@ public class ConnectedPlayer implements MinecraftConnectionAssociation, Player {
         while (!outstandingResourcePacks.isEmpty()) {
           queued = outstandingResourcePacks.peek();
           if (queued.getShouldForce() && getProtocolVersion()
-                  .compareTo(ProtocolVersion.MINECRAFT_1_17) >= 0) {
+              .compareTo(ProtocolVersion.MINECRAFT_1_17) >= 0) {
             break;
           }
           onResourcePackResponse(PlayerResourcePackStatusEvent.Status.DECLINED);
@@ -924,19 +930,19 @@ public class ConnectedPlayer implements MinecraftConnectionAssociation, Player {
   public boolean onResourcePackResponse(PlayerResourcePackStatusEvent.Status status) {
     final boolean peek = status == PlayerResourcePackStatusEvent.Status.ACCEPTED;
     final ResourcePackInfo queued = peek
-            ? outstandingResourcePacks.peek() : outstandingResourcePacks.poll();
+        ? outstandingResourcePacks.peek() : outstandingResourcePacks.poll();
 
     server.getEventManager().fire(new PlayerResourcePackStatusEvent(this, status, queued))
-            .thenAcceptAsync(event -> {
-              if (event.getStatus() == PlayerResourcePackStatusEvent.Status.DECLINED
-                      && event.getPackInfo() != null && event.getPackInfo().getShouldForce()
-                      && (!event.isOverwriteKick() || event.getPlayer()
-                              .getProtocolVersion().compareTo(ProtocolVersion.MINECRAFT_1_17) >= 0)
-              ) {
-                event.getPlayer().disconnect(Component
-                        .translatable("multiplayer.requiredTexturePrompt.disconnect"));
-              }
-            });
+        .thenAcceptAsync(event -> {
+          if (event.getStatus() == PlayerResourcePackStatusEvent.Status.DECLINED
+              && event.getPackInfo() != null && event.getPackInfo().getShouldForce()
+              && (!event.isOverwriteKick() || event.getPlayer()
+              .getProtocolVersion().compareTo(ProtocolVersion.MINECRAFT_1_17) >= 0)
+          ) {
+            event.getPlayer().disconnect(Component
+                .translatable("multiplayer.requiredTexturePrompt.disconnect"));
+          }
+        });
 
     switch (status) {
       case ACCEPTED:
@@ -1033,7 +1039,7 @@ public class ConnectedPlayer implements MinecraftConnectionAssociation, Player {
         return Optional.of(ConnectionRequestBuilder.Status.CONNECTION_IN_PROGRESS);
       }
       if (connectedServer != null
-              && connectedServer.getServer().getServerInfo().equals(server.getServerInfo())) {
+          && connectedServer.getServer().getServerInfo().equals(server.getServerInfo())) {
         return Optional.of(ALREADY_CONNECTED);
       }
       return Optional.empty();
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/HandshakeSessionHandler.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/HandshakeSessionHandler.java
index 0f398877..b14d7298 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/HandshakeSessionHandler.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/HandshakeSessionHandler.java
@@ -69,15 +69,15 @@ public class HandshakeSessionHandler implements MinecraftSessionHandler {
 
   @Override
   public boolean handle(LegacyHandshake packet) {
-    // ElytraProxy
-    connection.closeWith(LegacyDisconnect
-        .from(
-            LegacyComponentSerializer
-                .legacyAmpersand()
-                .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.EXTREMELY_OLD_CLIENT
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                )));
+    // ElytraProxy Start
+    connection.closeWith(LegacyDisconnect.from(/*Component.text(
+        "Your client is extremely old. Please update to a newer version of Minecraft.",
+        NamedTextColor.RED)
+    ));*/
+        LegacyComponentSerializer
+            .legacyAmpersand()
+            .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.EXTREMELY_OLD_CLIENT)));
+    // ElytraProxy End
     return true;
   }
 
@@ -87,7 +87,8 @@ public class HandshakeSessionHandler implements MinecraftSessionHandler {
         cleanVhost(handshake.getServerAddress()), handshake);
     StateRegistry nextState = getStateForProtocol(handshake.getNextStatus());
     if (nextState == null) {
-      LOGGER.error("{} provided invalid protocol {}", ic, handshake.getNextStatus());
+      // ElytraProxy - really spams to console :(
+      // LOGGER.error("{} provided invalid protocol {}", ic, handshake.getNextStatus());
       connection.close(true);
     } else {
       connection.setState(nextState);
@@ -128,21 +129,18 @@ public class HandshakeSessionHandler implements MinecraftSessionHandler {
       return;
     }
 
-    // BotFilter backport start: global rate limiter
+    // BotFilter BackPort Start: Global rate limiter
     /*
     InetAddress address = ((InetSocketAddress) connection.getRemoteAddress()).getAddress();
     if (!server.getIpAttemptLimiter().attempt(address)) {
-      ic.disconnectQuietly(
+      ic.disconnectQuietly(//Component.translatable("velocity.error.logging-in-too-fast"));
           LegacyComponentSerializer
               .legacyAmpersand()
-              .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.LOGGING_IN_TOO_FAST
-                  .replace("{NL}", "\n")
-                  .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-              ));
+              .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.LOGGING_IN_TOO_FAST));
       return;
     }
     */
-    // BotFilter backport end - global rate limiter
+    // BotFilter BackPort End
 
     connection.setType(getHandshakeConnectionType(handshake));
 
@@ -150,14 +148,13 @@ public class HandshakeSessionHandler implements MinecraftSessionHandler {
     // and lower, otherwise IP information will never get forwarded.
     if (server.getConfiguration().getPlayerInfoForwardingMode() == PlayerInfoForwarding.MODERN
         && handshake.getProtocolVersion().compareTo(ProtocolVersion.MINECRAFT_1_13) < 0) {
-      // ElytraProxy
-      ic.disconnectQuietly(
+      // ElytraProxy Start
+      ic.disconnectQuietly(/*Component.translatable(
+          "velocity.error.modern-forwarding-needs-new-client"));*/
           LegacyComponentSerializer
               .legacyAmpersand()
-              .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.MODERN_FORWARDING_NEEDS_NEW_CLIENT
-                  .replace("{NL}", "\n")
-                  .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-              ));
+              .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.MODERN_FORWARDING_NEEDS_NEW_CLIENT));
+      // ElytraProxy End
       return;
     }
 
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/InitialInboundConnection.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/InitialInboundConnection.java
index c094cc90..00624abc 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/InitialInboundConnection.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/InitialInboundConnection.java
@@ -79,12 +79,15 @@ public final class InitialInboundConnection implements InboundConnection,
    * @param reason the reason for disconnecting
    */
   public void disconnect(Component reason) {
+    // ElytraProxy Start: Removed as unnecessary
+    /*
     Component translated = GlobalTranslator.render(reason, ClosestLocaleMatcher.INSTANCE
         .lookupClosest(Locale.getDefault()));
+    */
 
     logger.info("{} has disconnected: {}", this,
-        LegacyComponentSerializer.legacySection().serialize(translated));
-    connection.closeWith(Disconnect.create(translated, getProtocolVersion()));
+        LegacyComponentSerializer.legacySection().serialize(reason/*translated*/));
+    connection.closeWith(Disconnect.create(reason/*translated*/, getProtocolVersion()));
   }
 
   /**
@@ -92,8 +95,11 @@ public final class InitialInboundConnection implements InboundConnection,
    * @param reason the reason for disconnecting
    */
   public void disconnectQuietly(Component reason) {
+    /*
     Component translated = GlobalTranslator.render(reason, ClosestLocaleMatcher.INSTANCE
         .lookupClosest(Locale.getDefault()));
-    connection.closeWith(Disconnect.create(translated, getProtocolVersion()));
+    */
+    connection.closeWith(Disconnect.create(reason/*translated*/, getProtocolVersion()));
   }
+  // ElytraProxy End
 }
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/LoginSessionHandler.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/LoginSessionHandler.java
index 942c9911..acf75461 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/LoginSessionHandler.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/LoginSessionHandler.java
@@ -44,7 +44,6 @@ import com.velocitypowered.proxy.config.VelocityConfiguration;
 import com.velocitypowered.proxy.connection.MinecraftConnection;
 import com.velocitypowered.proxy.connection.MinecraftSessionHandler;
 import com.velocitypowered.proxy.protocol.StateRegistry;
-import com.velocitypowered.proxy.protocol.packet.Disconnect;
 import com.velocitypowered.proxy.protocol.packet.EncryptionRequest;
 import com.velocitypowered.proxy.protocol.packet.EncryptionResponse;
 import com.velocitypowered.proxy.protocol.packet.ServerLogin;
@@ -61,10 +60,9 @@ import java.util.UUID;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.ThreadLocalRandom;
+import net.elytrium.elytraproxy.ElytraProxy;
 import net.elytrium.elytraproxy.config.Settings;
 import net.kyori.adventure.text.Component;
-import net.kyori.adventure.text.format.NamedTextColor;
-import net.kyori.adventure.translation.GlobalTranslator;
 import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -86,7 +84,7 @@ public class LoginSessionHandler implements MinecraftSessionHandler {
   private @MonotonicNonNull ConnectedPlayer connectedPlayer;
 
   LoginSessionHandler(VelocityServer server, MinecraftConnection mcConnection,
-      InitialInboundConnection inbound) {
+                      InitialInboundConnection inbound) {
     this.server = Preconditions.checkNotNull(server, "server");
     this.mcConnection = Preconditions.checkNotNull(mcConnection, "mcConnection");
     this.inbound = Preconditions.checkNotNull(inbound, "inbound");
@@ -96,6 +94,8 @@ public class LoginSessionHandler implements MinecraftSessionHandler {
   public boolean handle(ServerLogin packet) {
     this.login = packet;
     beginPreLogin();
+    // ElytraProxy
+    server.getElytraProxy().getStatistics().addTotalConnectionPerSecond();
     return true;
   }
 
@@ -152,14 +152,13 @@ public class LoginSessionHandler implements MinecraftSessionHandler {
                 GameProfile.class), true);
           } else if (profileResponse.getStatusCode() == 204) {
             // Apparently an offline-mode user logged onto this online-mode proxy.
-            // ElytraProxy
-            inbound.disconnect(
+            // ElytraProxy Start
+            inbound.disconnect(/*Component.translatable("velocity.error.online-mode-only",
+                NamedTextColor.RED));*/
                 LegacyComponentSerializer
                     .legacyAmpersand()
-                    .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.ONLINE_MODE_ONLY
-                        .replace("{NL}", "\n")
-                        .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                    ));
+                    .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.ONLINE_MODE_ONLY));
+            // ElytraProxy End
           } else {
             // Something else went wrong
             logger.error(
@@ -183,8 +182,6 @@ public class LoginSessionHandler implements MinecraftSessionHandler {
   }
 
   private void beginPreLogin() {
-    // ElytraProxy
-    server.getElytraProxy().getStatistics().addTotalConnectionPerSecond();
     ServerLogin login = this.login;
     if (login == null) {
       throw new IllegalStateException("No ServerLogin packet received yet.");
@@ -205,14 +202,32 @@ public class LoginSessionHandler implements MinecraftSessionHandler {
             return;
           }
 
-          if (!result.isForceOfflineMode() && (server.getConfiguration().isOnlineMode() || result
-              .isOnlineModeAllowed())) {
-            // Request encryption.
-            EncryptionRequest request = generateEncryptionRequest();
-            this.verify = Arrays.copyOf(request.getVerifyToken(), 4);
-            mcConnection.write(request);
+          InetSocketAddress adr = inbound.getRemoteAddress();
+          if (!result.isForceOfflineMode()
+              && (server.getConfiguration().isOnlineMode() || result.isOnlineModeAllowed())
+              // Reduce amount of Mojang API when player is not checked
+              && !server.getElytraProxy().shouldCheck(login.getUsername(), adr.getAddress())) {
+            if (Settings.IMP.AUTH.ENABLE) {
+              ListenableFuture<Response> isPremiumResponse = server.getElytraProxy()
+                  .isPremiumRequest(login.getUsername()).execute();
+
+              isPremiumResponse.addListener(() -> {
+                try {
+                  if (isPremiumResponse.get().getStatusCode() == 200) {
+                    requestEncryption();
+                  } else {
+                    initializeOfflineMode();
+                  }
+                } catch (InterruptedException | ExecutionException e) {
+                  logger.error("Unable to authenticate with Mojang", e);
+                  mcConnection.close(true);
+                }
+              }, mcConnection.eventLoop());
+            } else {
+              requestEncryption();
+            }
           } else {
-            initializePlayer(GameProfile.forOfflinePlayer(login.getUsername()), false);
+            initializeOfflineMode();
           }
         }, mcConnection.eventLoop())
         .exceptionally((ex) -> {
@@ -221,6 +236,16 @@ public class LoginSessionHandler implements MinecraftSessionHandler {
         });
   }
 
+  private void requestEncryption() {
+    EncryptionRequest request = generateEncryptionRequest();
+    this.verify = Arrays.copyOf(request.getVerifyToken(), 4);
+    mcConnection.write(request);
+  }
+
+  private void initializeOfflineMode() {
+    initializePlayer(GameProfile.forOfflinePlayer(login.getUsername()), false);
+  }
+
   private EncryptionRequest generateEncryptionRequest() {
     byte[] verify = new byte[4];
     ThreadLocalRandom.current().nextBytes(verify);
@@ -239,69 +264,80 @@ public class LoginSessionHandler implements MinecraftSessionHandler {
         onlineMode);
     final GameProfile finalProfile = profile;
 
-    // BotFilter backport
-    server.getEventManager().fire(profileRequestEvent).thenAcceptAsync(profileEvent -> {
+    // BotFilter BackPort Start
+    server.getEventManager().fire(profileRequestEvent)./*thenComposeAsync*/thenAcceptAsync(profileEvent -> {
       if (mcConnection.isClosed()) {
         // The player disconnected while event execution
-        return;
+        return/* CompletableFuture.completedFuture(null)*/;
       }
+      // BotFilter BackPort End
 
       // Initiate a regular connection and move over to it.
       ConnectedPlayer player = new ConnectedPlayer(server, profileEvent.getGameProfile(),
           mcConnection, inbound.getVirtualHost().orElse(null), onlineMode);
       this.connectedPlayer = player;
-      // ElytraProxy Start: BotFilter and other
       if (!server.canRegisterConnection(player)) {
+        // ElytraProxy Start
         player.disconnect0(
             LegacyComponentSerializer
                 .legacyAmpersand()
-                .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.ALREADY_CONNECTED_PROXY
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                ), true);
-        return;
+                .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.ALREADY_CONNECTED_PROXY), true);
+        // BotFilter BackPort
+        return/* CompletableFuture.completedFuture(null)*/;
       }
+
+      logger.info("{} has connected", player);
+
+      // BotFilter BackPort Start
       /*
-      SkinSetup setup = server.getElytraProxy()
-          .getDatabase()
-          .getItem("skins", ImmutableMap.of("uuid", player.getUniqueId()), SkinSetup.class);
-      if (setup != null) {
-        List<GameProfile.Property> playerProfile = player.getGameProfileProperties();
-        playerProfile.add(new GameProfile.Property("textures", setup.texture, setup.signature));
-        player.setGameProfileProperties(playerProfile);
-      }
+      return server.getEventManager()
+          .fire(new PermissionsSetupEvent(player, ConnectedPlayer.DEFAULT_PERMISSIONS))
+          .thenAcceptAsync(event -> {
+            if (!mcConnection.isClosed()) {
+              // wait for permissions to load, then set the players permission function
+              final PermissionFunction function = event.createFunction(player);
+              if (function == null) {
+                logger.error(
+                    "A plugin permission provider {} provided an invalid permission function"
+                        + " for player {}. This is a bug in the plugin, not in Velocity. Falling"
+                        + " back to the default permission function.",
+                    event.getProvider().getClass().getName(),
+                    player.getUsername());
+              } else {
+                player.setPermissionFunction(function);
+              }
+              completeLoginProtocolPhaseAndInitialize(player);
+            }
+          }, mcConnection.eventLoop());
       */
-      logger.info("{} has connected", player);
+      // BotFilter BackPort End
+
       server.getElytraProxy().getStatistics().addConnectionPerSecond();
       if (Settings.IMP.MAIN_SETTINGS.MAINTENANCE.ENABLED
-          && !Settings.IMP.MAIN_SETTINGS.MAINTENANCE
-              .IGNORED_PLAYERS.contains(player.getUsername())) {
+          && !Settings.IMP.MAIN_SETTINGS.MAINTENANCE.IGNORED_PLAYERS.contains(player.getUsername())) {
         player.disconnect0(
             LegacyComponentSerializer
                 .legacyAmpersand()
-                .deserialize(Settings.IMP.MAIN_SETTINGS.MAINTENANCE.DISCONNECT_REASON
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                ), true);
+                .deserialize(Settings.IMP.MAIN_SETTINGS.MAINTENANCE.DISCONNECT_REASON), true);
         return;
       }
-      if (Settings.IMP.MAIN_SETTINGS.BANNED_PROTOCOLS
-          .contains(mcConnection.getProtocolVersion().getProtocol())) {
+      if (Settings.IMP.MAIN_SETTINGS.BANNED_PROTOCOLS.contains(mcConnection.getProtocolVersion().getProtocol())) {
         player.disconnect0(
             LegacyComponentSerializer
                 .legacyAmpersand()
-                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK.PROTOCOL_BLOCKED
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                ), true);
+                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK.PROTOCOL_BLOCKED), true);
         return;
       }
+      if (Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.ENABLE_CHECK_ON_CONNECTION) {
+        server.getElytraProxy().checkHostname(player, null, ElytraProxy.HostnameCheckType.LOGIN);
+      }
       if (Settings.IMP.ANTIBOT.ENABLE) {
         preLoginCheck(player);
       } else {
         completeLoginProtocol(player, true);
-        initialize(player);
+        authOrInitialize(player);
       }
+      // ElytraProxy End
     }, mcConnection.eventLoop()).exceptionally((ex) -> {
       logger.error("Exception during connection of {}", finalProfile, ex);
       return null;
@@ -310,39 +346,87 @@ public class LoginSessionHandler implements MinecraftSessionHandler {
 
   private void preLoginCheck(ConnectedPlayer player) {
     String formattedNickname = player.getUsername().toLowerCase();
-    if (Settings.IMP.ANTIBOT.BANNED_NICK_PATTERNS
-        .stream().anyMatch(formattedNickname::contains)) {
+    if (Settings.IMP.ANTIBOT.BANNED_NICK_PATTERNS.stream().anyMatch(formattedNickname::contains)) {
       player.disconnect0(
           LegacyComponentSerializer
               .legacyAmpersand()
-              .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK.NICK_BLOCKED
-                  .replace("{NL}", "\n")
-                  .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-              ), true);
+              .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK.NICK_BLOCKED), true);
       server.getElytraProxy().getStatistics().addBlockedConnection();
       server.getElytraProxy().getStatistics().addBlockedBots();
       return;
     }
-    // injectBotFilterOrFinishLogin(player);
-
-    // temp
-    completeLoginProtocol(player, true);
-    initialize(player);
+    injectBotFilterOrFinishLogin(player);
   }
 
+  // BotFilter BackPort Start
   private void injectBotFilterOrFinishLogin(ConnectedPlayer player) {
     if (server.getElytraProxy().shouldCheck(player)) {
       server.getElytraProxy().setupPipelineAndStartCheck(player, this);
     } else {
       completeLoginProtocol(player, true);
-      initialize(player);
+      authOrInitialize(player);
+    }
+  }
+
+  /*
+  private void completeLoginProtocolPhaseAndInitialize(ConnectedPlayer player) {
+    int threshold = server.getConfiguration().getCompressionThreshold();
+    if (threshold >= 0 && mcConnection.getProtocolVersion().compareTo(MINECRAFT_1_8) >= 0) {
+      mcConnection.write(new SetCompression(threshold));
+      mcConnection.setCompressionThreshold(threshold);
     }
+    VelocityConfiguration configuration = server.getConfiguration();
+    UUID playerUniqueId = player.getUniqueId();
+    if (configuration.getPlayerInfoForwardingMode() == PlayerInfoForwarding.NONE) {
+      playerUniqueId = UuidUtils.generateOfflinePlayerUuid(player.getUsername());
+    }
+    ServerLoginSuccess success = new ServerLoginSuccess();
+    success.setUsername(player.getUsername());
+    success.setUuid(playerUniqueId);
+    mcConnection.write(success);
+
+    mcConnection.setAssociation(player);
+    mcConnection.setState(StateRegistry.PLAY);
+
+    server.getEventManager().fire(new LoginEvent(player))
+        .thenAcceptAsync(event -> {
+          if (mcConnection.isClosed()) {
+            // The player was disconnected
+            server.getEventManager().fireAndForget(new DisconnectEvent(player,
+                LoginStatus.CANCELLED_BY_USER_BEFORE_COMPLETE));
+            return;
+          }
+
+          Optional<Component> reason = event.getResult().getReasonComponent();
+          if (reason.isPresent()) {
+            player.disconnect0(reason.get(), true);
+          } else {
+            if (!server.registerConnection(player)) {
+              player.disconnect0(Component.translatable("velocity.error.already-connected-proxy"),
+                  true);
+              return;
+            }
+
+            mcConnection.setSessionHandler(new InitialConnectSessionHandler(player));
+            server.getEventManager().fire(new PostLoginEvent(player))
+                .thenCompose((ignored) -> connectToInitialServer(player))
+                .exceptionally((ex) -> {
+                  logger.error("Exception while connecting {} to initial server", player, ex);
+                  return null;
+                });
+          }
+        }, mcConnection.eventLoop())
+        .exceptionally((ex) -> {
+          logger.error("Exception while completing login initialisation phase for {}", player, ex);
+          return null;
+        });
   }
+  */
 
   public void completeLoginProtocol(ConnectedPlayer player, boolean flush) {
     int threshold = server.getConfiguration().getCompressionThreshold();
     if (threshold >= 0 && mcConnection.getProtocolVersion().compareTo(MINECRAFT_1_8) >= 0) {
-      mcConnection.delayedWrite(new SetCompression(threshold));
+      mcConnection./*write*/delayedWrite(new SetCompression(threshold));
       mcConnection.setCompressionThreshold(threshold);
     }
     VelocityConfiguration configuration = server.getConfiguration();
@@ -353,22 +437,39 @@ public class LoginSessionHandler implements MinecraftSessionHandler {
     ServerLoginSuccess success = new ServerLoginSuccess();
     success.setUsername(player.getUsername());
     success.setUuid(playerUniqueId);
-    mcConnection.delayedWrite(success);
+    mcConnection./*write*/delayedWrite(success);
+
     if (flush) {
       mcConnection.flush();
     }
   }
 
+  // ElytraProxy Start
+  public void authOrInitialize(ConnectedPlayer player) {
+    if (Settings.IMP.AUTH.ENABLE && server.getElytraProxy().shouldAuth(player)) {
+      if (Settings.IMP.AUTH.ONLINE_MODE_NEED_AUTH || !player.isOnlineMode()) {
+        server.getElytraProxy().auth(player, this);
+        return;
+      }
+    }
+
+    player.getConnection().setSessionHandler(this);
+    initialize(player);
+  }
+  // ElytraProxy End
 
   public void initialize(ConnectedPlayer player) {
     mcConnection.setAssociation(player);
     mcConnection.setState(StateRegistry.PLAY);
+
     server.getEventManager()
         .fire(new PermissionsSetupEvent(player, ConnectedPlayer.DEFAULT_PERMISSIONS))
         .thenComposeAsync(premissionEvent -> {
+
           if (mcConnection.isClosed()) {
             return CompletableFuture.completedFuture(null);
           }
+
           // wait for permissions to load, then set the players permission function
           final PermissionFunction function = premissionEvent.createFunction(player);
           if (function == null) {
@@ -381,46 +482,44 @@ public class LoginSessionHandler implements MinecraftSessionHandler {
           } else {
             player.setPermissionFunction(function);
           }
-          return server.getEventManager().fire(new LoginEvent(player))
-        .thenAcceptAsync(event -> {
-          if (mcConnection.isClosed()) {
-            // The player was disconnected
-            server.getEventManager().fireAndForget(new DisconnectEvent(player,
-                LoginStatus.CANCELLED_BY_USER_BEFORE_COMPLETE));
-            return;
-          }
-
-          Optional<Component> reason = event.getResult().getReasonComponent();
-          if (reason.isPresent()) {
-            player.disconnect0(reason.get(), true);
-          } else {
-            if (!server.registerConnection(player)) {
-              player.disconnect0(
-                  LegacyComponentSerializer
-                      .legacyAmpersand()
-                      .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.ALREADY_CONNECTED_PROXY
-                          .replace("{NL}", "\n")
-                          .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                      ), true);
-              return;
-            }
 
-            mcConnection.setSessionHandler(new InitialConnectSessionHandler(player));
-            server.getEventManager().fire(new PostLoginEvent(player))
-                .thenCompose((ignored) -> connectToInitialServer(player))
-                .exceptionally((ex) -> {
-                  logger.error("Exception while connecting {} to initial server", player, ex);
-                  return null;
-                });
-          }
-        }, mcConnection.eventLoop());
+          return server.getEventManager().fire(new LoginEvent(player))
+              .thenAcceptAsync(event -> {
+                if (mcConnection.isClosed()) {
+                  // The player was disconnected
+                  server.getEventManager().fireAndForget(new DisconnectEvent(player,
+                      LoginStatus.CANCELLED_BY_USER_BEFORE_COMPLETE));
+                  return;
+                }
+
+                Optional<Component> reason = event.getResult().getReasonComponent();
+                if (reason.isPresent()) {
+                  player.disconnect0(reason.get(), true);
+                } else {
+                  if (!server.registerConnection(player)) {
+                    player.disconnect0(/*Component.translatable("velocity.error.already-connected-proxy"),*/
+                        LegacyComponentSerializer
+                            .legacyAmpersand()
+                            .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.ALREADY_CONNECTED_PROXY), true);
+                    return;
+                  }
+
+                  mcConnection.setSessionHandler(new InitialConnectSessionHandler(player));
+                  server.getEventManager().fire(new PostLoginEvent(player))
+                      .thenCompose((ignored) -> connectToInitialServer(player))
+                      .exceptionally((ex) -> {
+                        logger.error("Exception while connecting {} to initial server", player, ex);
+                        return null;
+                      });
+                }
+              }, mcConnection.eventLoop());
         }, mcConnection.eventLoop())
         .exceptionally((ex) -> {
           logger.error("Exception while completing login initialisation phase for {}", player, ex);
           return null;
         });
   }
-  // ElytraProxy End
+  // BotFilter BackPort End
 
   private CompletableFuture<Void> connectToInitialServer(ConnectedPlayer player) {
     Optional<RegisteredServer> initialFromConfig = player.getNextServerToTry();
@@ -430,17 +529,17 @@ public class LoginSessionHandler implements MinecraftSessionHandler {
     return server.getEventManager().fire(event)
         .thenRunAsync(() -> {
           Optional<RegisteredServer> toTry = event.getInitialServer();
-          if (!toTry.isPresent()) {
-            player.disconnect0(
+          if (toTry.isEmpty()) {
+            // ElytraProxy Start
+            player.disconnect0(/*Component.translatable("velocity.error.no-available-servers",
+                NamedTextColor.RED), true);*/
                 LegacyComponentSerializer
                     .legacyAmpersand()
-                    .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.NO_AVAILABLE_SERVERS
-                        .replace("{NL}", "\n")
-                        .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                    ), true);
+                    .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.NO_AVAILABLE_SERVERS), true);
+            // ElytraProxy End
             return;
           }
-          player.createConnectionRequest(toTry.get()).fireAndForget();
+          player.createConnectionRequest(toTry.get()).connect();
         }, mcConnection.eventLoop());
   }
 
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/StatusSessionHandler.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/StatusSessionHandler.java
index e5ea219d..7022c8e9 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/StatusSessionHandler.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/StatusSessionHandler.java
@@ -44,6 +44,7 @@ import java.util.List;
 import java.util.Locale;
 import java.util.Optional;
 import java.util.concurrent.CompletableFuture;
+import net.elytrium.elytraproxy.ElytraProxy;
 import net.elytrium.elytraproxy.config.Settings;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -79,24 +80,27 @@ public class StatusSessionHandler implements MinecraftSessionHandler {
   private ServerPing constructLocalPing(ProtocolVersion version) {
     VelocityConfiguration configuration = server.getConfiguration();
     return new ServerPing(
-        // ElytraProxy
+        // ElytraProxy Start
         new ServerPing.Version(version.getProtocol(),
+            /*"Velocity " + ProtocolVersion.SUPPORTED_VERSION_STRING),*/
             (Settings.IMP.MAIN_SETTINGS.MAINTENANCE.ENABLED
                 ? Settings.IMP.MAIN_SETTINGS.MAINTENANCE.PING_VERSION
                 : Settings.IMP.MAIN_SETTINGS.PING_VERSION)
-                    .replace('&', '§')
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)),
-        new ServerPing.Players(Settings.IMP.MAIN_SETTINGS.MAINTENANCE.ENABLED
-            ? 0
-            : server.getPlayerCount(),
+                    .replace('&', '§')),
+        new ServerPing.Players(/*server.getPlayerCount(), configuration.getShowMaxPlayers(),
+            ImmutableList.of()),*/
+            Settings.IMP.MAIN_SETTINGS.MAINTENANCE.ENABLED
+                ? 0
+                : server.getPlayerCount(),
             Settings.IMP.MAIN_SETTINGS.MAINTENANCE.ENABLED
-            ? 0
-            : configuration.getShowMaxPlayers(),
+                ? 0
+                : configuration.getShowMaxPlayers(),
             ImmutableList.of()),
+        /*configuration.getMotd(),*/
         Settings.IMP.MAIN_SETTINGS.MAINTENANCE.ENABLED
             ? server.getMaintenanceMotd()
             : configuration.getMotd(),
+        // ElytraProxy End
         configuration.getFavicon().orElse(null),
         configuration.isAnnounceForge() ? ModInfo.DEFAULT : null
     );
@@ -176,14 +180,17 @@ public class StatusSessionHandler implements MinecraftSessionHandler {
 
   private CompletableFuture<ServerPing> getInitialPing() {
     VelocityConfiguration configuration = server.getConfiguration();
-    ProtocolVersion shownVersion;
-    // ElytraProxy
+    ProtocolVersion shownVersion/* = ProtocolVersion.isSupported(connection.getProtocolVersion())
+        ? connection.getProtocolVersion() : ProtocolVersion.MAXIMUM_VERSION*/;
+    // ElytraProxy Start
     if (Settings.IMP.MAIN_SETTINGS.MAINTENANCE.ENABLED) {
       shownVersion = ProtocolVersion.MAINTENANCE;
     } else {
       shownVersion = ProtocolVersion.isSupported(connection.getProtocolVersion())
-        ? connection.getProtocolVersion() : ProtocolVersion.MAXIMUM_VERSION;
+          ? connection.getProtocolVersion()
+          : ProtocolVersion.MAXIMUM_VERSION;
     }
+    // ElytraProxy End
     PingPassthroughMode passthrough = configuration.getPingPassthrough();
 
     if (passthrough == PingPassthroughMode.DISABLED) {
@@ -206,8 +213,14 @@ public class StatusSessionHandler implements MinecraftSessionHandler {
     this.pingReceived = true;
     getInitialPing()
         .thenCompose(ping -> server.getEventManager().fire(new ProxyPingEvent(inbound, ping)))
-        .thenAcceptAsync(event -> connection.closeWith(
-            LegacyDisconnect.fromServerPing(event.getPing(), packet.getVersion())),
+        .thenAcceptAsync(/*event -> connection.closeWith(
+            LegacyDisconnect.fromServerPing(event.getPing(), packet.getVersion())),*/
+            (event) -> {
+              connection.closeWith(LegacyDisconnect.fromServerPing(event.getPing(), packet.getVersion()));
+              if (Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.ENABLE_CHECK_ON_PING) {
+                server.getElytraProxy().checkHostname(null, inbound, ElytraProxy.HostnameCheckType.PING);
+              }
+            },
             connection.eventLoop())
         .exceptionally((ex) -> {
           logger.error("Exception while handling legacy ping {}", packet, ex);
@@ -231,18 +244,26 @@ public class StatusSessionHandler implements MinecraftSessionHandler {
 
     getInitialPing()
         // ElytraProxy
-        .thenCompose(Settings.IMP.MAIN_SETTINGS.MAINTENANCE.ENABLED
-            ? ping -> CompletableFuture.completedFuture(new ProxyPingEvent(inbound, ping))
-            : ping -> server.getEventManager().fire(new ProxyPingEvent(inbound, ping)))
+        .thenCompose(/*ping -> server.getEventManager().fire(new ProxyPingEvent(inbound, ping)))*/
+            Settings.IMP.MAIN_SETTINGS.MAINTENANCE.ENABLED
+                ? ping -> CompletableFuture.completedFuture(new ProxyPingEvent(inbound, ping))
+                : ping -> server.getEventManager().fire(new ProxyPingEvent(inbound, ping)))
         .thenAcceptAsync(
             (event) -> {
               StringBuilder json = new StringBuilder();
               VelocityServer.getPingGsonInstance(connection.getProtocolVersion())
                   .toJson(event.getPing(), json);
               connection.write(new StatusResponse(json));
+              // BotFilter BackPort Start: Global rate limiter
               server.getIpAttemptLimiter()
-                  //BotFilter - global rate limiter
-                  .unthrottle(((InetSocketAddress)connection.getRemoteAddress()).getAddress());
+                  .unthrottle(((InetSocketAddress) connection.getRemoteAddress()).getAddress());
+              // BotFilter BackPort End
+              // ElytraProxy Start
+              // TODO: FIX
+              if (Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.ENABLE_CHECK_ON_PING) {
+                server.getElytraProxy().checkHostname(null, inbound, ElytraProxy.HostnameCheckType.PING);
+              }
+              // ElytraProxy End
             },
             connection.eventLoop())
         .exceptionally((ex) -> {
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/forge/legacy/LegacyForgeConnectionType.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/forge/legacy/LegacyForgeConnectionType.java
index 5e063b28..836548e7 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/forge/legacy/LegacyForgeConnectionType.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/forge/legacy/LegacyForgeConnectionType.java
@@ -36,8 +36,7 @@ public class LegacyForgeConnectionType extends ConnectionTypeImpl {
   }
 
   @Override
-  public GameProfile addGameProfileTokensIfRequired(GameProfile original,
-      PlayerInfoForwarding forwardingType) {
+  public GameProfile addGameProfileTokensIfRequired(GameProfile original, PlayerInfoForwarding forwardingType) {
     // We can't forward the FML token to the server when we are running in legacy forwarding mode,
     // since both use the "hostname" field in the handshake. We add a special property to the
     // profile instead, which will be ignored by non-Forge servers and can be intercepted by a
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/forge/legacy/LegacyForgeConstants.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/forge/legacy/LegacyForgeConstants.java
index 7dff8855..3c526c60 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/forge/legacy/LegacyForgeConstants.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/forge/legacy/LegacyForgeConstants.java
@@ -67,7 +67,7 @@ public class LegacyForgeConstants {
   /**
    * The payload for the reset packet.
    */
-  static final byte[] FORGE_LEGACY_HANDSHAKE_RESET_DATA = new byte[]{RESET_DATA_DISCRIMINATOR, 0};
+  static final byte[] FORGE_LEGACY_HANDSHAKE_RESET_DATA = new byte[] {RESET_DATA_DISCRIMINATOR, 0};
 
   private LegacyForgeConstants() {
     throw new AssertionError();
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/forge/legacy/LegacyForgeHandshakeBackendPhase.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/forge/legacy/LegacyForgeHandshakeBackendPhase.java
index ed435011..8c3ff28b 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/forge/legacy/LegacyForgeHandshakeBackendPhase.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/forge/legacy/LegacyForgeHandshakeBackendPhase.java
@@ -106,7 +106,8 @@ public enum LegacyForgeHandshakeBackendPhase implements BackendConnectionPhase {
     }
   };
 
-  @Nullable private final Integer packetToAdvanceOn;
+  @Nullable
+  private final Integer packetToAdvanceOn;
 
   /**
    * Creates an instance of the {@link LegacyForgeHandshakeBackendPhase}.
@@ -123,8 +124,7 @@ public enum LegacyForgeHandshakeBackendPhase implements BackendConnectionPhase {
 
   @Override
   public final boolean handle(VelocityServerConnection serverConnection,
-                              ConnectedPlayer player,
-                              PluginMessage message) {
+      ConnectedPlayer player, PluginMessage message) {
     if (message.getChannel().equals(LegacyForgeConstants.FORGE_LEGACY_HANDSHAKE_CHANNEL)) {
       // Get the phase and check if we need to start the next phase.
       LegacyForgeHandshakeBackendPhase newPhase = getNewPhase(serverConnection, message);
@@ -147,8 +147,7 @@ public enum LegacyForgeHandshakeBackendPhase implements BackendConnectionPhase {
   }
 
   @Override
-  public void onDepartForNewServer(VelocityServerConnection serverConnection,
-                                   ConnectedPlayer player) {
+  public void onDepartForNewServer(VelocityServerConnection serverConnection, ConnectedPlayer player) {
     // If the server we are departing is modded, we must always reset the client's handshake.
     player.getPhase().resetConnectionPhase(player);
   }
@@ -175,11 +174,11 @@ public enum LegacyForgeHandshakeBackendPhase implements BackendConnectionPhase {
    * Get the phase to act on, depending on the packet that has been sent.
    *
    * @param serverConnection The server Velocity is connecting to
-   * @param packet The packet
+   * @param packet           The packet
    * @return The phase to transition to, which may be the same as before.
    */
   private LegacyForgeHandshakeBackendPhase getNewPhase(VelocityServerConnection serverConnection,
-                                                       PluginMessage packet) {
+      PluginMessage packet) {
     if (packetToAdvanceOn != null
         && LegacyForgeUtil.getHandshakePacketDiscriminator(packet) == packetToAdvanceOn) {
       LegacyForgeHandshakeBackendPhase phaseToTransitionTo = nextPhase();
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/forge/legacy/LegacyForgeHandshakeClientPhase.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/forge/legacy/LegacyForgeHandshakeClientPhase.java
index 3bb1510f..333a6330 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/forge/legacy/LegacyForgeHandshakeClientPhase.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/forge/legacy/LegacyForgeHandshakeClientPhase.java
@@ -55,9 +55,7 @@ public enum LegacyForgeHandshakeClientPhase implements ClientConnectionPhase {
     }
 
     @Override
-    boolean onHandle(ConnectedPlayer player,
-        PluginMessage message,
-        MinecraftConnection backendConn) {
+    boolean onHandle(ConnectedPlayer player, PluginMessage message, MinecraftConnection backendConn) {
       // If we stay in this phase, we do nothing because it means the packet wasn't handled.
       // Returning false indicates this
       return false;
@@ -76,7 +74,6 @@ public enum LegacyForgeHandshakeClientPhase implements ClientConnectionPhase {
   },
 
 
-
   /**
    * The Mod list is sent to the server, captured by Velocity.
    * Transition to {@link #WAITING_SERVER_DATA} when an ACK is sent, which
@@ -89,9 +86,7 @@ public enum LegacyForgeHandshakeClientPhase implements ClientConnectionPhase {
     }
 
     @Override
-    boolean onHandle(ConnectedPlayer player,
-        PluginMessage message,
-        MinecraftConnection backendConn) {
+    boolean onHandle(ConnectedPlayer player, PluginMessage message, MinecraftConnection backendConn) {
       // Read the mod list if we haven't already.
       if (!player.getModInfo().isPresent()) {
         List<ModInfo.Mod> mods = LegacyForgeUtil.readModList(message);
@@ -163,9 +158,7 @@ public enum LegacyForgeHandshakeClientPhase implements ClientConnectionPhase {
     }
 
     @Override
-    boolean onHandle(ConnectedPlayer player,
-        PluginMessage message,
-        MinecraftConnection backendConn) {
+    boolean onHandle(ConnectedPlayer player, PluginMessage message, MinecraftConnection backendConn) {
       super.onHandle(player, message, backendConn);
 
       // just in case the timing is awful
@@ -180,7 +173,8 @@ public enum LegacyForgeHandshakeClientPhase implements ClientConnectionPhase {
     }
   };
 
-  @Nullable private final Integer packetToAdvanceOn;
+  @Nullable
+  private final Integer packetToAdvanceOn;
 
   /**
    * Creates an instance of the {@link LegacyForgeHandshakeClientPhase}.
@@ -196,9 +190,7 @@ public enum LegacyForgeHandshakeClientPhase implements ClientConnectionPhase {
   }
 
   @Override
-  public final boolean handle(ConnectedPlayer player,
-      PluginMessage message,
-      VelocityServerConnection server) {
+  public final boolean handle(ConnectedPlayer player, PluginMessage message, VelocityServerConnection server) {
     if (server != null) {
       MinecraftConnection backendConn = server.getConnection();
       if (backendConn != null
@@ -221,15 +213,12 @@ public enum LegacyForgeHandshakeClientPhase implements ClientConnectionPhase {
   /**
    * Handles the phase tasks.
    *
-   * @param player The player
-   * @param message The message to handle
+   * @param player      The player
+   * @param message     The message to handle
    * @param backendConn The backend connection to write to, if required.
-   *
    * @return true if handled, false otherwise.
    */
-  boolean onHandle(ConnectedPlayer player,
-      PluginMessage message,
-      MinecraftConnection backendConn) {
+  boolean onHandle(ConnectedPlayer player, PluginMessage message, MinecraftConnection backendConn) {
     // Send the packet on to the server.
     backendConn.write(message.retain());
 
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/forge/legacy/LegacyForgeUtil.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/forge/legacy/LegacyForgeUtil.java
index f541c789..8b0bd4b9 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/forge/legacy/LegacyForgeUtil.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/forge/legacy/LegacyForgeUtil.java
@@ -57,7 +57,7 @@ class LegacyForgeUtil {
   static List<ModInfo.Mod> readModList(PluginMessage message) {
     Preconditions.checkNotNull(message, "message");
     Preconditions.checkArgument(message.getChannel().equals(FORGE_LEGACY_HANDSHAKE_CHANNEL),
-            "message is not a FML HS plugin message");
+        "message is not a FML HS plugin message");
 
     ByteBuf contents = message.content().slice();
     byte discriminator = contents.readByte();
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/player/VelocityResourcePackInfo.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/player/VelocityResourcePackInfo.java
index 250e9b3a..e6b8330a 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/player/VelocityResourcePackInfo.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/player/VelocityResourcePackInfo.java
@@ -23,6 +23,7 @@ import net.kyori.adventure.text.Component;
 import org.checkerframework.checker.nullness.qual.Nullable;
 
 public final class VelocityResourcePackInfo implements ResourcePackInfo {
+
   private final String url;
   private final @Nullable byte[] hash;
   private final boolean shouldForce;
@@ -30,7 +31,7 @@ public final class VelocityResourcePackInfo implements ResourcePackInfo {
   private final Origin origin;
 
   private VelocityResourcePackInfo(String url, @Nullable byte[] hash, boolean shouldForce,
-                                  @Nullable Component prompt, Origin origin) {
+      @Nullable Component prompt, Origin origin) {
     this.url = url;
     this.hash = hash;
     this.shouldForce = shouldForce;
@@ -106,5 +107,4 @@ public final class VelocityResourcePackInfo implements ResourcePackInfo {
       this.origin = origin;
     }
   }
-
 }
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionData.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionData.java
index 07b69bae..5872e978 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionData.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionData.java
@@ -23,6 +23,7 @@ import net.kyori.adventure.nbt.CompoundBinaryTag;
 import org.checkerframework.checker.nullness.qual.Nullable;
 
 public final class DimensionData {
+
   private static final String UNKNOWN_DIMENSION_ID = "velocity:unknown_dimension";
 
   private final String registryIdentifier;
@@ -48,26 +49,27 @@ public final class DimensionData {
 
   /**
    * Initializes a new {@link DimensionData} instance.
-   * @param registryIdentifier the identifier for the dimension from the registry.
-   * @param dimensionId the dimension ID contained in the registry (the "id" tag)
-   * @param isNatural indicates if the dimension use natural world generation (e.g. overworld)
-   * @param ambientLight the light level the client sees without external lighting
-   * @param isShrunk indicates if the world is shrunk, aka not the full 256 blocks (e.g. nether)
-   * @param isUltrawarm internal dimension warmth flag
-   * @param hasCeiling indicates if the dimension has a ceiling layer
-   * @param hasSkylight indicates if the dimension should display the sun
-   * @param isPiglinSafe indicates if piglins should naturally zombify in this dimension
-   * @param doBedsWork indicates if players should be able to sleep in beds in this dimension
-   * @param doRespawnAnchorsWork indicates if player respawn points can be used in this dimension
-   * @param hasRaids indicates if raids can be spawned in the dimension
-   * @param logicalHeight the natural max height for the given dimension
+   *
+   * @param registryIdentifier         the identifier for the dimension from the registry.
+   * @param dimensionId                the dimension ID contained in the registry (the "id" tag)
+   * @param isNatural                  indicates if the dimension use natural world generation (e.g. overworld)
+   * @param ambientLight               the light level the client sees without external lighting
+   * @param isShrunk                   indicates if the world is shrunk, aka not the full 256 blocks (e.g. nether)
+   * @param isUltrawarm                internal dimension warmth flag
+   * @param hasCeiling                 indicates if the dimension has a ceiling layer
+   * @param hasSkylight                indicates if the dimension should display the sun
+   * @param isPiglinSafe               indicates if piglins should naturally zombify in this dimension
+   * @param doBedsWork                 indicates if players should be able to sleep in beds in this dimension
+   * @param doRespawnAnchorsWork       indicates if player respawn points can be used in this dimension
+   * @param hasRaids                   indicates if raids can be spawned in the dimension
+   * @param logicalHeight              the natural max height for the given dimension
    * @param burningBehaviourIdentifier the identifier for how burning blocks work in the dimension
-   * @param fixedTime optional. If set to any game daytime value will deactivate time cycle
-   * @param createDragonFight optional. Internal flag used in the end dimension
-   * @param coordinateScale optional, unknown purpose
-   * @param effects optional, unknown purpose
-   * @param minY the world effective lowest build-level
-   * @param height the world height above zero
+   * @param fixedTime                  optional. If set to any game daytime value will deactivate time cycle
+   * @param createDragonFight          optional. Internal flag used in the end dimension
+   * @param coordinateScale            optional, unknown purpose
+   * @param effects                    optional, unknown purpose
+   * @param minY                       the world effective lowest build-level
+   * @param height                     the world height above zero
    */
   public DimensionData(String registryIdentifier,
       @Nullable Integer dimensionId,
@@ -193,11 +195,10 @@ public final class DimensionData {
    * and {@code dimensionId}.
    *
    * @param registryIdentifier the identifier for the dimension from the registry
-   * @param dimensionId optional, dimension ID
+   * @param dimensionId        optional, dimension ID
    * @return a new {@link DimensionData}
    */
-  public DimensionData annotateWith(String registryIdentifier,
-      @Nullable Integer dimensionId) {
+  public DimensionData annotateWith(String registryIdentifier, @Nullable Integer dimensionId) {
     return new DimensionData(registryIdentifier, dimensionId, isNatural, ambientLight, isShrunk,
         isUltrawarm, hasCeiling, hasSkylight, isPiglinSafe, doBedsWork, doRespawnAnchorsWork,
         hasRaids, logicalHeight, burningBehaviourIdentifier, fixedTime, createDragonFight,
@@ -216,8 +217,7 @@ public final class DimensionData {
    * @param version the protocol version
    * @return game dimension data
    */
-  public static DimensionData decodeBaseCompoundTag(CompoundBinaryTag details,
-      ProtocolVersion version) {
+  public static DimensionData decodeBaseCompoundTag(CompoundBinaryTag details, ProtocolVersion version) {
     boolean isNatural = details.getBoolean("natural");
     float ambientLight = details.getFloat("ambient_light");
     boolean isShrunk = details.getBoolean("shrunk");
@@ -241,10 +241,8 @@ public final class DimensionData {
     Integer minY = details.keySet().contains("min_y") ? details.getInt("min_y") : null;
     Integer height = details.keySet().contains("height") ? details.getInt("height") : null;
     if (version.compareTo(ProtocolVersion.MINECRAFT_1_17) >= 0) {
-      Preconditions.checkNotNull(height,
-              "DimensionData requires 'height' to be present for this version");
-      Preconditions.checkNotNull(minY,
-              "DimensionData requires 'minY' to be present for this version");
+      Preconditions.checkNotNull(height, "DimensionData requires 'height' to be present for this version");
+      Preconditions.checkNotNull(minY, "DimensionData requires 'minY' to be present for this version");
     }
     return new DimensionData(
         UNKNOWN_DIMENSION_ID, null, isNatural, ambientLight, isShrunk,
@@ -256,12 +254,12 @@ public final class DimensionData {
   /**
    * Parses a given CompoundTag to a DimensionData instance. Assumes the data is part of a
    * dimension registry.
-   * @param dimTag the compound from the registry to read
+   *
+   * @param dimTag  the compound from the registry to read
    * @param version the protocol version
    * @return game dimension data
    */
-  public static DimensionData decodeRegistryEntry(CompoundBinaryTag dimTag,
-      ProtocolVersion version) {
+  public static DimensionData decodeRegistryEntry(CompoundBinaryTag dimTag, ProtocolVersion version) {
     String registryIdentifier = dimTag.getString("name");
     CompoundBinaryTag details;
     Integer dimensionId = null;
@@ -278,6 +276,7 @@ public final class DimensionData {
 
   /**
    * Encodes the Dimension data as CompoundTag.
+   *
    * @param version the version to serialize as
    * @return compound containing the dimension data
    */
@@ -301,6 +300,7 @@ public final class DimensionData {
 
   /**
    * Serializes details of this dimension.
+   *
    * @return serialized details of this dimension
    */
   public CompoundBinaryTag serializeDimensionDetails() {
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionInfo.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionInfo.java
index 8c7abd8c..bdb2a5e0 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionInfo.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionInfo.java
@@ -29,13 +29,13 @@ public final class DimensionInfo {
 
   /**
    * Initializes a new {@link DimensionInfo} instance.
+   *
    * @param registryIdentifier the identifier for the dimension from the registry
-   * @param levelName the level name as displayed in the F3 menu and logs
-   * @param isFlat if true will set world lighting below surface-level to not display fog
-   * @param isDebugType if true constrains the world to the very limited debug-type world
+   * @param levelName          the level name as displayed in the F3 menu and logs
+   * @param isFlat             if true will set world lighting below surface-level to not display fog
+   * @param isDebugType        if true constrains the world to the very limited debug-type world
    */
-  public DimensionInfo(String registryIdentifier, @Nullable String levelName,
-      boolean isFlat, boolean isDebugType) {
+  public DimensionInfo(String registryIdentifier, @Nullable String levelName, boolean isFlat, boolean isDebugType) {
     this.registryIdentifier = Preconditions.checkNotNull(
         registryIdentifier, "registryIdentifier cannot be null");
     Preconditions.checkArgument(registryIdentifier.length() > 0,
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java
index 4e7fb52a..224d8d56 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java
@@ -20,11 +20,9 @@ package com.velocitypowered.proxy.connection.registry;
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Maps;
-
 import com.velocitypowered.api.network.ProtocolVersion;
 import java.util.Map;
 import java.util.Set;
-
 import net.kyori.adventure.nbt.BinaryTag;
 import net.kyori.adventure.nbt.BinaryTagTypes;
 import net.kyori.adventure.nbt.CompoundBinaryTag;
@@ -44,11 +42,11 @@ public final class DimensionRegistry {
    * This WILL raise an IllegalArgumentException if the following is not met:
    * - At least one valid DimensionData instance is provided
    * - At least one valid world name is provided
+   *
    * @param registeredDimensions a populated {@link ImmutableSet} containing dimension data types
-   * @param levelNames a populated {@link ImmutableSet} of the level (world) names the server offers
+   * @param levelNames           a populated {@link ImmutableSet} of the level (world) names the server offers
    */
-  public DimensionRegistry(ImmutableSet<DimensionData> registeredDimensions,
-      ImmutableSet<String> levelNames) {
+  public DimensionRegistry(ImmutableSet<DimensionData> registeredDimensions, ImmutableSet<String> levelNames) {
     Preconditions.checkNotNull(registeredDimensions,
         "registeredDimensions cannot be null");
     Preconditions.checkNotNull(levelNames,
@@ -72,6 +70,7 @@ public final class DimensionRegistry {
 
   /**
    * Returns the internal dimension data type as used by the game.
+   *
    * @param dimensionIdentifier how the dimension is identified by the connection
    * @return game dimension data or null if not registered
    */
@@ -81,6 +80,7 @@ public final class DimensionRegistry {
 
   /**
    * Checks a {@link DimensionInfo} against this registry.
+   *
    * @param toValidate the {@link DimensionInfo} to validate
    * @return true: the dimension information is valid for this registry
    */
@@ -94,6 +94,7 @@ public final class DimensionRegistry {
 
   /**
    * Encodes the stored Dimension registry as CompoundTag.
+   *
    * @return the CompoundTag containing identifier:type mappings
    */
   public ListBinaryTag encodeRegistry(ProtocolVersion version) {
@@ -107,10 +108,10 @@ public final class DimensionRegistry {
 
   /**
    * Decodes a CompoundTag storing a dimension registry.
+   *
    * @param toParse CompoundTag containing a dimension registry
    */
-  public static ImmutableSet<DimensionData> fromGameData(ListBinaryTag toParse,
-      ProtocolVersion version) {
+  public static ImmutableSet<DimensionData> fromGameData(ListBinaryTag toParse, ProtocolVersion version) {
     Preconditions.checkNotNull(toParse, "ListTag cannot be null");
     ImmutableSet.Builder<DimensionData> mappings = ImmutableSet.builder();
     for (BinaryTag iter : toParse) {
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/util/ConnectionMessages.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/util/ConnectionMessages.java
index 0ff0dc89..b16d750f 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/util/ConnectionMessages.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/util/ConnectionMessages.java
@@ -25,22 +25,15 @@ public class ConnectionMessages {
 
   public static final Component ALREADY_CONNECTED = LegacyComponentSerializer
       .legacyAmpersand()
-      .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.ALREADY_CONNECTED
-          .replace("{NL}", "\n")
-          .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-      );
+      .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.ALREADY_CONNECTED);
+
   public static final Component IN_PROGRESS = LegacyComponentSerializer
       .legacyAmpersand()
-      .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.ALREADY_CONNECTING
-          .replace("{NL}", "\n")
-          .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-      );
+      .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.ALREADY_CONNECTING);
+
   public static final Component INTERNAL_SERVER_CONNECTION_ERROR = LegacyComponentSerializer
       .legacyAmpersand()
-      .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.INTERNAL_SERVER_CONNECTION_ERROR
-          .replace("{NL}", "\n")
-          .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-      );
+      .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.INTERNAL_SERVER_CONNECTION_ERROR);
 
   private ConnectionMessages() {
     throw new AssertionError();
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/console/VelocityConsole.java b/proxy/src/main/java/com/velocitypowered/proxy/console/VelocityConsole.java
index 0a59858a..c2759bd7 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/console/VelocityConsole.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/console/VelocityConsole.java
@@ -24,20 +24,13 @@ import com.velocitypowered.api.permission.PermissionFunction;
 import com.velocitypowered.api.permission.Tristate;
 import com.velocitypowered.api.proxy.ConsoleCommandSource;
 import com.velocitypowered.proxy.VelocityServer;
-import com.velocitypowered.proxy.util.ClosestLocaleMatcher;
 import java.util.List;
 import net.elytrium.elytraproxy.config.Settings;
-import java.util.Locale;
 import net.kyori.adventure.identity.Identity;
 import net.kyori.adventure.permission.PermissionChecker;
 import net.kyori.adventure.pointer.Pointers;
 import net.kyori.adventure.text.Component;
 import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
-import net.kyori.text.TextComponent;
-import net.kyori.text.format.TextColor;
-import net.kyori.adventure.text.format.NamedTextColor;
-import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
-import net.kyori.adventure.translation.GlobalTranslator;
 import net.minecrell.terminalconsole.SimpleTerminalConsole;
 import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.LogManager;
@@ -64,10 +57,14 @@ public final class VelocityConsole extends SimpleTerminalConsole implements Cons
 
   @Override
   public void sendMessage(@NonNull Identity identity, @NonNull Component message) {
+    // ElytraProxy Start: Removed as unnecessary
+    /*
     Component translated = GlobalTranslator.render(message, ClosestLocaleMatcher.INSTANCE
         .lookupClosest(Locale.getDefault()));
-    logger.info(LegacyComponentSerializer.legacySection().serialize(translated));
+    */
+    logger.info(LegacyComponentSerializer.legacySection().serialize(message/*translated*/));
   }
+  // ElytraProxy End
 
   @Override
   public @NonNull Tristate getPermissionValue(@NonNull String permission) {
@@ -130,10 +127,7 @@ public final class VelocityConsole extends SimpleTerminalConsole implements Cons
         sendMessage(
             LegacyComponentSerializer
                 .legacyAmpersand()
-                .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.COMMAND_DOES_NOT_EXIST
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                ));
+                .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.COMMAND_DOES_NOT_EXIST));
       }
     } catch (Exception e) {
       logger.error("An error occurred while running this command.", e);
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/network/ServerChannelInitializer.java b/proxy/src/main/java/com/velocitypowered/proxy/network/ServerChannelInitializer.java
index ca1c8619..d8c127bf 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/network/ServerChannelInitializer.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/network/ServerChannelInitializer.java
@@ -58,7 +58,7 @@ public class ServerChannelInitializer extends ChannelInitializer<Channel> {
     if (server.getElytraProxy() == null) {
       return;
     }
-    //BotFilter start - global rate limiter
+    // BotFilter backport Start: Global rate limiter
     boolean isProxyProtocol = this.server.getConfiguration().isProxyProtocol();
     if (!isProxyProtocol && !server.getIpAttemptLimiter()
         .attempt(((InetSocketAddress)ch.remoteAddress()).getAddress())) {
@@ -66,7 +66,7 @@ public class ServerChannelInitializer extends ChannelInitializer<Channel> {
       server.getElytraProxy().getStatistics().addBlockedConnection();
       return;
     }
-    //BotFilter end
+    // BotFilter backport End
 
     ch.pipeline()
         .addLast(LEGACY_PING_DECODER, new LegacyPingDecoder())
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/MinecraftPacket.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/MinecraftPacket.java
index 7b2184d9..9f4ff6a5 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/MinecraftPacket.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/MinecraftPacket.java
@@ -24,7 +24,7 @@ import io.netty.buffer.ByteBuf;
 
 public interface MinecraftPacket {
 
-  //BotFilter start - add default to methods
+  // BotFilter backport Start: Add default to methods
   default void decode(ByteBuf buf, Direction direction, ProtocolVersion protocolVersion) {
     throw new UnsupportedOperationException();
   }
@@ -36,7 +36,7 @@ public interface MinecraftPacket {
   default boolean handle(MinecraftSessionHandler handler) {
     throw new UnsupportedOperationException();
   }
-  //BotFilter end
+  // BotFilter backport End
 
   default int expectedMaxLength(ByteBuf buf, ProtocolUtils.Direction direction,
       ProtocolVersion version) {
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/StateRegistry.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/StateRegistry.java
index 1d786691..b9e34cd4 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/StateRegistry.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/StateRegistry.java
@@ -73,9 +73,11 @@ import io.netty.util.collection.IntObjectHashMap;
 import io.netty.util.collection.IntObjectMap;
 import it.unimi.dsi.fastutil.objects.Object2IntMap;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
+import java.util.ArrayList;
 import java.util.Collections;
 import java.util.EnumMap;
 import java.util.EnumSet;
+import java.util.List;
 import java.util.Map;
 import java.util.Objects;
 import java.util.function.Supplier;
@@ -297,7 +299,8 @@ public enum StateRegistry {
       clientbound.register(LoginPluginMessage.class, LoginPluginMessage::new,
           map(0x04, MINECRAFT_1_13, false));
     }
-  }, BotFilter{};
+  },
+  VIRTUAL {};
 
   public static final int STATUS_ID = 1;
   public static final int LOGIN_ID = 2;
@@ -323,7 +326,7 @@ public enum StateRegistry {
       this.versions = Collections.unmodifiableMap(mutableVersions);
     }
 
-    //BotFilter public
+    // BotFilter backport: Make public
     public ProtocolRegistry getProtocolRegistry(final ProtocolVersion version) {
       ProtocolRegistry registry = versions.get(version);
       if (registry == null) {
@@ -335,7 +338,7 @@ public enum StateRegistry {
       return registry;
     }
 
-    //BotFilter public
+    // BotFilter backport: Make public
     public <P extends MinecraftPacket> void register(Class<P> clazz, Supplier<P> packetSupplier,
         PacketMapping... mappings) {
       if (mappings.length == 0) {
@@ -394,6 +397,17 @@ public enum StateRegistry {
       }
     }
 
+    public PacketMapping[] getMappingsForPacket(Class<? extends MinecraftPacket> packet, boolean encodeOnly) {
+      ProtocolVersion from = ProtocolVersion.MINIMUM_VERSION;
+      ProtocolVersion to = ProtocolVersion.MAXIMUM_VERSION;
+      List<PacketMapping> mappings = new ArrayList<>();
+      for (ProtocolVersion protocol : EnumSet.range(from, to)) {
+        int id = getProtocolRegistry(protocol).getPacketId(packet);
+        mappings.add(new PacketMapping(id, protocol, null, encodeOnly));
+      }
+      return mappings.toArray(new PacketMapping[0]);
+    }
+
     public class ProtocolRegistry {
 
       public final ProtocolVersion version;
@@ -512,7 +526,7 @@ public enum StateRegistry {
    * @return PacketMapping with the provided arguments
    */
   @SuppressFBWarnings({"UPM_UNCALLED_PRIVATE_METHOD"})
-  //BotFilter public
+  // BotFilter backport: Make public
   public static PacketMapping map(int id, ProtocolVersion version, boolean encodeOnly) {
     return map(id, version, null, encodeOnly);
   }
@@ -526,7 +540,7 @@ public enum StateRegistry {
    * @param lastValidProtocolVersion Last version this Mapping is valid at
    * @return PacketMapping with the provided arguments
    */
-  //BotFilter public
+  // BotFilter backport: Make public
   public static PacketMapping map(int id, ProtocolVersion version,
           ProtocolVersion lastValidProtocolVersion, boolean encodeOnly) {
     return new PacketMapping(id, version, lastValidProtocolVersion, encodeOnly);
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/netty/GS4QueryHandler.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/netty/GS4QueryHandler.java
index 8a711ae6..247724dd 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/netty/GS4QueryHandler.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/netty/GS4QueryHandler.java
@@ -85,16 +85,18 @@ public class GS4QueryHandler extends SimpleChannelInboundHandler<DatagramPacket>
     return QueryResponse.builder()
         .hostname(PlainComponentSerializer.plain().serialize(
             Settings.IMP.MAIN_SETTINGS.MAINTENANCE.ENABLED
-            ? server.getMaintenanceMotd()
-            : server.getConfiguration().getMotd()))
+                ? server.getMaintenanceMotd()
+                : server.getConfiguration().getMotd()))
         .gameVersion("")
         .map(server.getConfiguration().getQueryMap())
-        .currentPlayers(Settings.IMP.MAIN_SETTINGS.MAINTENANCE.ENABLED
-            ? 0
-            : server.getPlayerCount())
-        .maxPlayers(Settings.IMP.MAIN_SETTINGS.MAINTENANCE.ENABLED
-            ? 0
-            : server.getConfiguration().getShowMaxPlayers())
+        .currentPlayers(
+            Settings.IMP.MAIN_SETTINGS.MAINTENANCE.ENABLED
+                ? 0
+                : server.getPlayerCount())
+        .maxPlayers(
+            Settings.IMP.MAIN_SETTINGS.MAINTENANCE.ENABLED
+                ? 0
+                : server.getConfiguration().getShowMaxPlayers())
         .proxyPort(server.getConfiguration().getBind().getPort())
         .proxyHost(server.getConfiguration().getBind().getHostString())
         .players(server.getAllPlayers().stream().filter(p -> p.getCurrentServer()
@@ -103,14 +105,14 @@ public class GS4QueryHandler extends SimpleChannelInboundHandler<DatagramPacket>
                 .contains(p.getCurrentServer().get().getServerInfo().getName()))
             .map(Player::getUsername)
             .collect(Collectors.toList()))
-        .proxyVersion((Settings.IMP.MAIN_SETTINGS.MAINTENANCE.ENABLED
-            ? Settings.IMP.MAIN_SETTINGS.MAINTENANCE.PING_VERSION
-            : Settings.IMP.MAIN_SETTINGS.PING_VERSION)
-                .replace('&', '§')
-                .replace("{NL}", "\n")
-                .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX))
+        .proxyVersion((
+            Settings.IMP.MAIN_SETTINGS.MAINTENANCE.ENABLED
+                ? Settings.IMP.MAIN_SETTINGS.MAINTENANCE.PING_VERSION
+                : Settings.IMP.MAIN_SETTINGS.PING_VERSION)
+                    .replace('&', '§'))
         .plugins(
-            server.getConfiguration().shouldQueryShowPlugins() ? getRealPluginInformation()
+            server.getConfiguration().shouldQueryShowPlugins()
+                ? getRealPluginInformation()
                 : Collections.emptyList())
         .build();
   }
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java
index 9899ef0c..31b25644 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java
@@ -75,6 +75,10 @@ public class JoinGame implements MinecraftPacket {
     this.dimension = dimension;
   }
 
+  public void setPartialHashedSeed(long partialHashedSeed) {
+    this.partialHashedSeed = partialHashedSeed;
+  }
+
   public long getPartialHashedSeed() {
     return partialHashedSeed;
   }
@@ -159,6 +163,10 @@ public class JoinGame implements MinecraftPacket {
     this.biomeRegistry = biomeRegistry;
   }
 
+  public void setCurrentDimensionData(DimensionData dimensionData) {
+    this.currentDimensionData = dimensionData;
+  }
+
   public DimensionData getCurrentDimensionData() {
     return currentDimensionData;
   }
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/util/PluginMessageUtil.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/util/PluginMessageUtil.java
index 37d77cf2..c641c510 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/util/PluginMessageUtil.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/util/PluginMessageUtil.java
@@ -129,7 +129,7 @@ public final class PluginMessageUtil {
 
     String currentBrand = readBrandMessage(message.content());
     String rewrittenBrand = Settings.IMP.MAIN_SETTINGS.BRAND
-            .replace("{ServerBrand}", currentBrand).replace("{ProxyBrand}", version.getName());
+        .replace("{ServerBrand}", currentBrand).replace("{ProxyBrand}", version.getName());
 
     ByteBuf rewrittenBuf = Unpooled.buffer();
     if (protocolVersion.compareTo(ProtocolVersion.MINECRAFT_1_8) >= 0) {
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/util/bossbar/AdventureBossBarManager.java b/proxy/src/main/java/com/velocitypowered/proxy/util/bossbar/AdventureBossBarManager.java
index 3dc8ea13..697dd589 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/util/bossbar/AdventureBossBarManager.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/util/bossbar/AdventureBossBarManager.java
@@ -124,9 +124,9 @@ public class AdventureBossBarManager implements BossBar.Listener {
       return;
     }
     for (ConnectedPlayer player : holder.subscribers) {
-      Component translated = player.translateMessage(newName);
+      //Component translated = player.translateMessage(newName);
       com.velocitypowered.proxy.protocol.packet.BossBar packet = holder.createTitleUpdate(
-          translated, player.getProtocolVersion());
+          newName/*translated*/, player.getProtocolVersion());
       player.getConnection().write(packet);
     }
   }
@@ -208,8 +208,9 @@ public class AdventureBossBarManager implements BossBar.Listener {
           .proxy.protocol.packet.BossBar();
       packet.setUuid(this.id);
       packet.setAction(com.velocitypowered.proxy.protocol.packet.BossBar.ADD);
+      // ElytraProxy: Removed as unnecessary
       packet.setName(ProtocolUtils.getJsonChatSerializer(player.getProtocolVersion())
-          .serialize(player.translateMessage(bar.name())));
+          .serialize(bar.name()/*player.translateMessage(bar.name())*/));
       packet.setColor(COLORS_TO_PROTOCOL.get(bar.color()));
       packet.setOverlay(OVERLAY_TO_PROTOCOL.get(bar.overlay()));
       packet.setPercent(bar.progress());
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/ElytraProxy.java b/proxy/src/main/java/net/elytrium/elytraproxy/ElytraProxy.java
index a2dc13bf..d3b12ecf 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/ElytraProxy.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/ElytraProxy.java
@@ -19,91 +19,110 @@ package net.elytrium.elytraproxy;
 
 import com.velocitypowered.api.command.CommandManager;
 import com.velocitypowered.api.command.CommandSource;
+import com.velocitypowered.api.proxy.InboundConnection;
 import com.velocitypowered.proxy.VelocityServer;
-import com.velocitypowered.proxy.connection.MinecraftConnection;
 import com.velocitypowered.proxy.connection.client.ConnectedPlayer;
 import com.velocitypowered.proxy.connection.client.LoginSessionHandler;
-import com.velocitypowered.proxy.network.Connections;
+import com.velocitypowered.proxy.protocol.StateRegistry;
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
-import io.netty.channel.ChannelPipeline;
 import java.io.BufferedReader;
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStreamReader;
+import java.net.InetAddress;
+import java.net.InetSocketAddress;
 import java.net.URL;
 import java.net.URLConnection;
+import java.net.http.HttpClient;
 import java.nio.charset.StandardCharsets;
+import java.sql.SQLException;
+import java.util.HashMap;
+import java.util.Locale;
+import java.util.concurrent.ExecutionException;
 import lombok.Getter;
 import lombok.ToString;
-import net.elytrium.elytraproxy.botfilter.protocol.cache.netty.MultiplePreparedPacketsEncoder;
-import net.elytrium.elytraproxy.botfilter.protocol.cache.netty.PreparedPacketEncoder;
-import net.elytrium.elytraproxy.botfilter.server.BotFilterSessionHandler;
-import net.elytrium.elytraproxy.botfilter.server.VirtualServer;
+import net.elytrium.elytraproxy.auth.handler.AuthSessionHandler;
+import net.elytrium.elytraproxy.auth.model.RegisteredPlayer;
+import net.elytrium.elytraproxy.botfilter.CaptchaGeneration;
+import net.elytrium.elytraproxy.botfilter.handler.BotFilterSessionHandler;
 import net.elytrium.elytraproxy.commands.AlertCommand;
+import net.elytrium.elytraproxy.commands.ChangePasswordCommand;
 import net.elytrium.elytraproxy.commands.ElytraProxyCommand;
 import net.elytrium.elytraproxy.commands.FindCommand;
 import net.elytrium.elytraproxy.commands.SendCommand;
+import net.elytrium.elytraproxy.commands.UnregisterCommand;
 import net.elytrium.elytraproxy.config.Settings;
 import net.elytrium.elytraproxy.database.Database;
+import net.elytrium.elytraproxy.database.MySqlDatabase;
 import net.elytrium.elytraproxy.stats.Statistics;
+import net.elytrium.elytraproxy.virtual.protocol.VirtualProtocol;
+import net.elytrium.elytraproxy.virtual.server.VirtualServer;
 import net.kyori.adventure.identity.Identity;
 import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.asynchttpclient.BoundRequestBuilder;
+import org.asynchttpclient.ListenableFuture;
+import org.asynchttpclient.Response;
 
 @Getter
 @ToString
 @SuppressFBWarnings({"RV_RETURN_VALUE_IGNORED",
     "OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE"})
 public class ElytraProxy {
+
   private final Logger logger = LogManager.getLogger("ElytraProxy");
   private Database database;
 
-  // BotFilter start
-  private final Logger bfLogger = LogManager.getLogger("BotFilter");
-
   private final VelocityServer velocityServer;
   private final VirtualServer virtualServer;
   private final Statistics statistics;
-  // BotFilter end
+
+  private final HashMap<String, InetAddress> cachedBotChecks = new HashMap<>();
+  private final HashMap<String, InetAddress> cachedAuthChecks = new HashMap<>();
+  private final HttpClient httpClient = HttpClient.newBuilder()
+      .version(HttpClient.Version.HTTP_2)
+      .build();
+
+  static {
+    VirtualProtocol.init();
+  }
 
   public ElytraProxy(VelocityServer velocityServer) {
+    Settings.IMP.reload(new File("ElytraProxy", "config.yml"));
+    initDatabase(velocityServer);
+    statistics = new Statistics();
+    statistics.startUpdating();
     // BotFilter start
+    CaptchaGeneration.init();
     this.velocityServer = velocityServer;
     this.virtualServer = new VirtualServer(this);
     this.virtualServer.reload();
     // BotFilter end
-    Settings.IMP.reload(new File("ElytraProxy", "config.yml"));
     registerCommand(velocityServer);
-    //initDatabase(velocityServer);
-    statistics = new Statistics();
-    statistics.startUpdating();
     checkForUpdates();
     logger.info("ElytraProxy was loaded.");
   }
 
-  ///**
-  // * Initializes database, creates missing tables.
-  // * Инициализирует базу данных, создает отсутствующие таблицы.
-  // */
-  /*
-  public void initDatabase(VelocityServer server) {
-    try {
-      MysqlConfig config = getConfig().getMySql();
-      database = new MySqlDatabase(config.hostname, config.database, config.user, config.password);
+  /**
+   * Initializes database, creates missing tables.
+   * Инициализирует базу данных, создает отсутствующие таблицы.
+   */
 
-      database.makeTable("skins", ImmutableMap.of(
-              "uuid", "VARCHAR(36)",
-              "texture", "VARCHAR(256)",
-              "signature", "VARCHAR(256)"
-      ));
-    } catch (SQLException e) {
-      logger.error(e);
-      logger.error("больно" getConfig().getMessages().error.mysqlLoadFailed );
-      server.shutdown();
+  public void initDatabase(VelocityServer server) {
+    Settings.DATABASE config = Settings.IMP.DATABASE;
+    if (config.ENABLED) {
+      try {
+        database = new MySqlDatabase(config.HOSTNAME, config.DATABASE, config.USER, config.PASSWORD);
+        database.makeTable(Settings.IMP.AUTH.TABLE, RegisteredPlayer.getDatabaseItem());
+      } catch (SQLException e) {
+        logger.error(e);
+        logger.error(Settings.IMP.MESSAGES.ELYTRAPROXY.DB_FAILURE);
+        server.shutdown();
+      }
     }
   }
-  */
+
   /**
    * Initializes ElytraProxy commands.
    * Инициализирует команды ElytraProxy.
@@ -115,42 +134,189 @@ public class ElytraProxy {
     manager.unregister("alert");
     manager.unregister("find");
     manager.unregister("send");
+    manager.unregister("unregister");
+    manager.unregister("changepass");
 
     manager.register("elytraproxy", new ElytraProxyCommand(server, this));
     manager.register("alert", new AlertCommand(server));
     manager.register("find", new FindCommand(server));
     manager.register("send", new SendCommand(server));
+
+    if (Settings.IMP.AUTH.ENABLE) {
+      manager.register("unregister", new UnregisterCommand(database));
+      manager.register("changepass", new ChangePasswordCommand(database));
+    }
   }
 
   public boolean shouldCheck(ConnectedPlayer player) {
-    return true;
+    InetSocketAddress adr = (InetSocketAddress) player.getConnection().getRemoteAddress();
+    return shouldCheck(player.getUsername(), adr.getAddress());
+  }
+
+  public boolean shouldCheck(String nickname, InetAddress ip) {
+    if (!Settings.IMP.ANTIBOT.ENABLE) {
+      return false;
+    }
+    if (Settings.IMP.ANTIBOT.CACHE_SUCCEED_USERS) {
+      if (cachedBotChecks.containsKey(nickname)) {
+        return !ip.equals(cachedBotChecks.get(nickname));
+      } else {
+        return true;
+      }
+    } else {
+      return true;
+    }
+  }
+
+  public boolean shouldAuth(ConnectedPlayer player) {
+    if (Settings.IMP.AUTH.CACHE_AUTH_USERS) {
+      if (cachedAuthChecks.containsKey(player.getUsername())) {
+        InetSocketAddress adr = (InetSocketAddress) player.getConnection().getRemoteAddress();
+        return !adr.getAddress().equals(cachedAuthChecks.get(player.getUsername()));
+      } else {
+        return true;
+      }
+    } else {
+      return true;
+    }
+  }
+
+  public void cacheSucceedUser(ConnectedPlayer player) {
+    if (Settings.IMP.ANTIBOT.CACHE_SUCCEED_USERS) {
+      cachedBotChecks.remove(player.getUsername());
+      InetSocketAddress adr = (InetSocketAddress) player.getConnection().getRemoteAddress();
+      cachedBotChecks.put(player.getUsername(), adr.getAddress());
+    }
+  }
+
+  public void cacheAuthUser(ConnectedPlayer player) {
+    if (Settings.IMP.AUTH.CACHE_AUTH_USERS) {
+      cachedAuthChecks.remove(player.getUsername());
+      InetSocketAddress adr = (InetSocketAddress) player.getConnection().getRemoteAddress();
+      cachedAuthChecks.put(player.getUsername(), adr.getAddress());
+    }
   }
 
   public void setupPipelineAndStartCheck(ConnectedPlayer player, LoginSessionHandler handler) {
     try {
-      BotFilterSessionHandler sessionHandler = new BotFilterSessionHandler(player, handler,
-          virtualServer);
-      bfLogger.info(sessionHandler.getPlayer().getUsername());
-
-      MinecraftConnection connection = sessionHandler.getPlayer().getConnection();
-      connection.setSessionHandler(sessionHandler);
-
-      ChannelPipeline pipeline = connection.getChannel().pipeline();
-      System.out.println("pre changed");
-      if (sessionHandler.getPlayer().isOnlineMode()) {
-        pipeline.addAfter(Connections.CIPHER_ENCODER, "prepared-encoder",
-            PreparedPacketEncoder.getEncoder(connection.getProtocolVersion(), true));
-      } else {
-        pipeline.addFirst("prepared-encoder",
-            PreparedPacketEncoder.getEncoder(connection.getProtocolVersion(), false));
-        pipeline.addFirst("multipleprepared-encoder",
-            MultiplePreparedPacketsEncoder.getEncoder(connection.getProtocolVersion()));
+      BotFilterSessionHandler botFilterSessionHandler =
+          new BotFilterSessionHandler(player, handler, virtualServer);
+
+      virtualServer.spawnPlayer(botFilterSessionHandler);
+    } catch (Throwable t) {
+      logger.error("Error", t);
+    }
+  }
+
+  public void auth(ConnectedPlayer player, LoginSessionHandler handler) {
+    if (player.getConnection().getState() != StateRegistry.VIRTUAL) {
+      player.getConnection().setState(StateRegistry.PLAY);
+    }
+    String nickname = player.getUsername().toLowerCase(Locale.ROOT);
+    for (char character : nickname.toCharArray()) {
+      if (!Settings.IMP.AUTH.ALLOWED_NICKNAME_CHARS.contains(String.valueOf(character))) {
+        player.getConnection().closeWith(virtualServer.getPackets().getNicknameInvalid());
+        return;
       }
-      System.out.println("changed");
+    }
+
+    if (!Settings.IMP.AUTH.ONLINE_MODE_NEED_AUTH) {
+      ListenableFuture<Response> isPremiumResponse = isPremiumRequest(nickname).execute();
 
-      virtualServer.spawnPlayer(sessionHandler);
+      isPremiumResponse.addListener(() -> {
+        try {
+          if (isPremiumResponse.get().getStatusCode() == 200) {
+            player.getConnection().closeWith(virtualServer.getPackets().getNicknamePremium());
+          } else {
+            sendToAuthServer(player, handler, nickname);
+          }
+        } catch (InterruptedException | ExecutionException e) {
+          logger.error("Unable to authenticate with Mojang", e);
+          player.getConnection().close(true);
+        }
+      }, player.getConnection().eventLoop());
+    }
+  }
+
+  public BoundRequestBuilder isPremiumRequest(String nickname) {
+    return velocityServer.getAsyncHttpClient()
+        .prepareGet("https://api.mojang.com/users/profiles/minecraft/" + nickname);
+  }
+
+  private void sendToAuthServer(ConnectedPlayer player, LoginSessionHandler handler, String nickname) {
+    try {
+      AuthSessionHandler authSessionHandler =
+          new AuthSessionHandler(player, handler, virtualServer, nickname);
+
+      virtualServer.spawnPlayer(authSessionHandler);
     } catch (Throwable t) {
-      bfLogger.error("Error", t);
+      logger.error("Error", t);
+    }
+  }
+
+  public void checkHostname(ConnectedPlayer player, InboundConnection inbound, HostnameCheckType type) {
+    boolean isLogin = (type == HostnameCheckType.LOGIN);
+    if (isLogin) {
+      if (player.getVirtualHost().isEmpty()) {
+        return;
+      }
+      if (inbound.getVirtualHost().isEmpty()) {
+        return;
+      }
+    }
+
+    String playerHostname;
+    String playerAddress;
+    String playerIp;
+    String playerNick = null;
+    String notifymsg = "{} tried to connect using {}";
+    if (isLogin) {
+      playerHostname = (player.getVirtualHost().get()).getHostName();
+      playerAddress = (player.getVirtualHost().get()).getAddress().getHostAddress();
+      playerIp = player.getRemoteAddress().getAddress().getHostAddress();
+      playerNick = player.getUsername();
+    } else {
+      playerHostname = (inbound.getVirtualHost().get()).getHostName();
+      playerAddress = (inbound.getVirtualHost().get()).getAddress().getHostAddress();
+      playerIp = inbound.getRemoteAddress().getAddress().getHostAddress();
+    }
+
+    if (!Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.IGNORED_IPS.contains(playerIp)) {
+      if (Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.WHITELIST) {
+        if (Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.IPS_CHECK) {
+          if (!Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.HOSTNAMES.contains(playerAddress)) {
+            getLogger().info(notifymsg, isLogin ? playerNick : playerIp, playerAddress);
+            getStatistics().addBlockedConnection();
+            getStatistics().addBlockedBots();
+            return;
+          }
+        }
+        if (Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.DOMAINS_CHECK) {
+          if (!Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.HOSTNAMES.contains(playerHostname)) {
+            getLogger().info(notifymsg, isLogin ? playerNick : playerIp, playerHostname);
+            getStatistics().addBlockedConnection();
+            getStatistics().addBlockedBots();
+            return;
+          }
+        }
+      } else {
+        if (Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.IPS_CHECK) {
+          if (Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.HOSTNAMES.contains(playerAddress)) {
+            getLogger().info(notifymsg, isLogin ? playerNick : playerIp, playerAddress);
+            getStatistics().addBlockedConnection();
+            getStatistics().addBlockedBots();
+            return;
+          }
+        }
+        if (Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.DOMAINS_CHECK) {
+          if (Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.HOSTNAMES.contains(playerHostname)) {
+            getLogger().info(notifymsg, isLogin ? playerNick : playerIp, playerHostname);
+            getStatistics().addBlockedConnection();
+            getStatistics().addBlockedBots();
+            return;
+          }
+        }
+      }
     }
   }
 
@@ -160,19 +326,13 @@ public class ElytraProxy {
       source.sendMessage(Identity.nil(),
           LegacyComponentSerializer
               .legacyAmpersand()
-              .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.RELOAD_SUCCESS
-                  .replace("{NL}", "\n")
-                  .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-              ));
+              .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.RELOAD_SUCCESS));
     } catch (Exception e) {
       logger.error("Unable to reload configuration", e);
       source.sendMessage(Identity.nil(),
           LegacyComponentSerializer
               .legacyAmpersand()
-              .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.RELOAD_FAILURE
-                  .replace("{NL}", "\n")
-                  .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-              ));
+              .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.RELOAD_FAILURE));
     }
   }
 
@@ -197,4 +357,9 @@ public class ElytraProxy {
       logger.warn("Unable to check for updates.", ex);
     }
   }
+
+  public enum HostnameCheckType {
+    LOGIN,
+    PING
+  }
 }
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/auth/handler/AuthSessionHandler.java b/proxy/src/main/java/net/elytrium/elytraproxy/auth/handler/AuthSessionHandler.java
new file mode 100644
index 00000000..59276e02
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/auth/handler/AuthSessionHandler.java
@@ -0,0 +1,194 @@
+/*
+ * Copyright (C) 2021 Elytrium
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.auth.handler;
+
+import at.favre.lib.crypto.bcrypt.BCrypt;
+import com.google.common.collect.ImmutableMap;
+import com.velocitypowered.api.network.ProtocolVersion;
+import com.velocitypowered.proxy.connection.MinecraftConnection;
+import com.velocitypowered.proxy.connection.MinecraftSessionHandler;
+import com.velocitypowered.proxy.connection.client.ConnectedPlayer;
+import com.velocitypowered.proxy.protocol.packet.Chat;
+import java.net.InetSocketAddress;
+import java.nio.charset.StandardCharsets;
+import java.util.List;
+import java.util.Map;
+import java.util.concurrent.atomic.AtomicInteger;
+import net.elytrium.elytraproxy.auth.model.RegisteredPlayer;
+import net.elytrium.elytraproxy.config.Settings;
+import net.elytrium.elytraproxy.database.Database;
+import net.elytrium.elytraproxy.virtual.server.ServerPackets;
+import net.elytrium.elytraproxy.virtual.server.VirtualServer;
+import net.elytrium.elytraproxy.virtual.server.VirtualSessionHandler;
+
+public class AuthSessionHandler extends VirtualSessionHandler {
+  private final Database database;
+  private final RegisteredPlayer playerInfo;
+  private final ServerPackets packets;
+  private final MinecraftConnection connection;
+  private final String ip;
+
+  private int attempts = Settings.IMP.AUTH.LOGIN_ATTEMPTS;
+
+  public AuthSessionHandler(
+      ConnectedPlayer player, MinecraftSessionHandler originalHandler, VirtualServer virtualServer, String nickname) {
+    super(player, originalHandler, virtualServer);
+    this.database = virtualServer.getElytraProxy().getDatabase();
+    this.packets = virtualServer.getPackets();
+    this.connection = player.getConnection();
+    this.playerInfo = fetchInfo(nickname);
+    this.ip = ((InetSocketAddress) connection.getRemoteAddress()).getAddress().getHostAddress();
+  }
+
+
+  @Override
+  public boolean handle(Chat chat) {
+    String[] args = chat.getMessage().split(" ");
+    if (args.length != 0) {
+      switch (args[0]) {
+        case "/reg":
+        case "/register":
+        case "/r":
+          if (args.length >= 3 && args[1].equals(args[2])) {
+            register(args[1]);
+            finish();
+          } else {
+            sendMessage();
+          }
+          break;
+        case "/log":
+        case "/login":
+        case "/l":
+          if (args.length >= 2) {
+            if (checkPassword(args[1])) {
+              finish();
+            } else if (attempts-- != 0) {
+              connection.write(packets.getWrongPasswordChat());
+            } else {
+              connection.closeWith(packets.getWrongPassword());
+            }
+          }
+          break;
+        default:
+          sendMessage();
+          break;
+      }
+    }
+    return true;
+  }
+
+  @Override
+  public void onSpawn() {
+    virtualServer.loginComplete(this);
+    connection.write(packets.getAuthPosAndLook());
+    if (connection.getProtocolVersion().isAfterOrEq(ProtocolVersion.MINECRAFT_1_14)) {
+      connection.write(packets.getAuthView());
+    }
+    packets.getStaticWorldPacket().forEach(connection::write);
+    connection.write(packets.getNoAbilities());
+    if (playerInfo == null) {
+      checkIp();
+    }
+    sendMessage();
+    connection.flush();
+  }
+
+  private RegisteredPlayer fetchInfo(String nickname) {
+    return database.getItem(
+        Settings.IMP.AUTH.TABLE,
+        ImmutableMap.of("nickname", nickname),
+        RegisteredPlayer.class);
+  }
+
+  private boolean checkPassword(String password) {
+    return BCrypt.verifyer().verify(
+        password.getBytes(StandardCharsets.UTF_8),
+        playerInfo.getHash().getBytes(StandardCharsets.UTF_8)
+    ).verified;
+  }
+
+  private void checkIp() {
+    List<RegisteredPlayer> alreadyRegistered = database.getItems(
+        Settings.IMP.AUTH.TABLE,
+        ImmutableMap.of("ip", ip),
+        RegisteredPlayer.class
+    );
+
+    AtomicInteger sizeOfValid = new AtomicInteger(alreadyRegistered.size());
+    long checkDate = System.currentTimeMillis() - Settings.IMP.AUTH.IP_LIMIT_VALID_TIME;
+    Map<String, Object> clearIpMap = ImmutableMap.of("ip", "");
+
+    alreadyRegistered.stream()
+        .filter(e -> e.getRegdate() < checkDate)
+        .map(e -> ImmutableMap.of("nickname", (Object) e.getNickname()))
+        .forEach(e -> {
+          database.updateMap(
+              Settings.IMP.AUTH.TABLE, e, clearIpMap
+          );
+          sizeOfValid.decrementAndGet();
+        });
+
+    if (sizeOfValid.get() >= Settings.IMP.AUTH.IP_LIMIT_REGISTRATIONS) {
+      connection.closeWith(packets.getIpLimit());
+    }
+  }
+
+  private void register(String password) {
+    String hash = genHash(password);
+
+    RegisteredPlayer registeredPlayer = new RegisteredPlayer(
+        nickname,
+        hash,
+        ip,
+        System.currentTimeMillis()
+    );
+
+    database.insert(
+        Settings.IMP.AUTH.TABLE,
+        registeredPlayer,
+        RegisteredPlayer.class,
+        false
+    );
+  }
+
+  private void finish() {
+    disconnected();
+    connection.closeWith(packets.getSuccessfulAuth());
+    // TODO: Fix connection to real server
+    // VirtualServer -> Real Server causes infinite "Loading terrain"
+    // I think it's because Velocity doesn't send Respawn packet on "first" join
+    // connection.setSessionHandler(originalHandler);
+    // ((LoginSessionHandler) originalHandler).initialize(player);
+    virtualServer.getElytraProxy().cacheAuthUser(player);
+  }
+
+  private void sendMessage() {
+    if (playerInfo == null) {
+      connection.write(packets.getRegisterChat());
+    } else {
+      connection.write(packets.getLoginChat());
+    }
+  }
+
+  public static String genHash(String password) {
+    return BCrypt.withDefaults().hashToString(
+        Settings.IMP.AUTH.BCRYPT_COST,
+        password.toCharArray()
+    );
+  }
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/auth/model/RegisteredPlayer.java b/proxy/src/main/java/net/elytrium/elytraproxy/auth/model/RegisteredPlayer.java
new file mode 100644
index 00000000..3283c320
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/auth/model/RegisteredPlayer.java
@@ -0,0 +1,46 @@
+/*
+ * Copyright (C) 2021 Elytrium
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.auth.model;
+
+import com.google.common.collect.ImmutableMap;
+import java.util.Map;
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import net.elytrium.elytraproxy.database.DatabaseItem;
+
+@Getter
+@NoArgsConstructor
+@AllArgsConstructor
+public class RegisteredPlayer {
+  public String nickname;
+  public String hash;
+  public String ip;
+  public Long regdate;
+
+  private static final Map<String, String> tableInfo = ImmutableMap.of(
+      "nickname", "VARCHAR(16)",
+      "hash", "VARCHAR(128)",
+      "ip", "VARCHAR(15)",
+      "regdate", "BIGINT UNSIGNED"
+  );
+
+  private static final String primaryKey = "nickname";
+
+  @Getter private static final DatabaseItem databaseItem = new DatabaseItem(tableInfo, primaryKey);
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/CaptchaGeneration.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/CaptchaGeneration.java
new file mode 100644
index 00000000..f989c6fe
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/CaptchaGeneration.java
@@ -0,0 +1,157 @@
+/*
+ * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
+ *
+ * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.botfilter;
+
+import java.awt.Color;
+import java.awt.Font;
+import java.awt.FontFormatException;
+import java.awt.GraphicsEnvironment;
+import java.awt.image.BufferedImage;
+import java.io.File;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.concurrent.Executors;
+import java.util.concurrent.ThreadLocalRandom;
+import java.util.concurrent.ThreadPoolExecutor;
+import java.util.concurrent.atomic.AtomicInteger;
+import javax.imageio.ImageIO;
+import lombok.SneakyThrows;
+import lombok.experimental.UtilityClass;
+import net.elytrium.elytraproxy.botfilter.generator.CaptchaPainter;
+import net.elytrium.elytraproxy.botfilter.generator.map.CraftMapCanvas;
+import net.elytrium.elytraproxy.botfilter.generator.map.MapPalette;
+import net.elytrium.elytraproxy.botfilter.cache.CachedCaptcha;
+import net.elytrium.elytraproxy.virtual.protocol.packet.MapDataPacket;
+import net.elytrium.elytraproxy.config.Settings;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+/**
+ * @author Leymooo
+ * @author hevav
+ */
+@UtilityClass
+public class CaptchaGeneration {
+
+  private static final CraftMapCanvas cachedBackgroundMap = new CraftMapCanvas();
+  private final Logger logger = LogManager.getLogger("ElytraProxy");
+  private final CaptchaPainter painter = new CaptchaPainter();
+  private final List<Font> fonts = new ArrayList<>();
+  private final AtomicInteger fontCounter = new AtomicInteger(0);
+  private final AtomicInteger colorCounter = new AtomicInteger(0);
+
+  public void init() {
+    try {
+      if (!Settings.IMP.ANTIBOT.CAPTCHA_GENERATOR.BACKPLATE_PATH.equals("")) {
+        cachedBackgroundMap.drawImage(0, 0,
+            ImageIO.read(new File(Settings.IMP.ANTIBOT.CAPTCHA_GENERATOR.BACKPLATE_PATH)));
+      }
+    } catch (IOException e) {
+      e.printStackTrace();
+    }
+
+    int fontSize = Settings.IMP.ANTIBOT.CAPTCHA_GENERATOR.FONT_SIZE;
+
+    fonts.clear();
+    if (Settings.IMP.ANTIBOT.CAPTCHA_GENERATOR.USE_STANDARD_FONTS) {
+      fonts.add(new Font(Font.SANS_SERIF, Font.PLAIN, fontSize));
+      fonts.add(new Font(Font.SERIF, Font.PLAIN, fontSize));
+      fonts.add(new Font(Font.MONOSPACED, Font.BOLD, fontSize));
+    }
+
+    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
+
+    if (Settings.IMP.ANTIBOT.CAPTCHA_GENERATOR.FONTS_PATH != null) {
+      Settings.IMP.ANTIBOT.CAPTCHA_GENERATOR.FONTS_PATH.forEach(fontFile -> {
+        try {
+          if (!fontFile.equals("")) {
+            logger.info("Loading font " + fontFile);
+            Font font = Font.createFont(Font.TRUETYPE_FONT, new File(fontFile));
+            ge.registerFont(font);
+            fonts.add(font.deriveFont(Font.PLAIN).deriveFont((float) fontSize));
+          }
+        } catch (FontFormatException | IOException e) {
+          e.printStackTrace();
+        }
+      });
+    }
+
+    new Thread(CaptchaGeneration::generateImages).start();
+  }
+
+  @SneakyThrows
+  @SuppressWarnings("StatementWithEmptyBody")
+  public void generateImages() {
+    ThreadPoolExecutor ex =
+        (ThreadPoolExecutor) Executors.newFixedThreadPool(
+            Runtime.getRuntime().availableProcessors());
+    for (int i = 100; i <= 999; i++) {
+      ex.execute(CaptchaGeneration::genNewPacket);
+    }
+
+    long start = System.currentTimeMillis();
+    while (ex.getActiveCount() != 0) {
+      // Busy wait
+    }
+
+    logger.info("Captcha generated in " + (System.currentTimeMillis() - start) + " ms.");
+    ex.shutdownNow();
+    System.gc();
+  }
+
+  public void genNewPacket() {
+    String answer = randomAnswer();
+    final CraftMapCanvas map = new CraftMapCanvas(cachedBackgroundMap.getCanvas());
+    int fontNumber = fontCounter.getAndIncrement();
+    if (fontNumber >= fonts.size()) {
+      fontNumber = 0;
+      fontCounter.set(0);
+    }
+    BufferedImage image =
+        painter.draw(fonts.get(fontNumber), randomNotWhiteColor(), answer);
+    map.drawImage(0, 0, image);
+    MapDataPacket packet = new MapDataPacket(0, (byte) 0, map.getMapData());
+    CachedCaptcha.createCaptchaPacket(packet, answer);
+  }
+
+  private Color randomNotWhiteColor() {
+    MapPalette.Color[] colors = MapPalette.getColors();
+
+    int index = colorCounter.getAndIncrement();
+    if (index >= colors.length) {
+      index = 0;
+      colorCounter.set(0);
+    }
+
+    return colors[index].toJava();
+  }
+
+  private String randomAnswer() {
+    int length = Settings.IMP.ANTIBOT.CAPTCHA_GENERATOR.LENGTH;
+    String pattern = Settings.IMP.ANTIBOT.CAPTCHA_GENERATOR.PATTERN;
+
+    char[] text = new char[length];
+    for (int i = 0; i < length; i++) {
+      text[i] = pattern.charAt(ThreadLocalRandom.current().nextInt(pattern.length()));
+    }
+    return new String(text);
+  }
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/cache/CachedCaptcha.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/cache/CachedCaptcha.java
new file mode 100644
index 00000000..d6395cd0
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/cache/CachedCaptcha.java
@@ -0,0 +1,48 @@
+/*
+ * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
+ *
+ * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.botfilter.cache;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.concurrent.atomic.AtomicInteger;
+import net.elytrium.elytraproxy.virtual.protocol.packet.MapDataPacket;
+
+/**
+ * @author Leymooo
+ * @author hevav
+ */
+public class CachedCaptcha {
+
+  private static final List<CaptchaHandler> captchas = new ArrayList<>();
+  private static final AtomicInteger counterAtomic = new AtomicInteger(0);
+
+  public static void createCaptchaPacket(MapDataPacket map, String answer) {
+    captchas.add(new CaptchaHandler(map, answer));
+  }
+
+  public static CaptchaHandler randomCaptcha() {
+    int counter = counterAtomic.incrementAndGet();
+    if (counter >= captchas.size()) {
+      counter = 0;
+      counterAtomic.set(0);
+    }
+    return captchas.get(counter);
+  }
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/cache/CaptchaHandler.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/cache/CaptchaHandler.java
new file mode 100644
index 00000000..3fd7ee02
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/cache/CaptchaHandler.java
@@ -0,0 +1,33 @@
+/*
+ * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
+ *
+ * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.botfilter.cache;
+
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import net.elytrium.elytraproxy.virtual.protocol.packet.MapDataPacket;
+
+@NoArgsConstructor
+@AllArgsConstructor
+@Getter
+public class CaptchaHandler {
+  private MapDataPacket map;
+  private String answer;
+}
\ No newline at end of file
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/generator/CaptchaPainter.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/generator/CaptchaPainter.java
new file mode 100644
index 00000000..2af5c118
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/generator/CaptchaPainter.java
@@ -0,0 +1,220 @@
+/*
+ * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
+ *
+ * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.botfilter.generator;
+
+import java.awt.Color;
+import java.awt.Font;
+import java.awt.Graphics;
+import java.awt.Graphics2D;
+import java.awt.Rectangle;
+import java.awt.RenderingHints;
+import java.awt.font.GlyphVector;
+import java.awt.geom.AffineTransform;
+import java.awt.geom.Point2D;
+import java.awt.geom.Rectangle2D;
+import java.awt.image.BufferedImage;
+import java.awt.image.ConvolveOp;
+import java.awt.image.Kernel;
+import java.util.Random;
+import net.elytrium.elytraproxy.config.Settings;
+
+public class CaptchaPainter {
+
+  private static final int width = 128;
+  private static final int height = 128;
+  private final Color background = Color.WHITE;
+  private final Random rnd = new Random();
+
+  public BufferedImage draw(Font font, Color fGround, String text) {
+    if (font == null) {
+      throw new IllegalArgumentException("Font can not be null.");
+    }
+    if (fGround == null) {
+      throw new IllegalArgumentException("Foreground color can not be null.");
+    }
+    if (text == null || text.length() < 1) {
+      throw new IllegalArgumentException("No text given.");
+    }
+
+    BufferedImage img = createImage();
+
+    final Graphics g = img.getGraphics();
+    try {
+      final Graphics2D g2 = configureGraphics(g, font, fGround);
+      draw(g2, text);
+    } finally {
+      g.dispose();
+    }
+
+    img = postProcess(img);
+
+    return img;
+  }
+
+  protected void draw(Graphics2D g, String text) {
+    final GlyphVector vector = g.getFont().createGlyphVector(g.getFontRenderContext(), text);
+
+    transform(g, text, vector);
+
+    final Rectangle bounds = vector.getPixelBounds(null, 0, height);
+    final float bw = (float) bounds.getWidth();
+    final float bh = (float) bounds.getHeight();
+
+    final boolean outlineEnabled = Settings.IMP.ANTIBOT.CAPTCHA_GENERATOR.FONT_OUTLINE;
+
+    final float wr = width / bw
+        * (rnd.nextFloat() / 20 + (outlineEnabled ? 0.89f : 0.92f))
+        * 1;
+    final float hr = height / bh
+        * (rnd.nextFloat() / 20 + (outlineEnabled ? 0.68f : 0.75f))
+        * 1;
+    g.translate((width - bw * wr) / 2, (height - bh * hr) / 2);
+    g.scale(wr, hr);
+
+    final float bx = (float) bounds.getX();
+    final float by = (float) bounds.getY();
+    if (outlineEnabled) {
+      g.draw(vector.getOutline(Math.signum(rnd.nextFloat() - 0.5f) * 1
+          * width / 200 - bx, Math.signum(rnd.nextFloat() - 0.5f) * 1
+          * height / 70 + height - by));
+    }
+    g.drawGlyphVector(vector, -bx, height - by);
+  }
+
+  protected BufferedImage createImage() {
+    return new BufferedImage(width, height, BufferedImage.TYPE_3BYTE_BGR);
+  }
+
+  protected Graphics2D configureGraphics(Graphics g, Font font, Color fGround) {
+    if (!(g instanceof Graphics2D)) {
+      throw new IllegalStateException("Graphics (" + g
+          + ") that is not an instance of Graphics2D.");
+    }
+    final Graphics2D g2 = (Graphics2D) g;
+
+    configureGraphicsQuality(g2);
+
+    g2.setColor(fGround);
+    g2.setBackground(background);
+    g2.setFont(font);
+
+    g2.clearRect(0, 0, width, height);
+
+    return g2;
+  }
+
+  protected void configureGraphicsQuality(Graphics2D g2) {
+    g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,
+        RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
+    g2.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS,
+        RenderingHints.VALUE_FRACTIONALMETRICS_ON);
+    g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
+        RenderingHints.VALUE_ANTIALIAS_ON);
+    g2.setRenderingHint(RenderingHints.KEY_COLOR_RENDERING,
+        RenderingHints.VALUE_COLOR_RENDER_QUALITY);
+    g2.setRenderingHint(RenderingHints.KEY_DITHERING,
+        RenderingHints.VALUE_DITHER_ENABLE);
+    g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION,
+        RenderingHints.VALUE_INTERPOLATION_BICUBIC);
+    g2.setRenderingHint(RenderingHints.KEY_ALPHA_INTERPOLATION,
+        RenderingHints.VALUE_ALPHA_INTERPOLATION_QUALITY);
+    g2.setRenderingHint(RenderingHints.KEY_RENDERING,
+        RenderingHints.VALUE_RENDER_QUALITY);
+
+  }
+
+  protected void transform(Graphics2D g, String text, GlyphVector v) {
+    final int glyphNum = v.getNumGlyphs();
+
+    Point2D prePos = null;
+    Rectangle2D preBounds = null;
+
+    double rotateCur = (rnd.nextDouble() - 0.5) * Math.PI / 8;
+    double rotateStep = Math.signum(rotateCur)
+        * (rnd.nextDouble() * 3 * Math.PI / 8 / glyphNum);
+    final boolean rotateEnabled = Settings.IMP.ANTIBOT.CAPTCHA_GENERATOR.FONT_ROTATE;
+
+    for (int fi = 0; fi < glyphNum; fi++) {
+      if (rotateEnabled) {
+        final AffineTransform tr = AffineTransform
+            .getRotateInstance(rotateCur);
+        if (rnd.nextDouble() < 0.25) {
+          rotateStep *= -1;
+        }
+        rotateCur += rotateStep;
+        v.setGlyphTransform(fi, tr);
+      }
+      final Point2D pos = v.getGlyphPosition(fi);
+      final Rectangle2D bounds = v.getGlyphVisualBounds(fi).getBounds2D();
+      Point2D newPos;
+      if (prePos == null) {
+        newPos = new Point2D.Double(pos.getX() - bounds.getX(),
+            pos.getY());
+      } else {
+        newPos = new Point2D.Double(
+            preBounds.getMaxX()
+                + pos.getX()
+                - bounds.getX()
+                - Math.min(preBounds.getWidth(),
+                bounds.getWidth())
+                * (rnd.nextDouble() / 20 + (rotateEnabled ? 0.27
+                : 0.1)), pos.getY());
+      }
+      v.setGlyphPosition(fi, newPos);
+      prePos = newPos;
+      preBounds = v.getGlyphVisualBounds(fi).getBounds2D();
+    }
+  }
+
+  protected BufferedImage postProcess(BufferedImage img) {
+    if (Settings.IMP.ANTIBOT.CAPTCHA_GENERATOR.FONT_RIPPLE) {
+      final Rippler.AxisConfig vertical = new Rippler.AxisConfig(
+          rnd.nextDouble() * 2 * Math.PI, (1 + rnd.nextDouble() * 2)
+          * Math.PI, img.getHeight() / 10.0);
+      final Rippler.AxisConfig horizontal = new Rippler.AxisConfig(
+          rnd.nextDouble() * 2 * Math.PI, (2 + rnd.nextDouble() * 2)
+          * Math.PI, img.getWidth() / 100.0);
+      final Rippler op = new Rippler(vertical, horizontal);
+
+      img = op.filter(img, createImage());
+    }
+
+    if (Settings.IMP.ANTIBOT.CAPTCHA_GENERATOR.FONT_BLUR) {
+      final float[] blurArray = new float[9];
+      fillBlurArray(blurArray);
+      final ConvolveOp op = new ConvolveOp(new Kernel(3, 3, blurArray),
+          ConvolveOp.EDGE_NO_OP, null);
+
+      img = op.filter(img, createImage());
+    }
+    return img;
+  }
+
+  protected void fillBlurArray(float[] array) {
+    float sum = 0;
+    for (int fi = 0; fi < array.length; fi++) {
+      array[fi] = rnd.nextFloat();
+      sum += array[fi];
+    }
+    for (int fi = 0; fi < array.length; fi++) {
+      array[fi] /= sum;
+    }
+  }
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/generator/Rippler.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/generator/Rippler.java
new file mode 100644
index 00000000..39005a9d
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/generator/Rippler.java
@@ -0,0 +1,175 @@
+/*
+ * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
+ *
+ * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.botfilter.generator;
+
+import java.awt.image.BufferedImage;
+
+/**
+ * A filter to generate ripple (wave) effected images. Uses a transformed sinus
+ * wave for this. This class is thread safe.
+ *
+ * @author akiraly
+ */
+public class Rippler {
+
+  /**
+   * Class to respresent wave tranforming information for an axis.
+   */
+  public static class AxisConfig {
+
+    private final double start;
+
+    private final double length;
+
+    private final double amplitude;
+
+    /**
+     * Constructor.
+     *
+     * @param start     the starting x offset to generate wave values. Should be
+     *                  between 0 and 2 * {@link Math#PI}.
+     * @param length    the length of x to be used to generate wave values.
+     *                  Should be between 0 and 4 * {@link Math#PI}.
+     * @param amplitude the maximum y value, if it is too big, some
+     *                  important parts of the image (like the text) can "wave" out on the
+     *                  top or on the bottom of the image.
+     */
+    public AxisConfig(double start, double length, double amplitude) {
+      this.start = normalize(start, 2);
+      this.length = normalize(length, 4);
+      this.amplitude = amplitude;
+    }
+
+    /**
+     * Normalizes parameter to fall into [0, multi * {@link Math#PI}].
+     *
+     * @param a     to be normalized
+     * @param multi multiplicator used for end value
+     * @return normalized value
+     */
+    protected double normalize(double a, int multi) {
+      final double piMulti = multi * Math.PI;
+
+      a = Math.abs(a);
+      final double d = Math.floor(a / piMulti);
+
+      return a - d * piMulti;
+    }
+
+    /**
+     * @return wave part start value
+     */
+    public double getStart() {
+      return start;
+    }
+
+    /**
+     * @return wave part length
+     */
+    public double getLength() {
+      return length;
+    }
+
+    /**
+     * @return amplitude used to transform the wave part
+     */
+    public double getAmplitude() {
+      return amplitude;
+    }
+  }
+
+  private final AxisConfig vertical;
+
+  private final AxisConfig horizontal;
+
+  /**
+   * Constructor.
+   *
+   * @param vertical   config to calculate waving deltas from x axis (so to
+   *                   modify y values), not null
+   * @param horizontal config to calculate waving deltas from y axis (so to
+   *                   modify x values), not null
+   */
+  public Rippler(AxisConfig vertical, AxisConfig horizontal) {
+    this.vertical = vertical;
+    this.horizontal = horizontal;
+  }
+
+  /**
+   * Draws a rippled (waved) variant of source into destination.
+   *
+   * @param src  to be transformed, not null
+   * @param dest to hold the result, not null
+   * @return dest is returned
+   */
+  public BufferedImage filter(BufferedImage src, BufferedImage dest) {
+    final int width = src.getWidth();
+    final int height = src.getHeight();
+
+    final int[] verticalDelta = calcDeltaArray(vertical, width);
+
+    final int[] horizontalDelta = calcDeltaArray(horizontal, height);
+
+    for (int x = 0; x < width; x++) {
+      for (int y = 0; y < height; y++) {
+        final int ny = (y + verticalDelta[x] + height) % height;
+        final int nx = (x + horizontalDelta[ny] + width) % width;
+        dest.setRGB(nx, ny, src.getRGB(x, y));
+      }
+    }
+
+    return dest;
+  }
+
+  /**
+   * Calculates wave delta array.
+   *
+   * @param axisConfig config object to transform the wave, not null
+   * @param num        number of points needed, positive
+   * @return the calculated num length delta array
+   */
+  protected int[] calcDeltaArray(AxisConfig axisConfig, int num) {
+    final int[] delta = new int[num];
+
+    final double start = axisConfig.getStart();
+    final double period = axisConfig.getLength() / num;
+    final double amplitude = axisConfig.getAmplitude();
+
+    for (int fi = 0; fi < num; fi++) {
+      delta[fi] = (int) Math.round(amplitude * Math.sin(start + fi * period));
+    }
+
+    return delta;
+  }
+
+  /**
+   * @return vertical config, not null
+   */
+  public AxisConfig getVertical() {
+    return vertical;
+  }
+
+  /**
+   * @return horizontal config, not null
+   */
+  public AxisConfig getHorizontal() {
+    return horizontal;
+  }
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/generator/map/CraftMapCanvas.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/generator/map/CraftMapCanvas.java
new file mode 100644
index 00000000..65cc30c6
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/generator/map/CraftMapCanvas.java
@@ -0,0 +1,68 @@
+/*
+ * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
+ *
+ * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.botfilter.generator.map;
+
+import java.awt.image.BufferedImage;
+import java.util.Arrays;
+import lombok.Getter;
+import net.elytrium.elytraproxy.virtual.protocol.packet.MapDataPacket;
+
+@Getter
+public class CraftMapCanvas {
+
+  private final byte[] canvas;
+  private static final int MAP_SIZE = 16384; //128x128
+
+  public CraftMapCanvas() {
+    this.canvas = new byte[MAP_SIZE];
+    Arrays.fill(this.canvas, MapPalette.WHITE);
+  }
+
+  public CraftMapCanvas(byte[] canvas) {
+    final byte[] canvasBuf = new byte[MAP_SIZE];
+    System.arraycopy(canvas, 0, canvasBuf, 0, MAP_SIZE);
+    this.canvas = canvasBuf;
+  }
+
+  public void setPixel(int x, int y, byte color) {
+    if (x >= 0 && y >= 0 && x < 128 && y < 128) {
+      this.canvas[y * 128 + x] = color;
+    }
+  }
+
+  public void drawImage(int x, int y, BufferedImage image) {
+    int[] bytes = MapPalette.imageToBytes(image);
+    int width = image.getWidth(null);
+    int height = image.getHeight(null);
+
+    for (int x2 = 0; x2 < width; ++x2) {
+      for (int y2 = 0; y2 < height; ++y2) {
+        byte color = (byte) bytes[y2 * width + x2];
+        if (color != MapPalette.WHITE) {
+          this.setPixel(x + x2, y + y2, color);
+        }
+      }
+    }
+  }
+
+  public MapDataPacket.MapData getMapData() {
+    return new MapDataPacket.MapData(128, 128, 0, 0, this.canvas);
+  }
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/generator/map/MapPalette.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/generator/map/MapPalette.java
new file mode 100644
index 00000000..e1ca4215
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/generator/map/MapPalette.java
@@ -0,0 +1,183 @@
+/*
+ * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
+ *
+ * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.botfilter.generator.map;
+
+import java.awt.image.BufferedImage;
+import java.util.HashMap;
+import java.util.Map;
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+
+public final class MapPalette {
+
+  @Getter
+  private static final Color[] colors = new Color[] {
+      c(0, 0, 0), c(0, 0, 0), c(0, 0, 0), c(0, 0, 0),
+      c(89, 125, 39), c(109, 153, 48), c(127, 178, 56), c(67, 94, 29),
+      c(174, 164, 115), c(213, 201, 140), c(247, 233, 163), c(130, 123, 86),
+      c(140, 140, 140), c(171, 171, 171), c(199, 199, 199), c(105, 105, 105),
+      c(180, 0, 0), c(220, 0, 0), c(255, 0, 0), c(135, 0, 0),
+      c(112, 112, 180), c(138, 138, 220), c(160, 160, 255), c(84, 84, 135),
+      c(117, 117, 117), c(144, 144, 144), c(167, 167, 167), c(88, 88, 88),
+      c(0, 87, 0), c(0, 106, 0), c(0, 124, 0), c(0, 65, 0),
+      c(180, 180, 180), c(220, 220, 220), c(255, 255, 255), c(135, 135, 135),
+      c(115, 118, 129), c(141, 144, 158), c(164, 168, 184), c(86, 88, 97),
+      c(106, 76, 54), c(130, 94, 66), c(151, 109, 77), c(79, 57, 40),
+      c(79, 79, 79), c(96, 96, 96), c(112, 112, 112), c(59, 59, 59),
+      c(45, 45, 180), c(55, 55, 220), c(64, 64, 255), c(33, 33, 135),
+      c(100, 84, 50), c(123, 102, 62), c(143, 119, 72), c(75, 63, 38),
+      c(180, 177, 172), c(220, 217, 211), c(255, 252, 245), c(135, 133, 129),
+      c(152, 89, 36), c(186, 109, 44), c(216, 127, 51), c(114, 67, 27),
+      c(125, 53, 152), c(153, 65, 186), c(178, 76, 216), c(94, 40, 114),
+      c(72, 108, 152), c(88, 132, 186), c(102, 153, 216), c(54, 81, 114),
+      c(161, 161, 36), c(197, 197, 44), c(229, 229, 51), c(121, 121, 27),
+      c(89, 144, 17), c(109, 176, 21), c(127, 204, 25), c(67, 108, 13),
+      c(170, 89, 116), c(208, 109, 142), c(242, 127, 165), c(128, 67, 87),
+      c(53, 53, 53), c(65, 65, 65), c(76, 76, 76), c(40, 40, 40),
+      c(108, 108, 108), c(132, 132, 132), c(153, 153, 153), c(81, 81, 81),
+      c(53, 89, 108), c(65, 109, 132), c(76, 127, 153), c(40, 67, 81),
+      c(89, 44, 125), c(109, 54, 153), c(127, 63, 178), c(67, 33, 94),
+      c(36, 53, 125), c(44, 65, 153), c(51, 76, 178), c(27, 40, 94),
+      c(72, 53, 36), c(88, 65, 44), c(102, 76, 51), c(54, 40, 27),
+      c(72, 89, 36), c(88, 109, 44), c(102, 127, 51), c(54, 67, 27),
+      c(108, 36, 36), c(132, 44, 44), c(153, 51, 51), c(81, 27, 27),
+      c(17, 17, 17), c(21, 21, 21), c(25, 25, 25), c(13, 13, 13),
+      c(176, 168, 54), c(215, 205, 66), c(250, 238, 77), c(132, 126, 40),
+      c(64, 154, 150), c(79, 188, 183), c(92, 219, 213), c(48, 115, 112),
+      c(52, 90, 180), c(63, 110, 220), c(74, 128, 255), c(39, 67, 135),
+      c(0, 153, 40), c(0, 187, 50), c(0, 217, 58), c(0, 114, 30),
+      c(91, 60, 34), c(111, 74, 42), c(129, 86, 49), c(68, 45, 25),
+      c(79, 1, 0), c(96, 1, 0), c(112, 2, 0), c(59, 1, 0),
+  };
+
+  public static final byte WHITE = 34;
+
+  private static final Map<Color, Byte> colorToIndexMap = new HashMap<>();
+
+  private static Color c(int r, int g, int b) {
+    return new Color(r, g, b);
+  }
+
+  private static double getDistance(Color c1, Color c2) {
+    double rmean = (double) (c1.getRed() + c2.getRed()) / 2.0D;
+    double r = c1.getRed() - c2.getRed();
+    double g = c1.getGreen() - c2.getGreen();
+    int b = c1.getBlue() - c2.getBlue();
+    double weightR = 2.0D + rmean / 256.0D;
+    double weightG = 4.0D;
+    double weightB = 2.0D + (255.0D - rmean) / 256.0D;
+
+    return weightR * r * r + weightG * g * g + weightB * (double) b * (double) b;
+  }
+
+  /**
+   * Convert an Image to a byte[] using the palette.
+   *
+   * @param image The image to convert.
+   * @return A byte[] containing the pixels of the image.
+   */
+  public static int[] imageToBytes(final BufferedImage image) {
+    int[] result = image.getRGB(0, 0, image.getWidth(), image.getHeight(),
+        null, 0, image.getWidth());
+    for (int i = 0; i < result.length; ++i) {
+      result[i] = tryFastMatchColor(result[i]);
+    }
+    return result;
+  }
+
+  public static byte tryFastMatchColor(int rgb) {
+    if (getAlpha(rgb) < 128) {
+      return WHITE;
+    }
+
+    Color color = simplifyRGB(rgb);
+    Byte colorId = colorToIndexMap.get(color);
+    if (colorId != null) {
+      return colorId;
+    } else {
+      return matchColor(color);
+    }
+  }
+
+  /**
+   * Get the index of the closest matching color in the palette to the given
+   * color.
+   *
+   * @param color The Color to match.
+   * @return The index in the palette.
+   */
+  public static byte matchColor(Color color) {
+    int index = 0;
+    double best = -1.0D;
+
+    for (int i = 4; i < colors.length; ++i) {
+      double distance = getDistance(color, colors[i]);
+
+      if (distance < best || best == -1.0D) {
+        best = distance;
+        index = i;
+      }
+    }
+
+    byte matched = (byte) (index < 128 ? index : -129 + (index - 127));
+    colorToIndexMap.put(color, matched);
+
+    return matched;
+  }
+
+  private static Color simplifyRGB(int rgb) {
+    int r = ((rgb & 0xff0000) >>> 16);
+    int g = ((rgb & 0xff00) >>> 8);
+    int b = (rgb & 0xff);
+
+    return new Color(r, g, b);
+  }
+
+  private static int getAlpha(int rgb) {
+    return (rgb & 0xff000000) >>> 24;
+  }
+
+  @AllArgsConstructor
+  @Getter
+  public static class Color {
+    private final int red;
+    private final int green;
+    private final int blue;
+
+    @Override
+    public int hashCode() {
+      return (red << 16) | (green << 8) | (blue);
+    }
+
+    @Override
+    public boolean equals(Object otherColor) {
+      if (otherColor instanceof Color) {
+        Color checkColor = (Color) otherColor;
+        return checkColor.red == red && checkColor.blue == blue && checkColor.green == green;
+      } else {
+        return false;
+      }
+    }
+
+    public java.awt.Color toJava() {
+      return new java.awt.Color(red, green, blue);
+    }
+  }
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/handler/BotFilterSessionHandler.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/handler/BotFilterSessionHandler.java
new file mode 100644
index 00000000..5440157d
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/handler/BotFilterSessionHandler.java
@@ -0,0 +1,360 @@
+/*
+ * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
+ *
+ * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.botfilter.handler;
+
+import com.velocitypowered.api.network.ProtocolVersion;
+import com.velocitypowered.proxy.connection.MinecraftConnection;
+import com.velocitypowered.proxy.connection.client.ConnectedPlayer;
+import com.velocitypowered.proxy.connection.client.LoginSessionHandler;
+import com.velocitypowered.proxy.protocol.MinecraftPacket;
+import com.velocitypowered.proxy.protocol.packet.Chat;
+import com.velocitypowered.proxy.protocol.packet.ClientSettings;
+import com.velocitypowered.proxy.protocol.packet.PluginMessage;
+import com.velocitypowered.proxy.protocol.util.PluginMessageUtil;
+import io.netty.buffer.ByteBuf;
+import java.util.Objects;
+import lombok.Getter;
+import lombok.Setter;
+import net.elytrium.elytraproxy.botfilter.cache.CachedCaptcha;
+import net.elytrium.elytraproxy.botfilter.cache.CaptchaHandler;
+import net.elytrium.elytraproxy.config.Settings;
+import net.elytrium.elytraproxy.stats.Statistics;
+import net.elytrium.elytraproxy.virtual.protocol.packet.SetExp;
+import net.elytrium.elytraproxy.virtual.server.ServerPackets;
+import net.elytrium.elytraproxy.virtual.server.VirtualServer;
+import net.elytrium.elytraproxy.virtual.server.world.chunk.SimpleChunk;
+import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
+import org.apache.logging.log4j.Logger;
+
+@Getter
+public class BotFilterSessionHandler extends FallingCheckHandler {
+
+  public static final long TOTAL_TICKS = Settings.IMP.ANTIBOT.FALLING_CHECK_TICKS;
+  private static final long TOTAL_TIME = (TOTAL_TICKS * 50) - 100;
+
+  private final Statistics statistics;
+  private final Logger logger;
+  private final ServerPackets packets;
+  private final MinecraftConnection connection;
+  private final MinecraftPacket fallingCheckPos;
+  private final MinecraftPacket fallingCheckChunk;
+  private final MinecraftPacket fallingCheckView;
+  private final double captchaY = Settings.IMP.ANTIBOT.CAPTCHA_COORDS.Y;
+  @Setter
+  private String captchaAnswer;
+  private int ignoredTicks = 0;
+  private long joinTime = System.currentTimeMillis();
+  private int attempts = Settings.IMP.ANTIBOT.CAPTCHA_ATTEMPTS;
+  private boolean startedListening = false;
+  private int nonValidPacketsSize = 0;
+  @Getter
+  private CheckState state = CheckState.valueOf(Settings.IMP.ANTIBOT.CHECK_STATE);
+  private boolean checkedBySettings = false;
+  private boolean checkedByBrand = false;
+
+  public BotFilterSessionHandler(ConnectedPlayer player, LoginSessionHandler originalHandler, VirtualServer virtualServer) {
+    super(player.getProtocolVersion(), player, originalHandler, virtualServer);
+    this.statistics = virtualServer.getElytraProxy().getStatistics();
+    this.logger = virtualServer.getElytraProxy().getLogger();
+    this.packets = virtualServer.getPackets();
+    this.connection = player.getConnection();
+    this.fallingCheckPos = packets.createPlayerPosAndLookPacket(validX, validY, validZ);
+    this.fallingCheckChunk = packets.createChunkDataPacket(
+        new SimpleChunk(Math.floorDiv(validX, 16), Math.floorDiv(validZ, 16)), validY);
+    this.fallingCheckView = packets.createUpdateViewPosition(validX, validZ);
+  }
+
+  @Override
+  public boolean handle(Chat chat) {
+    if (state == CheckState.CAPTCHA_POSITION || state == CheckState.ONLY_CAPTCHA) {
+      String message = chat.getMessage();
+      if (message.length() > 256) {
+        return false;
+      } else if (message.equals(captchaAnswer)) {
+        finishCheck();
+      } else if (--attempts != 0) {
+        sendCaptcha();
+      } else {
+        statistics.addBlockedBots();
+        connection.closeWith(packets.getCaptchaFailed());
+      }
+    }
+    return true;
+  }
+
+  @Override
+  public boolean handle(PluginMessage packet) {
+    if (PluginMessageUtil.isMcBrand(packet) && !checkedByBrand) {
+      logger.info("{} has client brand {}", player,
+          PluginMessageUtil.readBrandMessage(packet.content()));
+      checkedByBrand = true;
+    }
+    return true;
+  }
+
+  @Override
+  public boolean handle(ClientSettings packet) {
+    if ((!checkedBySettings) && Settings.IMP.ANTIBOT.CHECK_CLIENT_SETTINGS) {
+      if (packet.toString().contains("null")) {
+        logger.error("{} -> " + packet, player);
+        player.disconnect(
+            LegacyComponentSerializer
+                .legacyAmpersand()
+                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK.CLIENT_CHECK_SETTINGS));
+        logger.error("{} has null in settings packet", player);
+        statistics.addBlockedConnection();
+        statistics.addBlockedBots();
+      } else if (!packet.isChatColors()) {
+        logger.error("{} -> " + packet, player);
+        player.disconnect(
+            LegacyComponentSerializer
+                .legacyAmpersand()
+                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK.CLIENT_CHECK_SETTINGS_CHAT_COLOR));
+        logger.error("{} doesn't send isChatColors packet",
+            player);
+        statistics.addBlockedConnection();
+        statistics.addBlockedBots();
+      } else if (packet.getSkinParts() == 0) {
+        logger.error("{} -> " + packet, player);
+        player.disconnect(
+            LegacyComponentSerializer
+                .legacyAmpersand()
+                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK.CLIENT_CHECK_SETTINGS_SKIN_PARTS));
+        logger.error("{} doesn't send skin parts packet",
+            player);
+        statistics.addBlockedConnection();
+        statistics.addBlockedBots();
+      }
+    }
+    checkedBySettings = true;
+    return true;
+  }
+
+  @Override
+  public void handleUnknown(ByteBuf packet) {
+    if (packet.readableBytes() > 2048) {
+      statistics.addBlockedBots();
+      connection.closeWith(packets.getTooBigPacket());
+    }
+  }
+
+  private void finishCheck() {
+    if (System.currentTimeMillis() - joinTime < TOTAL_TIME && state != CheckState.ONLY_CAPTCHA) {
+      if (state == CheckState.CAPTCHA_POSITION && ticks < TOTAL_TICKS) {
+        connection.write(packets.getResetSlot());
+        state = CheckState.ONLY_POSITION;
+      } else {
+        if (state == CheckState.CAPTCHA_ON_POSITION_FAILED) {
+          changeStateToCaptcha();
+        } else {
+          statistics.addBlockedBots();
+          connection.closeWith(packets.getFallingCheckFailed());
+        }
+      }
+      return;
+    }
+    kickIfCheckNotPassed();
+    state = CheckState.SUCCESSFULLY;
+    disconnected();
+    // connection.write(packets.getSuccessfulChat());
+    // ((LoginSessionHandler) originalHandler).authOrInitialize(player);
+    connection.closeWith(packets.getSuccessfulBotFilter());
+    virtualServer.getElytraProxy().cacheSucceedUser(player);
+  }
+
+  @Override
+  public void onMove() {
+    if (!startedListening && state != CheckState.ONLY_CAPTCHA) {
+      if (x == validX && z == validZ) {
+        startedListening = true;
+        connection.write(packets.getBotFilterBrand());
+      }
+      if (nonValidPacketsSize > Settings.IMP.ANTIBOT.NON_VALID_POSITION_XZ_ATTEMPTS) {
+        fallingCheckFailed();
+        return;
+      }
+      lastY = validY;
+      nonValidPacketsSize++;
+    }
+    if (startedListening) {
+      if (lastY == captchaY || onGround) {
+        return;
+      }
+      if (state == CheckState.ONLY_CAPTCHA) {
+        if (lastY != y && waitingTeleportId == -1) {
+          setCaptchaPosition(true);
+        }
+        return;
+      }
+      if (lastY - y == 0) {
+        ignoredTicks++;
+        return;
+      }
+      if (ticks >= TOTAL_TICKS) {
+        if (state == CheckState.CAPTCHA_POSITION) {
+          changeStateToCaptcha();
+        } else {
+          finishCheck();
+        }
+        return;
+      }
+      // System.out.println("lastY=" + lastY + "; y=" + y + "; diff=" + (lastY - y) + ";" +
+      //    " need=" + getLoadedChunkSpeed(ticks) + "; ticks=" + ticks +
+      //    "; x=" + x + "; z=" + z + "; vx=" + validX + "; vz=" + validZ);
+      if (ignoredTicks > Settings.IMP.ANTIBOT.NON_VALID_POSITION_Y_ATTEMPTS) {
+        fallingCheckFailed();
+        return;
+      }
+      if ((x != validX && z != validZ) || checkY()) {
+        fallingCheckFailed();
+        return;
+      }
+      if (state == CheckState.CAPTCHA_POSITION && waitingTeleportId == -1) {
+        setCaptchaPosition(false);
+      }
+      if ((state == CheckState.CAPTCHA_ON_POSITION_FAILED || state == CheckState.ONLY_POSITION)) {
+        SetExp expBuf = packets.getExperience().get(ticks);
+        if (expBuf != null) {
+          connection.write(expBuf);
+        }
+      }
+      ticks++;
+    }
+  }
+
+  @Override
+  public void onSpawn() {
+    ((LoginSessionHandler) originalHandler).completeLoginProtocol(player, false);
+    virtualServer.loginComplete(this);
+    if (state == BotFilterSessionHandler.CheckState.ONLY_CAPTCHA) {
+      sendCaptcha();
+      connection.write(packets.getCaptchaPosAndLook());
+      if (connection.getProtocolVersion().isAfterOrEq(ProtocolVersion.MINECRAFT_1_14)) {
+        connection.write(packets.getCaptchaView());
+      }
+      packets.getStaticWorldPacket().forEach(connection::write);
+    } else if (state == BotFilterSessionHandler.CheckState.CAPTCHA_POSITION) {
+      sendCaptcha();
+      sendFallingCheckPackets();
+    } else if (state == BotFilterSessionHandler.CheckState.ONLY_POSITION
+        || state == BotFilterSessionHandler.CheckState.CAPTCHA_ON_POSITION_FAILED) {
+      sendFallingCheckPackets();
+    }
+    connection.flush();
+  }
+
+  private void sendFallingCheckPackets() {
+    connection.write(fallingCheckPos);
+    if (connection.getProtocolVersion().isAfterOrEq(ProtocolVersion.MINECRAFT_1_14)) {
+      connection.write(fallingCheckView);
+    }
+    connection.write(fallingCheckChunk);
+  }
+
+  private void sendCaptcha() {
+    CaptchaHandler captchaHandler = CachedCaptcha.randomCaptcha();
+    String captchaAnswer = captchaHandler.getAnswer();
+    setCaptchaAnswer(captchaAnswer);
+    connection.write(packets.getSetSlot());
+    connection.write(captchaHandler.getMap());
+    connection.write(packets.getCheckingCaptchaChat());
+  }
+
+  private boolean checkY() {
+    double speed = getLoadedChunkSpeed(ticks);
+    return (Math.abs(lastY - y - speed) > Settings.IMP.ANTIBOT.MAX_VALID_POSITION_DIFFERENCE);
+  }
+
+  private void fallingCheckFailed() {
+    if (state == CheckState.CAPTCHA_ON_POSITION_FAILED) {
+      changeStateToCaptcha();
+      return;
+    }
+    statistics.addBlockedBots();
+    connection.closeWith(packets.getFallingCheckFailed());
+  }
+
+  private void setCaptchaPosition(boolean disableFall) {
+    connection.write(packets.getCaptchaPosAndLook());
+    if (connection.getProtocolVersion().isAfterOrEq(ProtocolVersion.MINECRAFT_1_14)) {
+      connection.write(packets.getCaptchaView());
+    }
+    packets.getStaticWorldPacket().forEach(connection::write);
+    if (disableFall) {
+      connection.write(packets.getNoAbilities());
+    }
+    connection.flush();
+    waitingTeleportId = 9876;
+  }
+
+  private void changeStateToCaptcha() {
+    state = CheckState.ONLY_CAPTCHA;
+    joinTime = System.currentTimeMillis() + 3500;
+    setCaptchaPosition(true);
+    if (captchaAnswer == null) {
+      sendCaptcha();
+    }
+  }
+
+  private void kickIfCheckNotPassed() {
+    if ((!checkedBySettings) && Settings.IMP.ANTIBOT.CHECK_CLIENT_SETTINGS) {
+      player.disconnect(
+          LegacyComponentSerializer
+              .legacyAmpersand()
+              .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK.CLIENT_CHECK_SETTINGS));
+      statistics.addBlockedConnection();
+      statistics.addBlockedBots();
+    }
+    if ((!checkedByBrand) && Settings.IMP.ANTIBOT.CHECK_CLIENT_BRAND) {
+      player.disconnect(
+          LegacyComponentSerializer
+              .legacyAmpersand()
+              .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK.CLIENT_CHECK_BRAND));
+      statistics.addBlockedConnection();
+      statistics.addBlockedBots();
+    }
+  }
+
+  @Override
+  public boolean equals(Object o) {
+    if (this == o) {
+      return true;
+    }
+    if (o == null || getClass() != o.getClass()) {
+      return false;
+    }
+    BotFilterSessionHandler that = (BotFilterSessionHandler) o;
+    return player.getUsername().equals(that.player.getUsername());
+  }
+
+  @Override
+  public int hashCode() {
+    return Objects.hash(player.getUsername());
+  }
+
+  public enum CheckState {
+    ONLY_POSITION,
+    ONLY_CAPTCHA,
+    CAPTCHA_POSITION,
+    CAPTCHA_ON_POSITION_FAILED,
+    SUCCESSFULLY,
+    FAILED
+  }
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/handler/FallingCheckHandler.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/handler/FallingCheckHandler.java
new file mode 100644
index 00000000..5de8e7b5
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/handler/FallingCheckHandler.java
@@ -0,0 +1,139 @@
+/*
+ * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
+ *
+ * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.botfilter.handler;
+
+import com.velocitypowered.api.network.ProtocolVersion;
+import com.velocitypowered.proxy.connection.MinecraftSessionHandler;
+import com.velocitypowered.proxy.connection.client.ConnectedPlayer;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
+import java.util.concurrent.ThreadLocalRandom;
+import net.elytrium.elytraproxy.config.Settings;
+import net.elytrium.elytraproxy.virtual.protocol.packet.Player;
+import net.elytrium.elytraproxy.virtual.protocol.packet.PlayerPosition;
+import net.elytrium.elytraproxy.virtual.protocol.packet.PlayerPositionAndLook;
+import net.elytrium.elytraproxy.virtual.protocol.packet.TeleportConfirm;
+import net.elytrium.elytraproxy.virtual.server.VirtualServer;
+import net.elytrium.elytraproxy.virtual.server.VirtualSessionHandler;
+
+@SuppressFBWarnings(value = "URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD",
+    justification = "ща пока teleportId не юзается но скорее всего потом заюзаем")
+public abstract class FallingCheckHandler extends VirtualSessionHandler {
+  private static final double[] loadedChunkSpeedCache = new double[Settings.IMP.ANTIBOT.FALLING_CHECK_TICKS];
+
+  static {
+    for (int i = 0; i < Settings.IMP.ANTIBOT.FALLING_CHECK_TICKS; ++i) {
+      loadedChunkSpeedCache[i] = -((Math.pow(0.98, i) - 1) * 3.92);
+    }
+  }
+
+  public double x;
+  public double y;
+  public double z;
+  public boolean onGround = false;
+
+  public int teleportId = -1;
+
+  public int waitingTeleportId = 9876;
+
+  public double lastY;
+  public int validX;
+  public int validY;
+  public int validZ;
+  public int ticks = 1;
+
+  public final ProtocolVersion version;
+
+  public FallingCheckHandler(
+      ProtocolVersion version, ConnectedPlayer player,
+      MinecraftSessionHandler sessionHandler, VirtualServer virtualServer) {
+    super(player, sessionHandler, virtualServer);
+    this.version = version;
+    validX = ThreadLocalRandom.current().nextInt(16384) + 256;
+    validY = ThreadLocalRandom.current().nextInt(256);
+    validZ = ThreadLocalRandom.current().nextInt(16384) + 256;
+
+    x = validX;
+    y = validY;
+    z = validZ;
+  }
+
+  @Override
+  public String toString() {
+    throw new UnsupportedOperationException("Not supported yet.");
+  }
+
+  @Override
+  public boolean handle(Player player) {
+    this.onGround = player.isOnGround();
+    return true;
+  }
+
+  @Override
+  public boolean handle(PlayerPosition pos) {
+    x = pos.getX();
+    lastY = y;
+    y = pos.getY();
+    z = pos.getZ();
+    onGround = pos.isOnGround();
+    onMove();
+    return true;
+  }
+
+
+  @Override
+  public boolean handle(PlayerPositionAndLook posRot) {
+    if (version.isBeforeOrEq(ProtocolVersion.MINECRAFT_1_8)
+        && posRot.getX() == validX && posRot.getY() == validY && posRot.getZ() == validZ
+        && waitingTeleportId == 9876) {
+      ticks = 0;
+      y = -1;
+      lastY = -1;
+      waitingTeleportId = -1;
+    }
+    x = posRot.getX();
+    lastY = y;
+    y = posRot.getY();
+    z = posRot.getZ();
+    onGround = posRot.isOnGround();
+    onMove();
+    return true;
+  }
+
+  @Override
+  public boolean handle(TeleportConfirm confirm) {
+    if (confirm.getTeleportId() == waitingTeleportId) {
+      ticks = 0;
+      y = -1;
+      lastY = -1;
+      waitingTeleportId = -1;
+    }
+    return true;
+  }
+
+  public abstract void onMove();
+
+  public static double getLoadedChunkSpeed(int ticks) {
+    if (ticks == -1) return 0;
+    return loadedChunkSpeedCache[ticks];
+  }
+
+  @Override
+  public abstract void onSpawn();
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/BotFilterProtocol.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/BotFilterProtocol.java
deleted file mode 100644
index 24d2a5ad..00000000
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/BotFilterProtocol.java
+++ /dev/null
@@ -1,91 +0,0 @@
-/*
- * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
- *
- * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package net.elytrium.elytraproxy.botfilter.protocol;
-
-import static com.velocitypowered.api.network.ProtocolVersion.MINECRAFT_1_13;
-import static com.velocitypowered.api.network.ProtocolVersion.MINECRAFT_1_14;
-import static com.velocitypowered.api.network.ProtocolVersion.MINECRAFT_1_15;
-import static com.velocitypowered.api.network.ProtocolVersion.MINECRAFT_1_16;
-import static com.velocitypowered.api.network.ProtocolVersion.MINECRAFT_1_16_2;
-import static com.velocitypowered.api.network.ProtocolVersion.MINECRAFT_1_17;
-import static com.velocitypowered.api.network.ProtocolVersion.MINECRAFT_1_7_2;
-import static com.velocitypowered.api.network.ProtocolVersion.MINECRAFT_1_9;
-import static com.velocitypowered.proxy.protocol.StateRegistry.map;
-
-import com.velocitypowered.api.network.ProtocolVersion;
-import com.velocitypowered.proxy.protocol.StateRegistry;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.JoinGame;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.PlayerPositionAndLook;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.world.ChunkData;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.world.UpdateLight;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.UpdateViewPosition;
-
-public class BotFilterProtocol {
-
-  public static void init() {
-    StateRegistry.BotFilter.clientbound.register(
-        JoinGame.class, JoinGame::new,
-        map(0x01, MINECRAFT_1_7_2, false),
-        map(0x23, MINECRAFT_1_9, false),
-        map(0x25, MINECRAFT_1_13, false),
-        map(0x25, MINECRAFT_1_14, false),
-        map(0x26, MINECRAFT_1_15, false),
-        map(0x25, MINECRAFT_1_16, false),
-        map(0x24, MINECRAFT_1_16_2, false),
-        map(0x26, MINECRAFT_1_17, false)
-    );
-    StateRegistry.BotFilter.clientbound.register(
-        PlayerPositionAndLook.class, PlayerPositionAndLook::new,
-        map(0x08, ProtocolVersion.MINECRAFT_1_7_2, true),
-        map(0x2E, ProtocolVersion.MINECRAFT_1_9, true),
-        map(0x2F, ProtocolVersion.MINECRAFT_1_12_1, true),
-        map(0x32, ProtocolVersion.MINECRAFT_1_13, true),
-        map(0x35, ProtocolVersion.MINECRAFT_1_14, true),
-        map(0x36, ProtocolVersion.MINECRAFT_1_15, true),
-        map(0x35, ProtocolVersion.MINECRAFT_1_16, true),
-        map(0x34, ProtocolVersion.MINECRAFT_1_16_2, true),
-        map(0x38, ProtocolVersion.MINECRAFT_1_17, true));
-
-    StateRegistry.BotFilter.clientbound.register(
-        ChunkData.class, ChunkData::new,
-        map(0x21, ProtocolVersion.MINECRAFT_1_7_2, true),
-        map(0x21, ProtocolVersion.MINECRAFT_1_8, true),
-        map(0x20, ProtocolVersion.MINECRAFT_1_9, true),
-        map(0x22, ProtocolVersion.MINECRAFT_1_13, true),
-        map(0x21, ProtocolVersion.MINECRAFT_1_14, true),
-        map(0x22, ProtocolVersion.MINECRAFT_1_15, true),
-        map(0x21, ProtocolVersion.MINECRAFT_1_16, true),
-        map(0x20, ProtocolVersion.MINECRAFT_1_16_2, true),
-        map(0x22, ProtocolVersion.MINECRAFT_1_17, true));
-
-    StateRegistry.BotFilter.clientbound.register(
-        UpdateLight.class, UpdateLight::new,
-        map(0x24, ProtocolVersion.MINECRAFT_1_14, true),
-        map(0x25, ProtocolVersion.MINECRAFT_1_15, true),
-        map(0x24, ProtocolVersion.MINECRAFT_1_16, true),
-        map(0x23, ProtocolVersion.MINECRAFT_1_16_2, true),
-        map(0x25, ProtocolVersion.MINECRAFT_1_17, true));
-
-    StateRegistry.BotFilter.clientbound.register(
-        UpdateViewPosition.class, UpdateViewPosition::new,
-        map(0x49, ProtocolVersion.MINECRAFT_1_17, true));
-
-  }
-}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/ByteBufCreator.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/ByteBufCreator.java
deleted file mode 100644
index eaddde7a..00000000
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/ByteBufCreator.java
+++ /dev/null
@@ -1,52 +0,0 @@
-/*
- * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
- *
- * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package net.elytrium.elytraproxy.botfilter.protocol.cache;
-
-import com.velocitypowered.natives.compression.VelocityCompressor;
-import com.velocitypowered.natives.util.BufferPreference;
-import com.velocitypowered.natives.util.Natives;
-import io.netty.buffer.ByteBuf;
-import io.netty.buffer.Unpooled;
-
-public class ByteBufCreator {
-
-  private static boolean directBuffers = false;
-
-  static {
-    VelocityCompressor compressor = Natives.compress.get().create(1);
-    if (compressor.preferredBufferType() == BufferPreference.DIRECT_PREFERRED
-        || compressor.preferredBufferType() == BufferPreference.DIRECT_REQUIRED) {
-      directBuffers = true;
-    }
-    compressor.close();
-  }
-
-  public static ByteBuf newBuffer() {
-    return directBuffers ? Unpooled.directBuffer() : Unpooled.buffer();
-  }
-
-  public static ByteBuf newBuffer(int length) {
-    return directBuffers ? Unpooled.directBuffer(length) : Unpooled.buffer(length);
-  }
-
-  public static boolean isDirectBufferPreferred() {
-    return directBuffers;
-  }
-}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/MultiplePreparedPackets.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/MultiplePreparedPackets.java
deleted file mode 100644
index 5c7a907c..00000000
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/MultiplePreparedPackets.java
+++ /dev/null
@@ -1,100 +0,0 @@
-/*
- * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
- *
- * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package net.elytrium.elytraproxy.botfilter.protocol.cache;
-
-import com.google.common.base.Preconditions;
-import com.velocitypowered.api.network.ProtocolVersion;
-import com.velocitypowered.proxy.connection.MinecraftConnection;
-import io.netty.buffer.ByteBuf;
-import java.util.EnumMap;
-import java.util.EnumSet;
-import java.util.HashSet;
-import java.util.Map;
-
-public class MultiplePreparedPackets {
-
-  private Map<ProtocolVersion, ByteBuf> multiplePayloadBuf = new EnumMap<ProtocolVersion, ByteBuf>(
-      ProtocolVersion.class);
-  private PreparedPacket[] onlineModePackets;
-
-  public MultiplePreparedPackets(PreparedPacket... preparedPackets) {
-    for (PreparedPacket packet : preparedPackets) {
-      Preconditions.checkState(packet.isFinished(), "PreparedPacket is not adapted");
-    }
-    onlineModePackets = preparedPackets;
-    createOfflineModePayload(preparedPackets);
-  }
-
-  private void createOfflineModePayload(PreparedPacket... preparedPackets) {
-    for (ProtocolVersion protocolVersion : EnumSet
-        .range(ProtocolVersion.MINIMUM_VERSION, ProtocolVersion.MAXIMUM_VERSION)) {
-      ByteBuf multiple = ByteBufCreator.newBuffer();
-      for (PreparedPacket preparedPacket : preparedPackets) {
-        ByteBuf buf = preparedPacket.getBuffer(protocolVersion);
-        if (buf == null) {
-          continue;
-        }
-        multiple.writeBytes(buf);
-        buf.release();
-      }
-
-      if (multiple.readableBytes() == 0) {
-        multiple.release();
-        continue;
-      }
-      //Deduplicate
-      for (ByteBuf byteBuf : multiplePayloadBuf.values()) {
-        if (byteBuf.equals(multiple)) {
-          multiple.release();
-          multiple = byteBuf;
-          break;
-        }
-      }
-      multiplePayloadBuf.put(protocolVersion, multiple);
-    }
-  }
-
-  public void write(MinecraftConnection connection, boolean onlineMode) {
-    if (onlineMode) {
-      for (PreparedPacket preparedPacket : onlineModePackets) {
-        preparedPacket.selfWrite(connection, false);
-      }
-    } else {
-      connection.delayedWrite(this);
-    }
-  }
-
-  public ByteBuf getBuffer(ProtocolVersion protocolVersion) {
-    return multiplePayloadBuf.get(protocolVersion).retainedSlice();
-  }
-
-  public int getBuffetLength(ProtocolVersion protocolVersion) {
-    return multiplePayloadBuf.get(protocolVersion).readableBytes();
-  }
-
-  public void release() {
-    for (PreparedPacket preparedPacket : onlineModePackets) {
-      preparedPacket.releaseBuffers();
-    }
-    for (ByteBuf byteBuf : new HashSet<>(multiplePayloadBuf.values())) {
-      byteBuf.release();
-    }
-  }
-}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/PacketCompressor.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/PacketCompressor.java
deleted file mode 100644
index 97590be3..00000000
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/PacketCompressor.java
+++ /dev/null
@@ -1,69 +0,0 @@
-/*
- * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
- *
- * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package net.elytrium.elytraproxy.botfilter.protocol.cache;
-
-import com.velocitypowered.natives.compression.VelocityCompressor;
-import com.velocitypowered.natives.util.Natives;
-import com.velocitypowered.proxy.config.VelocityConfiguration;
-import com.velocitypowered.proxy.protocol.ProtocolUtils;
-import io.netty.buffer.ByteBuf;
-import io.netty.buffer.Unpooled;
-import java.util.function.Supplier;
-
-public class PacketCompressor {
-
-  private final ThreadLocal<VelocityCompressor> compressors = ThreadLocal
-      .withInitial(() -> Natives.compress.get().create(12));
-  private final Supplier<VelocityConfiguration> velocityConfiguration;
-
-  /**
-   * Constructs VelocityPacketCompressor.
-   *
-   * @param velocityConfiguration configuration
-   */
-  public PacketCompressor(Supplier<VelocityConfiguration> velocityConfiguration) {
-    this.velocityConfiguration = velocityConfiguration;
-
-  }
-
-  public boolean isCompressionEnabled() {
-    return velocityConfiguration.get().getCompressionThreshold() >= 0;
-  }
-
-  public boolean shouldCompress(int i) {
-    return isCompressionEnabled() && i >= velocityConfiguration.get().getCompressionThreshold();
-  }
-
-  public ByteBuf compress(ByteBuf source) {
-    VelocityCompressor compressor = compressors.get();
-    ByteBuf destination =
-        ByteBufCreator.isDirectBufferPreferred() ? Unpooled.directBuffer() : Unpooled.buffer();
-    int uncompressed = source.readableBytes();
-    ProtocolUtils.writeVarInt(destination, uncompressed);
-    try {
-      compressor.deflate(source, destination);
-    } catch (Exception e) {
-      throw new RuntimeException(e);
-    } finally {
-      source.release();
-    }
-    return destination;
-  }
-}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/PreparedPacket.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/PreparedPacket.java
deleted file mode 100644
index 9d2e722d..00000000
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/PreparedPacket.java
+++ /dev/null
@@ -1,217 +0,0 @@
-/*
- * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
- *
- * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package net.elytrium.elytraproxy.botfilter.protocol.cache;
-
-import com.velocitypowered.api.network.ProtocolVersion;
-import com.velocitypowered.proxy.connection.MinecraftConnection;
-import com.velocitypowered.proxy.protocol.MinecraftPacket;
-import com.velocitypowered.proxy.protocol.ProtocolUtils;
-import com.velocitypowered.proxy.protocol.ProtocolUtils.Direction;
-import com.velocitypowered.proxy.protocol.StateRegistry;
-import io.netty.buffer.ByteBuf;
-import io.netty.util.ReferenceCountUtil;
-import java.util.EnumMap;
-import java.util.EnumSet;
-import java.util.HashSet;
-import java.util.Map;
-import java.util.Map.Entry;
-import net.elytrium.elytraproxy.botfilter.protocol.BotFilterProtocol;
-
-public class PreparedPacket<T extends MinecraftPacket> {
-
-  static {
-    BotFilterProtocol.init();
-  }
-
-  private final Map<ProtocolVersion, ByteBufHolder> packets =
-      new EnumMap<>(ProtocolVersion.class);
-  private boolean finished = false;
-
-  public PreparedPacket() {
-  }
-
-  public void prepareSinge(T packet, ProtocolVersion version) {
-    prepare(packet, version, version);
-  }
-
-  public void prepareSinge(T packet, ProtocolVersion version, StateRegistry protocol) {
-    prepare(packet, version, version, protocol);
-  }
-
-  public void prepare(T packet) {
-    prepare(packet, ProtocolVersion.MINIMUM_VERSION, ProtocolVersion.MAXIMUM_VERSION);
-  }
-
-  public void prepare(T packet, ProtocolVersion from) {
-    prepare(packet, from, ProtocolVersion.MAXIMUM_VERSION);
-  }
-
-  public void prepare(T packet, ProtocolVersion from, StateRegistry protocol) {
-    prepare(packet, from, ProtocolVersion.MAXIMUM_VERSION, protocol);
-  }
-
-  public void prepare(T packet, ProtocolVersion from, ProtocolVersion to) {
-    prepare(packet, from, to, StateRegistry.BotFilter);
-  }
-
-  public void prepare(T packet, ProtocolVersion from, ProtocolVersion to, StateRegistry protocol) {
-    for (ProtocolVersion protocolVersion : EnumSet.range(from, to)) {
-      ByteBuf buf = encodePacket(packet, protocolVersion, protocol);
-      ByteBufHolder holder = getHolder(buf, protocolVersion);
-      packets.put(protocolVersion, holder);
-    }
-  }
-
-  /*
-  public void preparePacketAndCopy(T packet, ProtocolVersion start, ProtocolVersion end,
-      StateRegistry protocol) {
-    ByteBuf buf = encodePacket(packet, start, protocol);
-    ByteBufHolder holder = new ByteBufHolder(start.isBefore(ProtocolVersion.MINECRAFT_1_8), buf);
-    for (ProtocolVersion protocolVersion : EnumSet.range(start, end)) {
-      prepared.put(protocolVersion, holder);
-    }
-  }
-  */
-
-  private ByteBuf encodePacket(T packet, ProtocolVersion version, StateRegistry protocol) {
-    int id = getPacketId(packet, version, protocol);
-    ByteBuf byteBuf = ByteBufCreator.newBuffer();
-    ProtocolUtils.writeVarInt(byteBuf, id);
-    packet.encode(byteBuf, Direction.CLIENTBOUND, version);
-    return byteBuf;
-  }
-
-  private int getPacketId(T packet, ProtocolVersion version, StateRegistry protocol) {
-    try {
-      return protocol.clientbound.getProtocolRegistry(version).getPacketId(packet.getClass());
-    } catch (Exception e) {
-      return protocol.clientbound.getProtocolRegistry(version).getPacketId(
-          (Class<? extends MinecraftPacket>) packet.getClass().getSuperclass());
-    }
-  }
-
-  public ByteBuf getBuffer(ProtocolVersion version) {
-    ByteBufHolder holder = packets.get(version);
-    return holder == null ? null : holder.byteBuf.retainedSlice();
-  }
-
-  public int getBufferLength(ProtocolVersion version) {
-    ByteBufHolder holder = packets.get(version);
-    return holder == null ? 0 : holder.byteBuf.readableBytes();
-  }
-
-  public void selfWrite(MinecraftConnection mc, boolean flush) {
-    if (packets.containsKey(mc.getProtocolVersion())) {
-      if (flush) {
-        mc.write(this);
-      } else {
-        mc.delayedWrite(this);
-      }
-    }
-  }
-
-  public boolean isFinished() {
-    return finished;
-  }
-
-  private ByteBufHolder getHolder(ByteBuf buf, ProtocolVersion version) {
-    if (version.isBefore(ProtocolVersion.MINECRAFT_1_8)) {
-      ByteBufHolder holder = packets.get(ProtocolVersion.MINECRAFT_1_7_2);
-      if (holder != null && holder.byteBuf.equals(buf)) {
-        buf.release();
-        return holder;
-      }
-      return new ByteBufHolder(true, buf);
-    }
-
-    for (ByteBufHolder holder : new HashSet<>(packets.values())) {
-      if (!holder.mc1_7 && holder.byteBuf.equals(buf)) {
-        buf.release();
-        return holder;
-      }
-    }
-    return new ByteBufHolder(false, buf);
-  }
-
-  public void processCompress(PacketCompressor packetCompressor) {
-    if (finished) {
-      throw new IllegalStateException("Packet compression does not allowed after adapt");
-    }
-    for (Entry<ProtocolVersion, ByteBufHolder> prepared : packets.entrySet()) {
-      ByteBufHolder holder = prepared.getValue();
-      if (holder.mc1_7 || holder.compressed) {
-        continue;
-      }
-      ByteBuf current = holder.byteBuf;
-      ByteBuf newBuf;
-      int bytes = current.readableBytes();
-      holder.compressed = true;
-      if (packetCompressor.shouldCompress(bytes)) {
-        newBuf = packetCompressor.compress(current);
-      } else {
-        newBuf = ByteBufCreator.newBuffer(2 + current.readableBytes());
-        ProtocolUtils.writeVarInt(newBuf, 0);
-        newBuf.writeBytes(current);
-      }
-      newBuf.capacity(newBuf.readableBytes());
-      holder.byteBuf = newBuf;
-    }
-  }
-
-  public void finish() {
-    for (Entry<ProtocolVersion, ByteBufHolder> prepared : packets.entrySet()) {
-      ByteBufHolder holder = prepared.getValue();
-      if (holder.varint) {
-        continue;
-      }
-      ByteBuf current = holder.byteBuf;
-      ByteBuf buf = ByteBufCreator.newBuffer(5 + current.readableBytes());
-      ProtocolUtils.writeVarInt(buf, current.readableBytes());
-      buf.writeBytes(current);
-      buf.capacity(buf.readableBytes());
-      ReferenceCountUtil.safeRelease(current);
-      holder.byteBuf = buf;
-      holder.varint = true;
-    }
-    finished = true;
-  }
-
-  public void releaseBuffers() {
-    for (ByteBufHolder holder : new HashSet<>(packets.values())) {
-      holder.byteBuf.release();
-    }
-  }
-
-  private static class ByteBufHolder {
-
-    private final boolean mc1_7;
-    private ByteBuf byteBuf;
-    private boolean compressed = false;
-    private boolean varint = false;
-
-    public ByteBufHolder(boolean mc1_7, ByteBuf byteBuf) {
-      this.mc1_7 = mc1_7;
-      this.byteBuf = byteBuf;
-      if (mc1_7) {
-        compressed = true;
-      }
-    }
-  }
-}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/netty/MultiplePreparedPacketsEncoder.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/netty/MultiplePreparedPacketsEncoder.java
deleted file mode 100644
index dfd775ca..00000000
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/netty/MultiplePreparedPacketsEncoder.java
+++ /dev/null
@@ -1,70 +0,0 @@
-/*
- * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
- *
- * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package net.elytrium.elytraproxy.botfilter.protocol.cache.netty;
-
-import com.velocitypowered.api.network.ProtocolVersion;
-import io.netty.buffer.ByteBuf;
-import io.netty.channel.ChannelHandler.Sharable;
-import io.netty.channel.ChannelHandlerContext;
-import io.netty.handler.codec.MessageToMessageEncoder;
-import java.util.EnumMap;
-import java.util.List;
-import java.util.Map;
-import lombok.RequiredArgsConstructor;
-import net.elytrium.elytraproxy.botfilter.protocol.cache.MultiplePreparedPackets;
-
-@Sharable
-@RequiredArgsConstructor
-public class MultiplePreparedPacketsEncoder extends
-    MessageToMessageEncoder<MultiplePreparedPackets> {
-
-  private static Map<ProtocolVersion, MultiplePreparedPacketsEncoder> encoders = new EnumMap<>(
-      ProtocolVersion.class);
-
-  static {
-    for (ProtocolVersion version : ProtocolVersion.SUPPORTED_VERSIONS) {
-      encoders.put(version, new MultiplePreparedPacketsEncoder(version));
-    }
-  }
-
-  private final ProtocolVersion protocolVersion;
-
-  @Override
-  protected void encode(ChannelHandlerContext ctx, MultiplePreparedPackets msg, List<Object> out)
-      throws Exception {
-    System.out.println("Processing multiple encoder");
-    ByteBuf buf = msg.getBuffer(protocolVersion);
-    out.add(buf);
-  }
-
-  /*
-  @Override
-  protected ByteBuf allocateBuffer(ChannelHandlerContext ctx, MultiplePreparedPackets msg,
-      boolean preferDirect) throws Exception {
-    int length = msg.getBuffetLength(protocolVersion);
-    return ByteBufCreator.isDirectBufferPreferred() ? ctx.alloc().directBuffer(length)
-        : ctx.alloc().heapBuffer(length);
-  }
-  */
-
-  public static MultiplePreparedPacketsEncoder getEncoder(ProtocolVersion version) {
-    return encoders.get(version);
-  }
-}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/netty/PreparedPacketEncoder.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/netty/PreparedPacketEncoder.java
deleted file mode 100644
index da613aa7..00000000
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/netty/PreparedPacketEncoder.java
+++ /dev/null
@@ -1,75 +0,0 @@
-/*
- * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
- *
- * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package net.elytrium.elytraproxy.botfilter.protocol.cache.netty;
-
-import com.google.common.collect.HashBasedTable;
-import com.google.common.collect.Table;
-import com.velocitypowered.api.network.ProtocolVersion;
-import com.velocitypowered.natives.encryption.JavaVelocityCipher;
-import com.velocitypowered.natives.util.Natives;
-import io.netty.buffer.ByteBuf;
-import io.netty.channel.ChannelHandler.Sharable;
-import io.netty.channel.ChannelHandlerContext;
-import io.netty.handler.codec.MessageToMessageEncoder;
-import java.util.List;
-import lombok.RequiredArgsConstructor;
-import net.elytrium.elytraproxy.botfilter.protocol.cache.PreparedPacket;
-
-@Sharable
-@RequiredArgsConstructor
-public class PreparedPacketEncoder extends MessageToMessageEncoder<PreparedPacket> {
-
-  private static final boolean IS_JAVA_CIPHER = Natives.cipher.get() == JavaVelocityCipher.FACTORY;
-  private static Table<ProtocolVersion, Boolean, PreparedPacketEncoder> encoders = HashBasedTable
-      .create(ProtocolVersion.SUPPORTED_VERSIONS.size(), 2);
-
-  static {
-    for (ProtocolVersion version : ProtocolVersion.SUPPORTED_VERSIONS) {
-      encoders.put(version, true, new PreparedPacketEncoder(version, true));
-      encoders.put(version, false, new PreparedPacketEncoder(version, false));
-    }
-  }
-
-  private final ProtocolVersion protocolVersion;
-  private final boolean onlineMode;
-
-
-  @Override
-  protected void encode(ChannelHandlerContext ctx, PreparedPacket msg, List<Object> out)
-      throws Exception {
-    System.out.println("Processing prepared");
-    ByteBuf buf = msg.getBuffer(protocolVersion);
-    out.add(buf);
-  }
-
-  /*
-  @Override
-  protected ByteBuf allocateBuffer(ChannelHandlerContext ctx, PreparedPacket msg,
-      boolean preferDirect) throws Exception {
-    int length = msg.getBufferLength(protocolVersion);
-    boolean direct = onlineMode ? IS_JAVA_CIPHER : ByteBufCreator.isDirectBufferPreferred();
-    return direct ? ctx.alloc().directBuffer(length) : ctx.alloc().heapBuffer(length);
-  }
-  */
-
-  public static PreparedPacketEncoder getEncoder(ProtocolVersion version, boolean onlineMode) {
-    return encoders.get(version, onlineMode);
-  }
-}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/data/registry/Dimension.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/data/registry/Dimension.java
deleted file mode 100644
index c661943c..00000000
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/data/registry/Dimension.java
+++ /dev/null
@@ -1,95 +0,0 @@
-/*
- * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
- *
- * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package net.elytrium.elytraproxy.botfilter.protocol.data.registry;
-
-import com.velocitypowered.api.network.ProtocolVersion;
-import lombok.AllArgsConstructor;
-import lombok.Data;
-import lombok.NonNull;
-import net.kyori.adventure.nbt.CompoundBinaryTag;
-import net.kyori.adventure.nbt.CompoundBinaryTag.Builder;
-
-@AllArgsConstructor
-@Data
-public class Dimension {
-
-  public static final Dimension OVERWORLD = new Dimension("minecraft:overworld", 0, false, true,
-      0.0f, null, false, "minecraft:infiniburn_overworld",
-      false, true, true, "minecraft:overworld", true, 0, 256, 256, 1.0f, false, false);
-
-  @NonNull
-  private final String key;
-  private final int id;
-
-  private final boolean piglinSafe;
-  private final boolean natural;
-  private final float ambientLight;
-  private final Long fixedTime;
-  private final boolean shrunk;
-  @NonNull
-  private final String infiniburn;
-  private final boolean respawnAnchorWorks;
-  private final boolean hasSkylight;
-  private final boolean bedWorks;
-  @NonNull
-  private final String effects;
-  private final boolean hasRaids;
-  private final int minY;
-  private final int height;
-  private final int logicalHeight;
-  private final float coordinateScale;
-  private final boolean ultrawarm;
-  private final boolean hasCeiling;
-
-
-  public CompoundBinaryTag encodeAttributes(ProtocolVersion protocolVersion) {
-    Builder tag = CompoundBinaryTag.builder()
-        .putString("name", key)
-        .putBoolean("natural", natural)
-        .putBoolean("has_skylight", hasSkylight)
-        .putBoolean("has_ceiling", hasCeiling);
-    if (fixedTime != null) {
-      tag.putLong("fixed_time", fixedTime);
-    }
-
-    tag.putBoolean("shrunk", shrunk)
-        .putFloat("ambient_light", ambientLight)
-        .putBoolean("ultrawarm", ultrawarm)
-        .putBoolean("has_raids", hasRaids)
-        .putBoolean("respawn_anchor_works", respawnAnchorWorks)
-        .putBoolean("bed_works", bedWorks)
-        .putBoolean("piglin_safe", piglinSafe)
-        .putString("infiniburn", infiniburn)
-        .putInt("logical_height", logicalHeight);
-
-    if (protocolVersion.isAfterOrEq(ProtocolVersion.MINECRAFT_1_16_2)) {
-      tag.remove("name")
-          .remove("shrunk")
-          .putString("effects", effects)
-          .putFloat("coordinate_scale", coordinateScale);
-    }
-    if (protocolVersion.isAfterOrEq(ProtocolVersion.MINECRAFT_1_17)) {
-      tag.putInt("min_y", minY);
-      tag.putInt("height", height);
-    }
-
-    return tag.build();
-  }
-}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/data/registry/DimensionRegistry.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/data/registry/DimensionRegistry.java
deleted file mode 100644
index 6fa56c9e..00000000
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/data/registry/DimensionRegistry.java
+++ /dev/null
@@ -1,134 +0,0 @@
-/*
- * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
- *
- * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package net.elytrium.elytraproxy.botfilter.protocol.data.registry;
-
-import com.google.common.base.Preconditions;
-import com.velocitypowered.api.network.ProtocolVersion;
-import com.velocitypowered.proxy.connection.registry.DimensionInfo;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Map.Entry;
-import java.util.Set;
-import java.util.stream.Collectors;
-import net.kyori.adventure.nbt.BinaryTagTypes;
-import net.kyori.adventure.nbt.CompoundBinaryTag;
-import net.kyori.adventure.nbt.ListBinaryTag;
-
-public class DimensionRegistry {
-
-  private final Map<Dimension, List<Biome>> dimensions = new HashMap<>();
-  private Dimension activeDimension;
-  private DimensionInfo activeDimensionInfo;
-
-  public void addDimension(Dimension dimension, List<Biome> biomes) {
-    Preconditions.checkNotNull(dimension);
-    Preconditions.checkNotNull(biomes);
-    Preconditions.checkState(!biomes.isEmpty());
-    dimensions.put(dimension, biomes);
-  }
-
-  public void removeDimension(Dimension dimension) {
-    dimensions.remove(dimension);
-  }
-
-  public Dimension getDimension(int id) {
-    return dimensions.keySet().stream().filter(dim -> dim.getId() == id).findAny().orElse(null);
-  }
-
-  public Dimension getDimension(String key) {
-    return dimensions.keySet().stream().filter(dim -> key.equals(dim.getKey())).findAny()
-        .orElse(null);
-  }
-
-  public List<Biome> getBiomes(Dimension dimension) {
-    return dimensions.get(dimension);
-  }
-
-  public List<String> getWorldNames() {
-    return dimensions.keySet().stream().map(dim -> dim.getKey()).collect(Collectors.toList());
-  }
-
-  public Dimension getActiveDimension() {
-    return activeDimension;
-  }
-
-  public void setActiveDimension(Dimension activeDimension) {
-    Preconditions
-        .checkState(dimensions.containsKey(activeDimension), "Dimension does not registered");
-    this.activeDimension = activeDimension;
-  }
-
-  public DimensionInfo getActiveDimensionInfo() {
-    return activeDimensionInfo;
-  }
-
-  public void setActiveDimensionInfo(DimensionInfo activeDimensionInfo) {
-    Preconditions.checkState(activeDimension != null, "Active dimension does not set");
-    this.activeDimensionInfo = activeDimensionInfo;
-  }
-
-  public CompoundBinaryTag encode(ProtocolVersion protocolVersion) {
-    ListBinaryTag.Builder<CompoundBinaryTag> dimensionsBuilder = ListBinaryTag
-        .builder(BinaryTagTypes.COMPOUND);
-    for (Entry<Dimension, List<Biome>> dimensionEntry : dimensions.entrySet()) {
-      Dimension dimension = dimensionEntry.getKey();
-      CompoundBinaryTag attributes = dimension.encodeAttributes(protocolVersion);
-      if (protocolVersion.isBeforeOrEq(ProtocolVersion.MINECRAFT_1_16_1)) {
-        dimensionsBuilder.add(attributes);
-      } else {
-        CompoundBinaryTag dimensionData = CompoundBinaryTag.builder()
-            .putString("name", dimension.getKey())
-            .putInt("id", dimension.getId())
-            .put("element", attributes).build();
-        dimensionsBuilder.add(dimensionData);
-      }
-    }
-    if (protocolVersion.isBeforeOrEq(ProtocolVersion.MINECRAFT_1_16_1)) {
-      return CompoundBinaryTag.builder().put("dimension", dimensionsBuilder.build()).build();
-    } else {
-      CompoundBinaryTag encodedDimensions = CompoundBinaryTag.builder()
-          .putString("type", "minecraft:dimension_type")
-          .put("value", dimensionsBuilder.build())
-          .build();
-      return CompoundBinaryTag.builder()
-          .put("minecraft:dimension_type", encodedDimensions)
-          .put("minecraft:worldgen/biome", createBiomeRegistry(dimensions.values())).build();
-    }
-  }
-
-  private CompoundBinaryTag createBiomeRegistry(Collection<List<Biome>> allBiomes) {
-    Set<Biome> biomes = new HashSet<>();
-    for (List<Biome> biomeLise : allBiomes) {
-      biomes.addAll(biomeLise);
-    }
-
-    ListBinaryTag.Builder<CompoundBinaryTag> biomesBuilder = ListBinaryTag
-        .builder(BinaryTagTypes.COMPOUND);
-    for (Biome biome : biomes) {
-      biomesBuilder.add(biome.encodeBiome());
-    }
-    return CompoundBinaryTag.builder()
-        .putString("type", "minecraft:worldgen/biome")
-        .put("value", biomesBuilder.build()).build();
-  }
-}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/JoinGame.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/JoinGame.java
deleted file mode 100644
index ab8d3f63..00000000
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/JoinGame.java
+++ /dev/null
@@ -1,109 +0,0 @@
-/*
- * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
- *
- * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package net.elytrium.elytraproxy.botfilter.protocol.packet;
-
-import com.velocitypowered.api.network.ProtocolVersion;
-import com.velocitypowered.proxy.connection.registry.DimensionInfo;
-import com.velocitypowered.proxy.protocol.MinecraftPacket;
-import com.velocitypowered.proxy.protocol.ProtocolUtils;
-import io.netty.buffer.ByteBuf;
-import lombok.AllArgsConstructor;
-import lombok.Builder;
-import lombok.Data;
-import lombok.NoArgsConstructor;
-import net.elytrium.elytraproxy.botfilter.protocol.data.registry.DimensionRegistry;
-
-@Data
-@Builder
-@NoArgsConstructor
-@AllArgsConstructor
-public class JoinGame implements MinecraftPacket {
-
-  private int entityId;
-  private short gamemode;
-  private int dimension;
-  private long partialHashedSeed;
-  private short difficulty;
-  private boolean hardcore;
-  private int maxPlayers;
-  private String levelType;
-  private int viewDistance;
-  private boolean reducedDebugInfo;
-  private boolean showRespawnScreen;
-  private DimensionRegistry dimensionRegistry;
-  private short previousGamemode;
-
-  @Override
-  public void encode(ByteBuf buf, ProtocolUtils.Direction direction, ProtocolVersion version) {
-    buf.writeInt(entityId);
-    if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_16_2)) {
-      buf.writeBoolean(hardcore);
-      buf.writeByte(gamemode);
-    } else {
-      buf.writeByte(hardcore ? gamemode | 0x8 : gamemode);
-    }
-    DimensionInfo dimensionInfo = dimensionRegistry.getActiveDimensionInfo();
-    if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_16)) {
-      buf.writeByte(previousGamemode);
-      ProtocolUtils.writeStringArray(buf,
-          dimensionRegistry.getWorldNames().toArray(new String[0])); //worldNames
-      ProtocolUtils.writeCompoundTag(buf, dimensionRegistry.encode(version));
-      if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_16_2)) {
-        ProtocolUtils.writeCompoundTag(buf,
-            dimensionRegistry.getActiveDimension().encodeAttributes(version));
-        ProtocolUtils.writeString(buf, dimensionInfo.getRegistryIdentifier());
-      } else {
-        ProtocolUtils.writeString(buf, dimensionInfo.getRegistryIdentifier());
-        ProtocolUtils.writeString(buf, dimensionInfo.getLevelName());
-      }
-    } else if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_9_1)) {
-      buf.writeInt(dimension);
-    } else {
-      buf.writeByte(dimension);
-    }
-    if (version.isBeforeOrEq(ProtocolVersion.MINECRAFT_1_13_2)) {
-      buf.writeByte(difficulty);
-    }
-    if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_15)) {
-      buf.writeLong(partialHashedSeed);
-    }
-    if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_16_2)) {
-      ProtocolUtils.writeVarInt(buf, maxPlayers);
-    } else {
-      buf.writeByte(maxPlayers);
-    }
-    if (version.isBefore(ProtocolVersion.MINECRAFT_1_16)) {
-      ProtocolUtils.writeString(buf, levelType);
-    }
-    if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_14)) {
-      ProtocolUtils.writeVarInt(buf, viewDistance);
-    }
-    if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_8)) {
-      buf.writeBoolean(reducedDebugInfo);
-    }
-    if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_15)) {
-      buf.writeBoolean(showRespawnScreen);
-    }
-    if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_16)) {
-      buf.writeBoolean(dimensionInfo.isDebugType());
-      buf.writeBoolean(dimensionInfo.isFlat());
-    }
-  }
-}
\ No newline at end of file
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/world/UpdateLight.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/world/UpdateLight.java
deleted file mode 100644
index e0083dca..00000000
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/world/UpdateLight.java
+++ /dev/null
@@ -1,125 +0,0 @@
-/*
- * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
- *
- * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package net.elytrium.elytraproxy.botfilter.protocol.packet.world;
-
-import com.velocitypowered.api.network.ProtocolVersion;
-import com.velocitypowered.proxy.protocol.MinecraftPacket;
-import com.velocitypowered.proxy.protocol.ProtocolUtils;
-import com.velocitypowered.proxy.protocol.ProtocolUtils.Direction;
-import io.netty.buffer.ByteBuf;
-import java.util.BitSet;
-import net.elytrium.elytraproxy.botfilter.protocol.util.mcprotocollib.NibbleArray3d;
-import net.elytrium.elytraproxy.botfilter.server.world.chunk.ChunkSnapshot;
-import net.elytrium.elytraproxy.botfilter.server.world.chunk.LightSection;
-
-public class UpdateLight implements MinecraftPacket {
-
-  private final ChunkSnapshot chunk;
-  private final NibbleArray3d[] skyLight = new NibbleArray3d[18];
-  private final NibbleArray3d[] blockLight = new NibbleArray3d[18];
-  private int skyLightMask = 0;
-  private int blockLightMask = 0;
-  private int emptySkyLightMask = 0;
-  private int emptyBlockLightMask = 0;
-
-  private int skyLightArrayCount;
-  private int blockLightArrayCount;
-
-  public UpdateLight() {
-    chunk = null;
-  }
-
-  public UpdateLight(ChunkSnapshot chunkSnapshot) {
-    this.chunk = chunkSnapshot;
-    prepareLighting();
-  }
-
-  @Override
-  public void encode(ByteBuf buf, Direction direction, ProtocolVersion version) {
-    ProtocolUtils.writeVarInt(buf, chunk.getX());
-    ProtocolUtils.writeVarInt(buf, chunk.getZ());
-
-    if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_16)) {
-      buf.writeBoolean(true); //trust edges
-    }
-
-    if (version.isBefore(ProtocolVersion.MINECRAFT_1_17)) {
-      ProtocolUtils.writeVarInt(buf, skyLightMask);
-      ProtocolUtils.writeVarInt(buf, blockLightMask);
-      ProtocolUtils.writeVarInt(buf, emptySkyLightMask);
-      ProtocolUtils.writeVarInt(buf, emptyBlockLightMask);
-    } else {
-      write117Mask(buf, skyLightMask);
-      write117Mask(buf, blockLightMask);
-      write117Mask(buf, emptySkyLightMask);
-      write117Mask(buf, emptyBlockLightMask);
-    }
-
-    if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_17)) {
-      ProtocolUtils.writeVarInt(buf, skyLightArrayCount);
-    }
-    for (NibbleArray3d array3d : skyLight) {
-      if (array3d != null) {
-        ProtocolUtils.writeByteArray(buf, array3d.getData());
-      }
-    }
-    if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_17)) {
-      ProtocolUtils.writeVarInt(buf, blockLightArrayCount);
-    }
-    for (NibbleArray3d nibbleArray3d : blockLight) {
-      if (nibbleArray3d != null) {
-        ProtocolUtils.writeByteArray(buf, nibbleArray3d.getData());
-      }
-    }
-  }
-
-  private void prepareLighting() {
-
-    LightSection[] lightSections = chunk.getLight();
-
-    for (int i = 0; i < lightSections.length; i++) {
-      LightSection section = lightSections[i];
-      if (section.getSkyLight() == LightSection.NO_LIGHT) {
-        emptySkyLightMask |= 1 << i;
-      } else if (section.getSkyLight() != LightSection.ALL_LIGHT) {
-        skyLightMask |= 1 << i;
-        skyLight[i] = section.getSkyLight();
-        skyLightArrayCount++;
-      }
-
-      if (section.getBlockLight() != LightSection.NO_LIGHT) {
-        blockLightMask |= 1 << i;
-        blockLight[i] = section.getBlockLight();
-        blockLightArrayCount++;
-      } else {
-        emptyBlockLightMask |= 1 << i;
-      }
-    }
-  }
-
-  private static void write117Mask(ByteBuf buf, int mask) {
-    BitSet bitSet = BitSet.valueOf(new long[]{mask});
-    long[] mk = bitSet.toLongArray();
-    ProtocolUtils.writeVarInt(buf, mk.length);
-    for (long m : mk) {
-      buf.writeLong(m);
-    }
-  }
-}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/BotFilterSessionHandler.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/BotFilterSessionHandler.java
deleted file mode 100644
index 97223ada..00000000
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/BotFilterSessionHandler.java
+++ /dev/null
@@ -1,68 +0,0 @@
-/*
- * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
- *
- * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package net.elytrium.elytraproxy.botfilter.server;
-
-import com.velocitypowered.proxy.connection.MinecraftSessionHandler;
-import com.velocitypowered.proxy.connection.client.ConnectedPlayer;
-import com.velocitypowered.proxy.connection.client.LoginSessionHandler;
-import java.util.Objects;
-import lombok.Data;
-
-@Data
-public class BotFilterSessionHandler implements MinecraftSessionHandler {
-
-  private final ConnectedPlayer player;
-  private final LoginSessionHandler originalHandler;
-  private final VirtualServer virtualServer;
-
-  @Override
-  public void disconnected() {
-    virtualServer.disconnected(this);
-  }
-
-  @Override
-  public void deactivated() {
-    virtualServer.disconnected(this);
-  }
-
-  private void finishCheck() {
-    player.getConnection().setSessionHandler(originalHandler);
-    originalHandler.initialize(player);
-    //fakeServer.getBotFilter().restoreOriginalHandlers(user);
-    //afterCheck.run();
-  }
-
-  @Override
-  public boolean equals(Object o) {
-    if (this == o) {
-      return true;
-    }
-    if (o == null || getClass() != o.getClass()) {
-      return false;
-    }
-    BotFilterSessionHandler that = (BotFilterSessionHandler) o;
-    return player.getUsername().equals(that.player.getUsername());
-  }
-
-  @Override
-  public int hashCode() {
-    return Objects.hash(player.getUsername());
-  }
-}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/ServerPackets.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/ServerPackets.java
deleted file mode 100644
index 6919e5e1..00000000
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/ServerPackets.java
+++ /dev/null
@@ -1,198 +0,0 @@
-/*
- * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
- *
- * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package net.elytrium.elytraproxy.botfilter.server;
-
-import com.google.common.collect.ImmutableList;
-import com.velocitypowered.api.network.ProtocolVersion;
-import com.velocitypowered.proxy.connection.registry.DimensionInfo;
-import com.velocitypowered.proxy.protocol.StateRegistry;
-import com.velocitypowered.proxy.protocol.packet.Disconnect;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-import lombok.Getter;
-import net.elytrium.elytraproxy.botfilter.protocol.cache.MultiplePreparedPackets;
-import net.elytrium.elytraproxy.botfilter.protocol.cache.PacketCompressor;
-import net.elytrium.elytraproxy.botfilter.protocol.cache.PreparedPacket;
-import net.elytrium.elytraproxy.botfilter.protocol.data.registry.Biome;
-import net.elytrium.elytraproxy.botfilter.protocol.data.registry.Dimension;
-import net.elytrium.elytraproxy.botfilter.protocol.data.registry.DimensionRegistry;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.JoinGame;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.PlayerPositionAndLook;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.UpdateViewPosition;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.world.ChunkData;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.world.UpdateLight;
-import net.elytrium.elytraproxy.botfilter.server.world.VirtualWorld;
-import net.elytrium.elytraproxy.botfilter.server.world.chunk.SimpleChunk;
-import net.kyori.adventure.text.Component;
-import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
-
-@Getter
-public class ServerPackets {
-
-  private final PacketCompressor packetCompressor;
-  private final VirtualServer virtualServer;
-  private VirtualWorld virtualWorld;
-  //JoinGame + Chunks + Light + PlayerPosAndLook
-  private MultiplePreparedPackets spawnPackets;
-  private PreparedPacket<Disconnect> alreadyConnected;
-
-  public ServerPackets(PacketCompressor packetCompressor,
-      VirtualServer virtualServer) {
-    this.packetCompressor = packetCompressor;
-    this.virtualServer = virtualServer;
-  }
-
-  public void createPackets() {
-    releaseAll();
-    this.virtualWorld = new VirtualWorld(Dimension.OVERWORLD,
-        new DimensionInfo(Dimension.OVERWORLD.getKey(), Dimension.OVERWORLD.getKey(), true, false));
-    virtualWorld.setSkyLight(0, 60, 0,
-        (byte) 1); //1.7 workaround //TODO: Maybe broken with new light system realiztion
-
-    /*
-    for (int x = 0; x < 16; x++) {
-      for (int z = 0; z < 16; z++) {
-        virtualWorld.setBlock(x, 40, z, SimpleBlock.GRANITE);
-        virtualWorld.setBlock(x, 60, z, SimpleBlock.GRANITE);
-      }
-    }
-    for (int x = 1; x < 15; x++) {
-      for (int z = 1; z < 15; z++) {
-        if (x % 3 == 0 && z % 3 == 0) {
-          virtualWorld.setBlock(x, 40, z, SimpleBlock.BARRIER);
-          virtualWorld.setBlockLight(x, 41, z, (byte) 15);
-        }
-      }
-    }
-    for (int x = 0; x < 16; x++) {
-      for (int y = 40; y <= 60; y++) {
-        virtualWorld.setBlock(x, y, 0, SimpleBlock.GRANITE);
-        virtualWorld.setBlock(0, y, x, SimpleBlock.GRANITE);
-        virtualWorld.setBlock(x, y, 15, SimpleBlock.GRANITE);
-        virtualWorld.setBlock(15, y, x, SimpleBlock.GRANITE);
-      }
-    }
-    */
-
-    List<PreparedPacket> preparedPackets = new ArrayList<>();
-    preparedPackets.add(createJoinGamePacket());
-    preparedPackets.addAll(createChunksPackets());
-    preparedPackets.addAll(createUpdateLightPackets());
-    preparedPackets.add(createPlayerPosAndLookPacket());
-    spawnPackets = new MultiplePreparedPackets(preparedPackets.toArray(new PreparedPacket[0]));
-    alreadyConnected = createDisconnectPacket("&cAlready connected", StateRegistry.LOGIN);
-    virtualWorld = null;
-  }
-
-  //TODO use Dimensions ids for < 1.16 version
-  private PreparedPacket<JoinGame> createJoinGamePacket() {
-    DimensionRegistry dimensionRegistry = new DimensionRegistry();
-    dimensionRegistry.addDimension(
-        Dimension.OVERWORLD, ImmutableList.of(Biome.PLAINTS, Biome.SWAMP, Biome.SWAMP_HILLS));
-    dimensionRegistry.setActiveDimension(Dimension.OVERWORLD);
-    dimensionRegistry.setActiveDimensionInfo(
-        new DimensionInfo("minecraft:overworld", "minecraft:overworld", false, false));
-    PreparedPacket<JoinGame> joinGame = new PreparedPacket<>();
-    joinGame.prepare(JoinGame.builder().entityId(0).gamemode((short) 1).dimension(0).
-        partialHashedSeed(1).difficulty((short) 0).maxPlayers(1).levelType("flat").viewDistance(4)
-        .reducedDebugInfo(false).showRespawnScreen(true).hardcore(false)
-        .dimensionRegistry(dimensionRegistry).build());
-
-    return processCompression(joinGame);
-  }
-
-  private PreparedPacket<PlayerPositionAndLook> createPlayerPosAndLookPacket() {
-    PreparedPacket<PlayerPositionAndLook> playerPosAndLook = new PreparedPacket<>();
-    playerPosAndLook.prepare(new PlayerPositionAndLook(6, 60, 6, 0f, 0f, -133, false, true));
-    return processCompression(playerPosAndLook);
-  }
-
-  private List<PreparedPacket<ChunkData>> createChunksPackets() {
-    List<PreparedPacket<ChunkData>> packets = new ArrayList<>();
-    for (SimpleChunk chunk : virtualWorld.getChunks()) {
-      packets.add(createChunkDataPacket(chunk));
-    }
-    return packets;
-  }
-
-  private PreparedPacket<ChunkData> createChunkDataPacket(SimpleChunk chunk) {
-    PreparedPacket<ChunkData> chunkPacket = new PreparedPacket<>();
-    chunkPacket.prepare(new ChunkData(chunk.getFullChunkSnapshot(),
-        chunk.getWorld().getDimension().isHasSkylight()));
-    return processCompression(chunkPacket);
-  }
-
-  private List<PreparedPacket<UpdateLight>> createUpdateLightPackets() {
-    List<PreparedPacket<UpdateLight>> packets = new ArrayList<>();
-    for (SimpleChunk chunk : virtualWorld.getChunks()) {
-      packets.add(createUpdateLightPacket(chunk));
-    }
-    return packets;
-  }
-
-  private PreparedPacket<UpdateLight> createUpdateLightPacket(SimpleChunk chunk) {
-    PreparedPacket<UpdateLight> lightPacket = new PreparedPacket<>();
-    lightPacket
-        .prepare(new UpdateLight(chunk.getFullChunkSnapshot()), ProtocolVersion.MINECRAFT_1_14);
-    return processCompression(lightPacket);
-  }
-
-  private PreparedPacket<UpdateViewPosition> createUpdateViewPositionPacket(SimpleChunk chunk) {
-    PreparedPacket<UpdateViewPosition> update = new PreparedPacket<>();
-    update.prepare(new UpdateViewPosition(chunk.getX(), chunk.getZ()),
-        ProtocolVersion.MINECRAFT_1_17);
-    return processCompression(update);
-  }
-
-  private PreparedPacket<Disconnect> createDisconnectPacket(String message,
-      StateRegistry protocol) {
-    Component component = LegacyComponentSerializer.legacyAmpersand().deserialize(message);
-    PreparedPacket<Disconnect> disconnect = new PreparedPacket<>();
-    disconnect.prepare(Disconnect.create(component, ProtocolVersion.MINECRAFT_1_7_2),
-        ProtocolVersion.MINECRAFT_1_7_2, ProtocolVersion.MINECRAFT_1_15_2, protocol);
-    disconnect.prepare(Disconnect.create(component, ProtocolVersion.MINECRAFT_1_16),
-        ProtocolVersion.MINECRAFT_1_16, protocol);
-    if (protocol == StateRegistry.LOGIN) {
-      disconnect.finish();
-      return disconnect;
-    }
-    return processCompression(disconnect);
-  }
-
-  private <T extends PreparedPacket<?>> T processCompression(T preparedPacket) {
-    if (packetCompressor.isCompressionEnabled()) {
-      preparedPacket.processCompress(packetCompressor);
-    }
-    preparedPacket.finish();
-    return preparedPacket;
-  }
-
-  public void releaseAll() {
-    for (PreparedPacket packet : Arrays.asList(alreadyConnected)) {
-      if (packet != null) {
-        packet.releaseBuffers();
-      }
-    }
-    if (spawnPackets != null) {
-      spawnPackets.release();
-    }
-  }
-}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/commands/AlertCommand.java b/proxy/src/main/java/net/elytrium/elytraproxy/commands/AlertCommand.java
index d1cbb572..f01a0c0e 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/commands/AlertCommand.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/commands/AlertCommand.java
@@ -44,26 +44,17 @@ public class AlertCommand implements SimpleCommand {
       source.sendMessage(
           LegacyComponentSerializer
               .legacyAmpersand()
-              .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.ALERT_MESSAGE_NEEDED
-                  .replace("{NL}", "\n")
-                  .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-              ));
+              .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.ALERT_MESSAGE_NEEDED));
     } else {
       String message = String.join(" ", args);
       Component component = LegacyComponentSerializer
           .legacyAmpersand()
-          .deserialize((Settings.IMP.MESSAGES.ELYTRAPROXY.ALERT_PREFIX + message)
-              .replace("{NL}", "\n")
-              .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-          );
+          .deserialize((Settings.IMP.MESSAGES.ELYTRAPROXY.ALERT_PREFIX + message));
       if (server.getAllPlayers().size() == 0) {
         source.sendMessage(
             LegacyComponentSerializer
                 .legacyAmpersand()
-                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.ALERT_SERVER_EMPTY
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                ));
+                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.ALERT_SERVER_EMPTY));
       } else if (server.getAllPlayers().size() >= 1) {
         if (!(source instanceof Player)) {
           source.sendMessage(component);
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/commands/ChangePasswordCommand.java b/proxy/src/main/java/net/elytrium/elytraproxy/commands/ChangePasswordCommand.java
new file mode 100644
index 00000000..8cf2cdab
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/commands/ChangePasswordCommand.java
@@ -0,0 +1,58 @@
+/*
+ * Copyright (C) 2021 Elytrium
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.commands;
+
+import com.google.common.collect.ImmutableMap;
+import com.velocitypowered.api.command.CommandSource;
+import com.velocitypowered.api.command.SimpleCommand;
+import com.velocitypowered.api.proxy.Player;
+import net.elytrium.elytraproxy.auth.handler.AuthSessionHandler;
+import net.elytrium.elytraproxy.config.Settings;
+import net.elytrium.elytraproxy.database.Database;
+import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
+
+public class ChangePasswordCommand implements SimpleCommand {
+
+  private final Database database;
+
+  public ChangePasswordCommand(Database database) {
+    this.database = database;
+  }
+
+  @Override
+  public void execute(final Invocation invocation) {
+    final CommandSource source = invocation.source();
+    final String[] args = invocation.arguments();
+
+    if (args.length != 1 || !(source instanceof Player)) {
+      source.sendMessage(
+          LegacyComponentSerializer
+              .legacyAmpersand()
+              .deserialize(Settings.IMP.AUTH.STRINGS.CHANGE_PASSWORD_USAGE));
+    } else {
+      database.updateMap(Settings.IMP.AUTH.TABLE,
+          ImmutableMap.of("nickname", ((Player) source).getUsername()),
+          ImmutableMap.of("hash", AuthSessionHandler.genHash(args[0])));
+    }
+  }
+
+  @Override
+  public boolean hasPermission(final Invocation invocation) {
+    return invocation.source().hasPermission("elytraproxy.auth.unregister");
+  }
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/commands/ElytraProxyCommand.java b/proxy/src/main/java/net/elytrium/elytraproxy/commands/ElytraProxyCommand.java
index 4a622823..bf1b46e3 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/commands/ElytraProxyCommand.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/commands/ElytraProxyCommand.java
@@ -75,22 +75,16 @@ public class ElytraProxyCommand implements SimpleCommand {
   }
 
   private void usage(CommandSource source) {
-    source.sendMessage(Identity.nil(), Component.text("§eThis server is using ElytraProxy"
-          + " that based on Velocity Proxy"));
-    source.sendMessage(Identity.nil(), Component.text("§eOriginal Velocity by astei"
-          + " and many-many contributors"));
-    source.sendMessage(Identity.nil(), Component.text("§eElytraProxy by Elytrium dev team"));
-    source.sendMessage(Identity.nil(), Component.text("§dMade With Love ❤"));
-    source.sendMessage(Identity.nil(), Component.text("§a"
-          + "https://github.com/Elytrium/ElytraProxy"));
+    source.sendMessage(Identity.nil(), Component.text("§eThis server is using ElytraProxy by Elytrium devs team"));
+    source.sendMessage(Identity.nil(), Component.text("§eOriginal Velocity by astei and many-many contributors"));
+    source.sendMessage(Identity.nil(), Component.text("§ahttps://github.com/Elytrium/ElytraProxy"));
     if (source.hasPermission("elytraproxy.command.reload")
         || source.hasPermission("elytraproxy.command.stats")
         || source.hasPermission("elytraproxy.command.commandspy")) {
       source.sendMessage(Identity.nil(), Component.text("§aCommands: "));
       source.sendMessage(Identity.nil(), Component.text("§6/elytraproxy reload §7-§f"
           + " reloads proxy server itself, without plugins"));
-      source.sendMessage(Identity.nil(), Component.text("§6/elytraproxy stats §7-§f"
-          + " enable action bar statistic"));
+      source.sendMessage(Identity.nil(), Component.text("§6/elytraproxy stats §7-§f enable action bar statistics"));
     }
   }
 
@@ -128,8 +122,7 @@ public class ElytraProxyCommand implements SimpleCommand {
 
     if (currentArgs.length == 1) {
       return commands.entrySet().stream()
-          .filter(e -> e.getKey().regionMatches(true, 0, currentArgs[0], 0,
-              currentArgs[0].length()))
+          .filter(e -> e.getKey().regionMatches(true, 0, currentArgs[0], 0, currentArgs[0].length()))
           .filter(e -> e.getValue().hasPermission(source, new String[0]))
           .map(Map.Entry::getKey)
           .collect(ImmutableList.toImmutableList());
@@ -176,31 +169,22 @@ public class ElytraProxyCommand implements SimpleCommand {
     public void execute(CommandSource source, String @NonNull [] args) {
       try {
         if (server.reloadConfiguration()) {
-          source.sendMessage(Identity.nil(),
+          source.sendMessage(
               LegacyComponentSerializer
                   .legacyAmpersand()
-                  .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.RELOAD_SUCCESS
-                      .replace("{NL}", "\n")
-                      .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                  ));
+                  .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.RELOAD_SUCCESS));
         } else {
-          source.sendMessage(Identity.nil(),
+          source.sendMessage(
               LegacyComponentSerializer
                   .legacyAmpersand()
-                  .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.RELOAD_FAILURE
-                      .replace("{NL}", "\n")
-                      .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                  ));
+                  .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.RELOAD_FAILURE));
         }
       } catch (Exception e) {
         logger.error("Unable to reload configuration", e);
-        source.sendMessage(Identity.nil(),
+        source.sendMessage(
             LegacyComponentSerializer
                 .legacyAmpersand()
-                .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.RELOAD_FAILURE
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                ));
+                .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.RELOAD_FAILURE));
       }
 
       elytraProxy.reload(source);
@@ -231,12 +215,11 @@ public class ElytraProxyCommand implements SimpleCommand {
                   LegacyComponentSerializer
                       .legacyAmpersand()
                       .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.STATS_FORMAT
-                          .replace("{NL}", "\n")
-                          .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
                           .replace("{0}", String.valueOf(statistics.getBlockedConnections()))
                           .replace("{1}", String.valueOf(statistics.getConnectionsPerSecond()))
                           .replace("{2}", String.valueOf(statistics.getPingsPerSecond()))
                           .replace("{3}", String.valueOf(statistics.getTotalConnectionsPerSecond()))
+                          .replace("{4}", String.valueOf(player.getPing()))
                       ));
             }
           } catch (Exception e) {
@@ -257,19 +240,13 @@ public class ElytraProxyCommand implements SimpleCommand {
         source.sendMessage(
             LegacyComponentSerializer
                 .legacyAmpersand()
-                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.STATS_DISABLED
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                ));
+                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.STATS_DISABLED));
         playersWithStats.remove(player);
       } else {
         source.sendMessage(
             LegacyComponentSerializer
                 .legacyAmpersand()
-                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.STATS_ENABLED
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                ));
+                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.STATS_ENABLED));
         playersWithStats.add(player);
       }
     }
@@ -282,10 +259,6 @@ public class ElytraProxyCommand implements SimpleCommand {
 
   private static class CommandSpy implements SubCommand {
 
-
-    private CommandSpy() {
-    }
-
     @Override
     public void execute(CommandSource source, String @NonNull [] args) {
       if (!(source instanceof Player)) {
@@ -297,19 +270,13 @@ public class ElytraProxyCommand implements SimpleCommand {
         source.sendMessage(
             LegacyComponentSerializer
                 .legacyAmpersand()
-                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.COMMAND_SPY_DISABLED
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                ));
+                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.COMMAND_SPY_DISABLED));
         playersWithSpy.remove(player);
       } else {
         source.sendMessage(
             LegacyComponentSerializer
                 .legacyAmpersand()
-                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.COMMAND_SPY_ENABLED
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                ));
+                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.COMMAND_SPY_ENABLED));
         playersWithSpy.add(player);
       }
     }
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/commands/FindCommand.java b/proxy/src/main/java/net/elytrium/elytraproxy/commands/FindCommand.java
index 0230c0d7..9d9acf7c 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/commands/FindCommand.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/commands/FindCommand.java
@@ -63,10 +63,7 @@ public class FindCommand implements SimpleCommand {
       source.sendMessage(
           LegacyComponentSerializer
               .legacyAmpersand()
-              .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.FIND_USERNAME_NEEDED
-                  .replace("{NL}", "\n")
-                  .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-              ));
+              .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.FIND_USERNAME_NEEDED));
     } else {
       Optional<Player> player = server.getPlayer(args[0]);
       if (player.isPresent()) {
@@ -76,8 +73,6 @@ public class FindCommand implements SimpleCommand {
             LegacyComponentSerializer
                 .legacyAmpersand()
                 .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.FIND_USER_ONLINE_AT
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
                     .replace("{0}", pl.getUsername())
                     .replace("{1}", srv.getServerInfo().getName())
                 )));
@@ -86,8 +81,6 @@ public class FindCommand implements SimpleCommand {
             LegacyComponentSerializer
                 .legacyAmpersand()
                 .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.USER_NOT_ONLINE
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
                     .replace("{0}", args[0])
                 ));
       }
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/commands/MessageCommand.java b/proxy/src/main/java/net/elytrium/elytraproxy/commands/MessageCommand.java
deleted file mode 100644
index c93d30cb..00000000
--- a/proxy/src/main/java/net/elytrium/elytraproxy/commands/MessageCommand.java
+++ /dev/null
@@ -1,122 +0,0 @@
-/*
- * Copyright (C) 2021 Elytrium
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package net.elytrium.elytraproxy.commands;
-
-import com.google.common.collect.ImmutableList;
-import com.velocitypowered.api.command.CommandSource;
-import com.velocitypowered.api.command.SimpleCommand;
-import com.velocitypowered.api.proxy.Player;
-import com.velocitypowered.api.proxy.ProxyServer;
-import com.velocitypowered.api.proxy.ServerConnection;
-import java.util.Arrays;
-import java.util.List;
-import java.util.Optional;
-import java.util.stream.Collectors;
-import net.elytrium.elytraproxy.config.Settings;
-import net.kyori.adventure.text.Component;
-import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
-
-public class MessageCommand implements SimpleCommand {
-
-  private final ProxyServer server;
-
-  public MessageCommand(ProxyServer server) {
-    this.server = server;
-  }
-
-  @Override
-  public List<String> suggest(final SimpleCommand.Invocation invocation) {
-    final CommandSource source = invocation.source();
-
-    if (source instanceof Player) {
-      Optional<ServerConnection> serverConnection = ((Player) source).getCurrentServer();
-      if (serverConnection.isPresent()) {
-        return serverConnection.get()
-            .getServer()
-            .getPlayersConnected()
-            .stream()
-            .map(Player::getUsername)
-            .collect(Collectors.toList());
-      }
-    }
-    return ImmutableList.of();
-  }
-
-  @Override
-  public void execute(final Invocation invocation) {
-    final CommandSource source = invocation.source();
-    final String[] args = invocation.arguments();
-
-    if (args.length == 0) {
-      source.sendMessage(
-          LegacyComponentSerializer
-              .legacyAmpersand()
-              .deserialize("&cУкажите имя игрока, которому вы хотите отправить сообщение"
-                  .replace("{NL}", "\n")
-                  .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-              ));
-      return;
-    }
-
-    if (args.length == 1) {
-      source.sendMessage(
-          LegacyComponentSerializer
-              .legacyAmpersand()
-              .deserialize("&cУкажите сообщение, которое вы хотите отправить игроку"
-                  .replace("{NL}", "\n")
-                  .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-              ));
-      return;
-    }
-
-    Optional<Player> playerOptional = server.getPlayer(args[0]);
-    if (playerOptional.isPresent()) {
-      Player player = playerOptional.get();
-      String message = String.join(" ", Arrays.copyOfRange(args, 1, args.length - 1));
-      String author = (source instanceof Player) ? ((Player) source).getUsername()
-          : Settings.IMP.MESSAGES.ELYTRAPROXY.IF_CONSOLE
-              .replace("{NL}", "\n")
-              .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX);
-
-      Component component = LegacyComponentSerializer
-          .legacyAmpersand()
-          .deserialize("&d&l[{0}->{1}] {2}"
-              .replace("{NL}", "\n")
-              .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-              .replace("{0}", author)
-              .replace("{1}", player.getUsername())
-              .replace("{2}", message)
-          );
-
-      player.sendMessage(component);
-    } else {
-      source.sendMessage(
-          LegacyComponentSerializer
-              .legacyAmpersand()
-              .deserialize("&cИгрок не найден, или находится не в сети"
-                  .replace("{NL}", "\n")
-                  .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-              ));
-    }
-  }
-
-  @Override
-  public boolean hasPermission(final SimpleCommand.Invocation invocation) {
-    return true;
-  }
-}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/commands/SendCommand.java b/proxy/src/main/java/net/elytrium/elytraproxy/commands/SendCommand.java
index b4480320..4103669d 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/commands/SendCommand.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/commands/SendCommand.java
@@ -77,10 +77,7 @@ public class SendCommand implements SimpleCommand {
       source.sendMessage(
           LegacyComponentSerializer
               .legacyAmpersand()
-              .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.SEND_NOT_ENOUGH_ARGUMENTS
-                  .replace("{NL}", "\n")
-                  .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-              ));
+              .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.SEND_NOT_ENOUGH_ARGUMENTS));
       return;
     }
 
@@ -90,16 +87,13 @@ public class SendCommand implements SimpleCommand {
       return;
     }
 
-    String sender = (source instanceof Player) ? ((Player) source).getUsername()
-        : Settings.IMP.MESSAGES.ELYTRAPROXY.IF_CONSOLE
-            .replace("{NL}", "\n")
-            .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX);
+    String sender = (source instanceof Player)
+        ? ((Player) source).getUsername()
+        : Settings.IMP.MESSAGES.ELYTRAPROXY.IF_CONSOLE;
 
     Component summoned = LegacyComponentSerializer
         .legacyAmpersand()
         .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.SEND_YOU_GOT_SUMMONED
-            .replace("{NL}", "\n")
-            .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
             .replace("{0}", target.getServerInfo().getName())
             .replace("{1}", sender)
         );
@@ -135,8 +129,6 @@ public class SendCommand implements SimpleCommand {
               LegacyComponentSerializer
                   .legacyAmpersand()
                   .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.USER_NOT_ONLINE
-                      .replace("{NL}", "\n")
-                      .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
                       .replace("{0}", args[0])
                   ));
         }
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/commands/UnregisterCommand.java b/proxy/src/main/java/net/elytrium/elytraproxy/commands/UnregisterCommand.java
new file mode 100644
index 00000000..0a831172
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/commands/UnregisterCommand.java
@@ -0,0 +1,54 @@
+/*
+ * Copyright (C) 2021 Elytrium
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.commands;
+
+import com.google.common.collect.ImmutableMap;
+import com.velocitypowered.api.command.CommandSource;
+import com.velocitypowered.api.command.SimpleCommand;
+import net.elytrium.elytraproxy.config.Settings;
+import net.elytrium.elytraproxy.database.Database;
+import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
+
+public class UnregisterCommand implements SimpleCommand {
+
+  private final Database database;
+
+  public UnregisterCommand(Database database) {
+    this.database = database;
+  }
+
+  @Override
+  public void execute(final Invocation invocation) {
+    final CommandSource source = invocation.source();
+    final String[] args = invocation.arguments();
+
+    if (args.length != 1) {
+      source.sendMessage(
+          LegacyComponentSerializer
+              .legacyAmpersand()
+              .deserialize(Settings.IMP.AUTH.STRINGS.UNREGISTER_USAGE));
+    } else {
+      database.deleteMap(Settings.IMP.AUTH.TABLE, ImmutableMap.of("nickname", args[0]));
+    }
+  }
+
+  @Override
+  public boolean hasPermission(final Invocation invocation) {
+    return invocation.source().hasPermission("elytraproxy.auth.unregister");
+  }
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/config/Config.java b/proxy/src/main/java/net/elytrium/elytraproxy/config/Config.java
index 9b5cedfd..871941bb 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/config/Config.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/config/Config.java
@@ -96,6 +96,10 @@ public class Config {
       if (value instanceof Configuration) {
         set((Configuration) value, newPath);
         continue;
+      } else if (value instanceof String) {
+        set(newPath, ((String) value).replace("{NL}", "\n")
+            .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX));
+        continue;
       }
       set(newPath, value);
     }
@@ -193,7 +197,7 @@ public class Config {
           save(lines, current, value, indent + 2);
         } else {
           lines.add(spacing + toNodeName(field.getName() + ": ")
-              + toYamlString(field.get(instance), spacing));
+              + toYamlString(field, field.get(instance), spacing));
         }
       }
     } catch (RuntimeException e) {
@@ -236,7 +240,10 @@ public class Config {
   public @interface Ignore {
   }
 
-  private String toYamlString(Object value, String spacing) {
+  private String toYamlString(Field field, Object value, String spacing) {
+    if (value == null) {
+      return "null";
+    }
     if (value instanceof List) {
       Collection<?> listValue = (Collection<?>) value;
       if (listValue.isEmpty()) {
@@ -245,7 +252,7 @@ public class Config {
       StringBuilder m = new StringBuilder();
       for (Object obj : listValue) {
         m.append(
-          System.lineSeparator()).append(spacing).append("- ").append(toYamlString(obj, spacing));
+            System.lineSeparator()).append(spacing).append("- ").append(toYamlString(field, obj, spacing));
       }
       return m.toString();
     }
@@ -254,9 +261,15 @@ public class Config {
       if (stringValue.isEmpty()) {
         return "''";
       }
-      return "\"" + stringValue + "\"";
+      String quoted = "\"" + stringValue + "\"";
+      //noinspection ConstantConditions | We don't need to replace when IMP is initalizing
+      if (Settings.IMP == null || field.getName().equalsIgnoreCase("prefix")) {
+        return quoted;
+      }
+      return quoted.replace("\n", "{NL}")
+          .replace(Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX, "{PRFX}");
     }
-    return value != null ? value.toString() : "null";
+    return value.toString();
   }
 
   /**
@@ -317,9 +330,7 @@ public class Config {
               instance = value;
               split = Arrays.copyOfRange(split, 1, split.length);
               continue;
-            } catch (NoSuchFieldException
-                    | NoSuchMethodException
-                    | InvocationTargetException ignore) {
+            } catch (NoSuchFieldException | NoSuchMethodException | InvocationTargetException ignore) {
               //
             }
             return null;
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/config/Settings.java b/proxy/src/main/java/net/elytrium/elytraproxy/config/Settings.java
index 2751d0bc..05a6d422 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/config/Settings.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/config/Settings.java
@@ -27,7 +27,7 @@ public class Settings extends Config {
   public static final Settings IMP = new Settings();
 
   @Final
-  public String VERSION = "0.1.2-DEV";
+  public String VERSION = "3.0.1";
 
   @Create
   public MESSAGES MESSAGES;
@@ -37,16 +37,13 @@ public class Settings extends Config {
     @Create
     public MESSAGES.ELYTRAPROXY ELYTRAPROXY;
 
-    @Create
-    public MESSAGES.VELOCITY VELOCITY;
-
     public static class ELYTRAPROXY {
       public String PREFIX = "&5&l[ElytraProxy]";
       public String ALERT_PREFIX = "&8[&4Alert&8]&f ";
       public String IF_CONSOLE = "CONSOLE";
       public String ALERT_MESSAGE_NEEDED = "{PRFX} &fYou must supply a message.";
       public String ALERT_SERVER_EMPTY = "{PRFX} &fServer is empty.";
-      public String STATS_FORMAT = "&c&lTotal Blocked: &6&l{0}&c&l | Connections Per Second: &6&l{1}&c&l | Pings Per Second: &6&l{2}&c&l | Total Connections Per Second: &6&l{3}";
+      public String STATS_FORMAT = "&c&lTotal Blocked: &6&l{0} &c&l| Connections Per Second: &6&l{1} &c&l| Pings Per Second: &6&l{2} &c&l| Total Connections Per Second: &6&l{3} &c&l| Ping: &6&l{4}";
       public String STATS_ENABLED = "{PRFX} &fNow you see statistics in your action bar.";
       public String STATS_DISABLED = "{PRFX} &fYou're no longer see statistics in your action bar.";
       public String FIND_USERNAME_NEEDED = "{PRFX} &fPlease follow this command by a user name.";
@@ -60,12 +57,13 @@ public class Settings extends Config {
       public String CONSOLE_LOG_COMMAND_EXECUTIONS_FORMAT = "{0} -> executed command {1}";
       public String RELOAD_SUCCESS = "{PRFX} &fElytraProxy configuration successfully reloaded.";
       public String RELOAD_FAILURE = "{PRFX} &cUnable to reload your ElytraProxy configuration. Check the console for more details.";
+      public String DB_FAILURE = "Unable to connect to database.";
 
       @Create
       public MESSAGES.ELYTRAPROXY.KICK KICK;
 
-      @Comment("Kick messages")
       public static class KICK {
+        @Comment("Kick messages")
         public String PROXY_SHUTTING_DOWN = "&cProxy shutting down.";
         public String PROTOCOL_BLOCKED = "&c1.7.x not supported";
         public String NICK_BLOCKED = "&cYour nickname contains forbidden phrases.";
@@ -74,20 +72,18 @@ public class Settings extends Config {
         public String CLIENT_CHECK_SETTINGS_SKIN_PARTS = "&cPlease enable any option from the skin customization to join the server.{NL}&eOptions > Skin Customization";
         public String CLIENT_CHECK_BRAND = "&cYour client doesn't send brand packets.";
       }
-      /*
-      public String MYSQL_LOAD_FAILED: "Ошибка при инициализации базы данных. Выключение..."
-      */
     }
 
-    @Comment({
-        "You may found other languages translations here: ",
-        "https://github.com/VelocityPowered/Velocity/tree/dev/2.0.0/proxy/src/main/resources/com/velocitypowered/proxy/l10n"
-    })
+    @Create
+    public MESSAGES.VELOCITY VELOCITY;
+
     public static class VELOCITY {
+      @Comment({
+          "You may found other languages translations here: ",
+          "https://github.com/VelocityPowered/Velocity/tree/dev/3.0.0/proxy/src/main/resources/com/velocitypowered/proxy/l10n"
+      })
       @Create
       public MESSAGES.VELOCITY.ERROR ERROR;
-      @Create
-      public MESSAGES.VELOCITY.COMMAND COMMAND;
 
       public static class ERROR {
         public String ALREADY_CONNECTED = "&cYou are already connected to this server!";
@@ -107,6 +103,9 @@ public class Settings extends Config {
         public String EXTREMELY_OLD_CLIENT = "&cYour client is extremely old. Please update to a newer version of Minecraft.";
       }
 
+      @Create
+      public MESSAGES.VELOCITY.COMMAND COMMAND;
+
       public static class COMMAND {
         public String GENERIC_ERROR = "{PRFX} &fAn error occurred while running this command.";
         public String COMMAND_DOES_NOT_EXIST = "{PRFX} &fThis command does not exist.";
@@ -147,22 +146,19 @@ public class Settings extends Config {
         "{ServerBrand} - returns the server on which the player is located",
         "{ProxyBrand} - returns the proxy original brand"
     })
-    public String BRAND = "{ServerBrand} => {ProxyBrand} (by ElytraDev)";
+    public String BRAND = "{ServerBrand} => {ProxyBrand} (by Elytrium)";
     @Comment("Changes server version in ping request")
-    public String PING_VERSION = "ElytraProxy (by ElytraDev)";
+    public String PING_VERSION = "ElytraProxy (by Elytrium)";
 
     @Create
     public MAIN_SETTINGS.HOSTNAMES_MANAGER HOSTNAMES_MANAGER;
 
-    @Create
-    public MAIN_SETTINGS.MAINTENANCE MAINTENANCE;
-
-    @Comment({
-        "Allows you to reject connection to the server for all domains except yours and direct ip",
-        "Most likely does not work with SRV records"
-    })
     public static class HOSTNAMES_MANAGER {
-      public boolean ENABLE = false;
+      @Comment({
+          "Allows you to reject connection to the server for all domains except yours and direct ip"
+      })
+      public boolean ENABLE_CHECK_ON_PING = false;
+      public boolean ENABLE_CHECK_ON_CONNECTION = false;
       @Comment("If whitelist enabled, all hostnames (domains and ips) in list WON'T BE BLOCKED, but other hostnames WILL BE BLOCKED")
       public boolean WHITELIST = true;
       public boolean DOMAINS_CHECK = false;
@@ -171,15 +167,19 @@ public class Settings extends Config {
       @Comment("IP's in this list will be ignored in check.")
       public List<String> IGNORED_IPS = Arrays.asList("127.0.0.1", "your-haproxy-ip");
     }
+
     @Comment("Players who are on these servers will not be counted in ping request and in the query request.")
     public List<String> IGNORE_ONLINE_AT = Arrays.asList("auth");
 
+    @Create
+    public MAIN_SETTINGS.MAINTENANCE MAINTENANCE;
+
     public static class MAINTENANCE {
       public boolean ENABLED = false;
       public String PING_VERSION = "Maintenance";
       public String MOTD = "&cMaintenance, please wait.";
       public String DISCONNECT_REASON = "&cSorry, but now server is not available due to maintenance";
-      public List<String> IGNORED_PLAYERS = Arrays.asList("4anonymous4");
+      public List<String> IGNORED_PLAYERS = Arrays.asList("mdxd44");
     }
   }
 
@@ -190,6 +190,16 @@ public class Settings extends Config {
     public boolean ENABLE = true;
     public boolean CHECK_CLIENT_SETTINGS = true;
     public boolean CHECK_CLIENT_BRAND = true;
+    public boolean CACHE_SUCCEED_USERS = true;
+    public int CAPTCHA_ATTEMPTS = 2;
+    public int NON_VALID_POSITION_XZ_ATTEMPTS = 10;
+    public int NON_VALID_POSITION_Y_ATTEMPTS = 10;
+    public int FALLING_CHECK_TICKS = 128;
+    public double MAX_VALID_POSITION_DIFFERENCE = 0.01;
+    public String BRAND = "ElytraProxy BotFilter";
+
+    @Comment("Available - ONLY_POSITION, ONLY_CAPTCHA, CAPTCHA_POSITION, CAPTCHA_ON_POSITION_FAILED, SUCCESSFULLY")
+    public String CHECK_STATE = "CAPTCHA_POSITION";
     @Comment({
         "If the player's nickname contains something from this list, hes connection will be rejected",
         "In lowercase"
@@ -197,16 +207,113 @@ public class Settings extends Config {
     public List<String> BANNED_NICK_PATTERNS = Arrays.asList(
         "dropbot", "mcspam", "mcdrop", "mcrage", "mcstorm", "extremebot", "cipher", "biboran"
     );
+
+    @Create
+    public ANTIBOT.CAPTCHA_GENERATOR CAPTCHA_GENERATOR;
+
+    public static class CAPTCHA_GENERATOR {
+      @Comment("Path to the background image to draw on captcha (any format, 128x128), none if empty")
+      public String BACKPLATE_PATH = "";
+      @Comment("Path to the font files to draw on captcha (ttf), can be empty")
+      public List<String> FONTS_PATH = List.of("");
+      @Comment("Use standard fonts(SANS_SERIF/SERIF/MONOSPACED), use false only if you provide fonts path")
+      public boolean USE_STANDARD_FONTS = true;
+      public int FONT_SIZE = 50;
+      public boolean FONT_OUTLINE = true;
+      public boolean FONT_ROTATE = true;
+      public boolean FONT_RIPPLE = true;
+      public boolean FONT_BLUR = true;
+      public String PATTERN = "abcdefghijklmnopqrtuvwxyz1234567890";
+      public int LENGTH = 3;
+    }
+
+    @Create
+    public ANTIBOT.BOTFILTER_DIMENSION BOTFILTER_DIMENSION;
+
+    public static class BOTFILTER_DIMENSION {
+      @Comment({
+          "Normal dimension - 0",
+          "Cave dimension - 1",
+          "Nether - 2",
+          "The end - 3",
+      })
+      public int ID = 3;
+      @Comment({
+          "Normal dimension - 0",
+          "The end - 1",
+          "Nether - 2"
+      })
+      public int LEGACY_ID = 1;
+      @Comment({
+          "Normal dimension - minecraft:overworld",
+          "Cave dimension - minecraft:overworld_caves",
+          "The end - minecraft:the_end",
+          "Nether - minecraft:nether"
+      })
+      public String MODERN_KEY = "minecraft:the_end";
+      public boolean HARDCORE_HEARTS = true;
+    }
+
+    @Create
+    public ANTIBOT.STRINGS STRINGS;
+
+    public static class STRINGS {
+      public String CHECKING = "{PRFX} Bot-Filter check was started, please wait..";
+      public String CHECKING_CAPTCHA = "{PRFX} Please, solve the captcha";
+      public String SUCCESSFUL = "{PRFX} Successfully passed Bot-Filter check. Please, rejoin the server";
+      public String CAPTCHA_FAILED = "{PRFX} You've mistaken in captcha check. Please, rejoin the server.";
+      public String TOO_BIG_PACKET = "{PRFX} Your client sent too big packet.";
+      public String FALLING_CHECK_FAILED = "{PRFX} Falling Check was failed. Please, rejoin the server.";
+    }
+
+    @Create
+    public ANTIBOT.CAPTCHA_COORDS CAPTCHA_COORDS;
+
+    public static class CAPTCHA_COORDS {
+      public int X = 0;
+      public int Y = 0;
+      public int Z = 0;
+    }
   }
 
-  /*
   @Create
   public AUTH AUTH;
 
   public static class AUTH {
     public boolean ENABLE = true;
-    public boolean ONLINE_MODE_REQUIRES_LOGIN = false;
+    public boolean ONLINE_MODE_NEED_AUTH = false;
+    public boolean CACHE_AUTH_USERS = true;
     public String TABLE = "auth";
+    public int BCRYPT_COST = 10;
+    public int LOGIN_ATTEMPTS = 3;
+    public int IP_LIMIT_REGISTRATIONS = 3;
+    @Comment("Time in milliseconds, when ip limit works")
+    public long IP_LIMIT_VALID_TIME = 21600000;
+    public String ALLOWED_NICKNAME_CHARS = "abcdefghijklmnopqrstuvwxyz_0123456789";
+
+    @Create
+    public AUTH.STRINGS STRINGS;
+
+    public static class STRINGS {
+      public String LOGIN = "{PRFX} Please, login using &a/l password";
+      public String PASSWORD_WRONG = "{PRFX} Password is wrong";
+      public String REGISTER = "{PRFX} Please, register using &a/reg password password";
+      public String NICKNAME_PREMIUM = "{PRFX} Your nickname is set on premium account. Please, change your nickname";
+      public String NICKNAME_INVALID = "{PRFX} Your nickname includes forbidden characters. Please, change your nickname";
+      public String IP_LIMIT = "{PRFX} Your IP has reached max registered accounts. If this is an error, restart your router, or wait about 6 hours";
+      public String SUCCESSFUL = "{PRFX} Registration completed successfully. Please rejoin";
+      public String UNREGISTER_USAGE = "{PRFX} Usage: /unregister <nickname>";
+      public String CHANGE_PASSWORD_USAGE = "{PRFX} Usage: /changepass <old password> <new password>";
+    }
+
+    @Create
+    public AUTH.AUTH_COORDS AUTH_COORDS;
+
+    public static class AUTH_COORDS {
+      public int X = 0;
+      public int Y = 0;
+      public int Z = 0;
+    }
   }
 
   @Create
@@ -214,16 +321,14 @@ public class Settings extends Config {
 
   @Comment("Database settings")
   public static class DATABASE {
-    //@Comment("Тип датабазы. mysql или mysql))")
-    //public String STORAGE_TYPE = "mysql";
-    @Comment("Settings for MYSQL")
-    public String HOSTNAME = "127.0.0.1";
-    public int PORT = 3306;
+    // @Comment("Тип базы данных, mysql или mysql))")
+    // public String STORAGE_TYPE = "mysql";
+    public boolean ENABLED = true;
+    public String HOSTNAME = "127.0.0.1:3306";
     public String USER = "user";
     public String PASSWORD = "password";
     public String DATABASE = "elytraproxy";
   }
-  */
 
   public void reload(File file) {
     load(file);
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/config/helpers/Configuration.java b/proxy/src/main/java/net/elytrium/elytraproxy/config/helpers/Configuration.java
index 00e952da..dff43f2b 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/config/helpers/Configuration.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/config/helpers/Configuration.java
@@ -63,8 +63,8 @@ public final class Configuration {
       String key = (entry.getKey() == null) ? "null" : entry.getKey().toString();
 
       if (entry.getValue() instanceof Map) {
-        this.self.put(key, new Configuration((Map) entry.getValue(),
-            (defaults == null) ? null : defaults.getSection(key)));
+        this.self
+            .put(key, new Configuration((Map) entry.getValue(), (defaults == null) ? null : defaults.getSection(key)));
       } else {
         this.self.put(key, entry.getValue());
       }
@@ -124,8 +124,7 @@ public final class Configuration {
 
   public void set(String path, Object value) {
     if (value instanceof Map) {
-      value = new Configuration((Map) value,
-          (defaults == null) ? null : defaults.getSection(path));
+      value = new Configuration((Map) value, (defaults == null) ? null : defaults.getSection(path));
     }
 
     Configuration section = getSectionFor(path);
@@ -143,9 +142,9 @@ public final class Configuration {
   /*------------------------------------------------------------------------*/
   public Configuration getSection(String path) {
     Object def = getDefault(path);
-    return (Configuration) get(path,
-        (def instanceof Configuration) ? def : new Configuration((
-            defaults == null) ? null : defaults.getSection(path)));
+    return (Configuration) get(path, (def instanceof Configuration)
+        ? def
+        : new Configuration((defaults == null) ? null : defaults.getSection(path)));
   }
 
   /**
@@ -338,6 +337,7 @@ public final class Configuration {
         result.add((Character) object);
       }
     }
+
     return result;
   }
 
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/config/helpers/ConfigurationProvider.java b/proxy/src/main/java/net/elytrium/elytraproxy/config/helpers/ConfigurationProvider.java
index f822dec9..34025952 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/config/helpers/ConfigurationProvider.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/config/helpers/ConfigurationProvider.java
@@ -43,8 +43,7 @@ import java.util.Map;
 
 public abstract class ConfigurationProvider {
 
-  private static final Map<Class<? extends ConfigurationProvider>,
-      ConfigurationProvider> providers = new HashMap<>();
+  private static final Map<Class<? extends ConfigurationProvider>, ConfigurationProvider> providers = new HashMap<>();
 
   static {
     try {
@@ -52,6 +51,12 @@ public abstract class ConfigurationProvider {
     } catch (NoClassDefFoundError ex) {
       // Ignore, no SnakeYAML
     }
+
+    try {
+      providers.put(JsonConfiguration.class, new JsonConfiguration());
+    } catch (NoClassDefFoundError ex) {
+      // Ignore, no Gson
+    }
   }
 
   public static ConfigurationProvider getProvider(Class<? extends ConfigurationProvider> provider) {
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/config/helpers/JsonConfiguration.java b/proxy/src/main/java/net/elytrium/elytraproxy/config/helpers/JsonConfiguration.java
new file mode 100644
index 00000000..90d42c71
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/config/helpers/JsonConfiguration.java
@@ -0,0 +1,131 @@
+/*
+ * This file is part of BungeeCord, licensed under the BSD License (BSD).
+ *
+ * Copyright (c) 2012 md_5
+ *
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ *     * Redistributions of source code must retain the above copyright notice,
+ *       this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright notice,
+ *       this list of conditions and the following disclaimer in the documentation
+ *       and/or other materials provided with the distribution.
+ *     * The name of the author may not be used to endorse or promote products derived
+ *       from this software without specific prior written permission.
+ *     * You may not use the software for commercial software hosting services without
+ *       written permission from the author.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package net.elytrium.elytraproxy.config.helpers;
+
+import com.google.common.base.Charsets;
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonSerializationContext;
+import com.google.gson.JsonSerializer;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.OutputStreamWriter;
+import java.io.Reader;
+import java.io.Writer;
+import java.lang.reflect.Type;
+import java.util.LinkedHashMap;
+import java.util.Map;
+import lombok.AccessLevel;
+import lombok.NoArgsConstructor;
+
+@NoArgsConstructor(access = AccessLevel.PACKAGE)
+public class JsonConfiguration extends ConfigurationProvider {
+
+  private final Gson json = new GsonBuilder().serializeNulls().setPrettyPrinting()
+      .registerTypeAdapter(Configuration.class, new JsonSerializer<Configuration>() {
+        @Override
+        public JsonElement serialize(Configuration src, Type typeOfSrc, JsonSerializationContext context) {
+          return context.serialize(((Configuration) src).self);
+        }
+      }).create();
+
+  @Override
+  public void save(Configuration config, File file) throws IOException {
+    try (Writer writer = new OutputStreamWriter(new FileOutputStream(file), Charsets.UTF_8)) {
+      save(config, writer);
+    }
+  }
+
+  @Override
+  public void save(Configuration config, Writer writer) {
+    json.toJson(config.self, writer);
+  }
+
+  @Override
+  public Configuration load(File file) throws IOException {
+    return load(file, null);
+  }
+
+  @Override
+  public Configuration load(File file, Configuration defaults) throws IOException {
+    try (FileInputStream is = new FileInputStream(file)) {
+      return load(is, defaults);
+    }
+  }
+
+  @Override
+  public Configuration load(Reader reader) {
+    return load(reader, null);
+  }
+
+  @Override
+  @SuppressWarnings("unchecked")
+  public Configuration load(Reader reader, Configuration defaults) {
+    Map<String, Object> map = json.fromJson(reader, LinkedHashMap.class);
+    if (map == null) {
+      map = new LinkedHashMap<>();
+    }
+    return new Configuration(map, defaults);
+  }
+
+  @Override
+  public Configuration load(InputStream is) {
+    return load(is, null);
+  }
+
+  @Override
+  public Configuration load(InputStream is, Configuration defaults) {
+    return load(new InputStreamReader(is, Charsets.UTF_8), defaults);
+  }
+
+  @Override
+  public Configuration load(String string) {
+    return load(string, null);
+  }
+
+  @Override
+  @SuppressWarnings("unchecked")
+  public Configuration load(String string, Configuration defaults) {
+    Map<String, Object> map = json.fromJson(string, LinkedHashMap.class);
+    if (map == null) {
+      map = new LinkedHashMap<>();
+    }
+    return new Configuration(map, defaults);
+  }
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/config/helpers/YamlConfiguration.java b/proxy/src/main/java/net/elytrium/elytraproxy/config/helpers/YamlConfiguration.java
index 5dad48c8..1bb31546 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/config/helpers/YamlConfiguration.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/config/helpers/YamlConfiguration.java
@@ -56,26 +56,23 @@ import org.yaml.snakeyaml.representer.Representer;
 @NoArgsConstructor(access = AccessLevel.PACKAGE)
 public class YamlConfiguration extends ConfigurationProvider {
 
-  private final ThreadLocal<Yaml> yaml = new ThreadLocal<Yaml>() {
-    @Override
-    protected Yaml initialValue() {
-      Representer representer = new Representer() {
-        {
-          representers.put(Configuration.class, new Represent() {
-            @Override
-            public Node representData(Object data) {
-              return represent(((Configuration) data).self);
-            }
-          });
-        }
-      };
-
-      DumperOptions options = new DumperOptions();
-      options.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);
-
-      return new Yaml(new Constructor(), representer, options);
-    }
-  };
+  private final ThreadLocal<Yaml> yaml = ThreadLocal.withInitial(() -> {
+    Representer representer = new Representer() {
+      {
+        representers.put(Configuration.class, new Represent() {
+          @Override
+          public Node representData(Object data) {
+            return represent(((Configuration) data).self);
+          }
+        });
+      }
+    };
+
+    DumperOptions options = new DumperOptions();
+    options.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);
+
+    return new Yaml(new Constructor(), representer, options);
+  });
 
   @Override
   public void save(Configuration config, File file) throws IOException {
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/database/Database.java b/proxy/src/main/java/net/elytrium/elytraproxy/database/Database.java
index 09325f56..a04b2e34 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/database/Database.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/database/Database.java
@@ -24,13 +24,17 @@ public abstract class Database {
 
   public abstract void query(String query);
 
+  public void makeTable(String table, DatabaseItem databaseItem) { // TODO: Auto make tables with @annotations
+    makeTable(table, databaseItem.getTableInfo(), databaseItem.getPrimaryKey());
+  }
+
   public abstract void makeTable(String table, Map<String, String> keys);
 
+  public abstract void makeTable(String table, Map<String, String> keys, String primaryKey);
+
   public abstract void insertMap(String table, Map<String, Object> toInsert, boolean update);
 
-  public abstract void updateMap(String table,
-                                 Map<String, Object> whereUpdate,
-                                 Map<String, Object> toUpdate);
+  public abstract void updateMap(String table, Map<String, Object> whereUpdate, Map<String, Object> toUpdate);
 
   public abstract void deleteMap(String table, Map<String, Object> whereDelete);
 
@@ -38,6 +42,8 @@ public abstract class Database {
 
   public abstract <T> T getItem(String table, Map<String, Object> where, Class<T> type);
 
+  public abstract <T> List<T> getItems(String table, Map<String, Object> where, Class<T> type);
+
   public abstract <T> List<T> getItems(String table, Class<T> type);
 
   public abstract <T> T queryResult(String query, Class<T> type);
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/database/DatabaseItem.java b/proxy/src/main/java/net/elytrium/elytraproxy/database/DatabaseItem.java
new file mode 100644
index 00000000..41e75f2c
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/database/DatabaseItem.java
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2021 Elytrium
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.database;
+
+import java.util.Map;
+import lombok.Getter;
+
+public class DatabaseItem {
+  @Getter private final Map<String, String> tableInfo;
+  @Getter private final String primaryKey;
+
+  public DatabaseItem(Map<String, String> tableInfo, String primaryKey) {
+    this.tableInfo = tableInfo;
+    this.primaryKey = primaryKey;
+  }
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/database/MySqlDatabase.java b/proxy/src/main/java/net/elytrium/elytraproxy/database/MySqlDatabase.java
index 1c705b50..e8844c94 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/database/MySqlDatabase.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/database/MySqlDatabase.java
@@ -38,16 +38,14 @@ public class MySqlDatabase extends Database {
 
   /**
    * Initializes and connects to MySQL Database.
-   * @param host Hostname to connect, with port
+   *
+   * @param host     Hostname to connect, with port
    * @param database Database name
-   * @param user Username
+   * @param user     Username
    * @param password Password of user
    * @throws SQLException Throws if connection was unsuccessful
    */
-  public MySqlDatabase(String host,
-                       String database,
-                       String user,
-                       String password) throws SQLException {
+  public MySqlDatabase(String host, String database, String user, String password) throws SQLException {
     String url = "jdbc:mysql://" + host + "/" + database
         + "?autoReconnect=true&cmaxReconnets=5&initialTimeout=1&useSSL=false";
 
@@ -67,39 +65,44 @@ public class MySqlDatabase extends Database {
     }
   }
 
+  @Override
+  public void makeTable(String table, Map<String, String> keys, String primaryKey) {
+    query("CREATE TABLE IF NOT EXISTS " + table + " ("
+        + joinStream(keys.entrySet().stream().map(e -> e.getKey() + " " + e.getValue()))
+        + ", PRIMARY KEY (" + primaryKey + "))");
+  }
+
   @Override
   public void makeTable(String table, Map<String, String> keys) {
     query("CREATE TABLE IF NOT EXISTS " + table + " ("
-        + keyFromStream(keys.entrySet().stream().map(e -> e.getKey() + " " + e.getValue())) + ")");
+        + joinStream(keys.entrySet().stream().map(e -> e.getKey() + " " + e.getValue())) + ")");
   }
 
   @Override
   public void insertMap(String table, Map<String, Object> toInsert, boolean update) {
-    String keyString = keyFromStream(toInsert.keySet().stream().map(s -> s));
+    String keyString = joinStream(toInsert.keySet().stream().map(s -> s));
     String valueString = keyFromStream(toInsert.values().stream());
 
-    String request = "INSERT INTO %s (%s) VALUES(%s)";
+    String request = "INSERT INTO " + table + " (" + keyString + ") VALUES(" + valueString + ")";
     if (update) {
       request += " ON DUPLICATE KEY UPDATE";
     }
 
-    query(String.format(request, table, keyString, valueString));
+    query(request);
   }
 
   @Override
-  public void updateMap(String table,
-                        Map<String, Object> whereUpdate,
-                        Map<String, Object> toUpdate) {
+  public void updateMap(String table, Map<String, Object> whereUpdate, Map<String, Object> toUpdate) {
     String where = entryFromStream(whereUpdate.entrySet().stream(), " AND ");
     String set = entryFromStream(toUpdate.entrySet().stream(), ", ");
 
-    query(String.format("UPDATE %s SET %s WHERE %s", table, set, where));
+    query("UPDATE " + table + " SET " + set + " WHERE " + where);
   }
 
   @Override
   public void deleteMap(String table, Map<String, Object> whereDelete) {
     String entryString = entryFromStream(whereDelete.entrySet().stream(), " AND ");
-    query(String.format("DELETE FROM %s WHERE %s", table, entryString));
+    query("DELETE FROM " + table + " WHERE " + entryString);
   }
 
   @Override
@@ -115,12 +118,18 @@ public class MySqlDatabase extends Database {
   @Override
   public <T> T getItem(String table, Map<String, Object> where, Class<T> type) {
     String entryString = entryFromStream(where.entrySet().stream(), " AND ");
-    return queryResult(String.format("SELECT * FROM %s WHERE %s", table, entryString), type);
+    return queryResult("SELECT * FROM " + table + " WHERE " + entryString, type);
   }
 
   @Override
   public <T> List<T> getItems(String table, Class<T> type) {
-    return queryResultList(String.format("SELECT * FROM %s", table), type);
+    return queryResultList("SELECT * FROM " + table, type);
+  }
+
+  @Override
+  public <T> List<T> getItems(String table, Map<String, Object> where, Class<T> type) {
+    String entryString = entryFromStream(where.entrySet().stream(), " AND ");
+    return queryResultList("SELECT * FROM " + table + " WHERE " + entryString, type);
   }
 
   @Override
@@ -171,11 +180,8 @@ public class MySqlDatabase extends Database {
   }
 
   private <T> Map<String, Object> serializeToMap(T from, Class<T> type)
-      throws NoSuchMethodException,
-      IllegalAccessException,
-      InvocationTargetException,
-      InstantiationException,
-      SQLException {
+      throws NoSuchMethodException, IllegalAccessException,
+      InvocationTargetException, InstantiationException, SQLException {
 
     Map<String, Object> map = new HashMap<>();
 
@@ -190,11 +196,8 @@ public class MySqlDatabase extends Database {
   }
 
   private <T> T serializeFromSet(ResultSet set, Class<T> type)
-      throws NoSuchMethodException,
-      IllegalAccessException,
-      InvocationTargetException,
-      InstantiationException,
-      SQLException {
+      throws NoSuchMethodException, IllegalAccessException,
+      InvocationTargetException, InstantiationException, SQLException {
 
     T result = type.getConstructor().newInstance();
 
@@ -208,15 +211,20 @@ public class MySqlDatabase extends Database {
     return result;
   }
 
-  private String keyFromStream(Stream<Object> stream) {
+  private String joinStream(Stream<Object> stream) {
     return stream
         .map(Object::toString)
         .collect(Collectors.joining(", "));
   }
 
+  private String keyFromStream(Stream<Object> stream) {
+    return joinStream(stream.map(e -> (e instanceof String) ? "\"" + e + "\"" : e));
+  }
+
   private String entryFromStream(Stream<Map.Entry<String, Object>> stream, String delimiter) {
     return stream
-        .map(entry -> entry.getKey() + " = " + entry.getValue())
+        .map(entry -> entry.getKey() + " = "
+            + ((entry.getValue() instanceof String) ? "\"" + entry.getValue() + "\"" : entry.getValue()))
         .collect(Collectors.joining(delimiter));
   }
 }
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/VirtualProtocol.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/VirtualProtocol.java
new file mode 100644
index 00000000..376a7f2d
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/VirtualProtocol.java
@@ -0,0 +1,182 @@
+/*
+ * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
+ *
+ * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.virtual.protocol;
+
+import static com.velocitypowered.proxy.protocol.StateRegistry.map;
+
+import com.velocitypowered.api.network.ProtocolVersion;
+import com.velocitypowered.proxy.protocol.StateRegistry;
+import com.velocitypowered.proxy.protocol.packet.Chat;
+import com.velocitypowered.proxy.protocol.packet.ClientSettings;
+import com.velocitypowered.proxy.protocol.packet.Disconnect;
+import com.velocitypowered.proxy.protocol.packet.JoinGame;
+import com.velocitypowered.proxy.protocol.packet.PluginMessage;
+import com.velocitypowered.proxy.protocol.packet.Respawn;
+import net.elytrium.elytraproxy.virtual.protocol.packet.MapDataPacket;
+import net.elytrium.elytraproxy.virtual.protocol.packet.Player;
+import net.elytrium.elytraproxy.virtual.protocol.packet.PlayerAbilities;
+import net.elytrium.elytraproxy.virtual.protocol.packet.PlayerPosition;
+import net.elytrium.elytraproxy.virtual.protocol.packet.PlayerPositionAndLook;
+import net.elytrium.elytraproxy.virtual.protocol.packet.SetExp;
+import net.elytrium.elytraproxy.virtual.protocol.packet.SetSlot;
+import net.elytrium.elytraproxy.virtual.protocol.packet.TeleportConfirm;
+import net.elytrium.elytraproxy.virtual.protocol.packet.UpdateViewPosition;
+import net.elytrium.elytraproxy.virtual.protocol.packet.world.ChunkData;
+
+public class VirtualProtocol {
+  public static void init() {
+    StateRegistry.VIRTUAL.serverbound.register(
+        TeleportConfirm.class, TeleportConfirm::new,
+        map(0x00, ProtocolVersion.MINECRAFT_1_9, true));
+    StateRegistry.VIRTUAL.serverbound.register(
+        PlayerPositionAndLook.class, PlayerPositionAndLook::new,
+        map(0x06, ProtocolVersion.MINECRAFT_1_7_2, false), //TODO: Right 1.7 value
+        map(0x06, ProtocolVersion.MINECRAFT_1_8, false),
+        map(0x0D, ProtocolVersion.MINECRAFT_1_9, false),
+        map(0x0F, ProtocolVersion.MINECRAFT_1_12, false),
+        map(0x0E, ProtocolVersion.MINECRAFT_1_12_1, false),
+        map(0x11, ProtocolVersion.MINECRAFT_1_13, false),
+        map(0x12, ProtocolVersion.MINECRAFT_1_14, false),
+        map(0x13, ProtocolVersion.MINECRAFT_1_16, false),
+        map(0x12, ProtocolVersion.MINECRAFT_1_17, false));
+    StateRegistry.VIRTUAL.serverbound.register(
+        PlayerPosition.class, PlayerPosition::new,
+        map(0x0B, ProtocolVersion.MINECRAFT_1_7_2, false), //TODO: Right 1.7 value
+        map(0x04, ProtocolVersion.MINECRAFT_1_7_6, false), //TODO: Right 1.7 value
+        map(0x04, ProtocolVersion.MINECRAFT_1_8, false),
+        map(0x0C, ProtocolVersion.MINECRAFT_1_9, false),
+        map(0x0E, ProtocolVersion.MINECRAFT_1_12, false),
+        map(0x0D, ProtocolVersion.MINECRAFT_1_12_1, false),
+        map(0x10, ProtocolVersion.MINECRAFT_1_13, false),
+        map(0x11, ProtocolVersion.MINECRAFT_1_14, false),
+        map(0x12, ProtocolVersion.MINECRAFT_1_16, false),
+        map(0x11, ProtocolVersion.MINECRAFT_1_17, false));
+    StateRegistry.VIRTUAL.serverbound.register(
+        Player.class, Player::new,
+        map(0x03, ProtocolVersion.MINECRAFT_1_7_2, false),
+        map(0x03, ProtocolVersion.MINECRAFT_1_8, false),
+        map(0x0F, ProtocolVersion.MINECRAFT_1_9, false),
+        map(0x0D, ProtocolVersion.MINECRAFT_1_12, false),
+        map(0x0C, ProtocolVersion.MINECRAFT_1_12_1, false),
+        map(0x0F, ProtocolVersion.MINECRAFT_1_13, false),
+        map(0x14, ProtocolVersion.MINECRAFT_1_14, false),
+        map(0x15, ProtocolVersion.MINECRAFT_1_16, false),
+        map(0x14, ProtocolVersion.MINECRAFT_1_17, false));
+    StateRegistry.VIRTUAL.clientbound.register(
+        PlayerPositionAndLook.class, PlayerPositionAndLook::new,
+        map(0x08, ProtocolVersion.MINECRAFT_1_7_2, true),
+        map(0x2E, ProtocolVersion.MINECRAFT_1_9, true),
+        map(0x2F, ProtocolVersion.MINECRAFT_1_12_1, true),
+        map(0x32, ProtocolVersion.MINECRAFT_1_13, true),
+        map(0x35, ProtocolVersion.MINECRAFT_1_14, true),
+        map(0x36, ProtocolVersion.MINECRAFT_1_15, true),
+        map(0x35, ProtocolVersion.MINECRAFT_1_16, true),
+        map(0x34, ProtocolVersion.MINECRAFT_1_16_2, true),
+        map(0x38, ProtocolVersion.MINECRAFT_1_17, true));
+    StateRegistry.VIRTUAL.clientbound.register(
+        ChunkData.class, ChunkData::new,
+        map(0x21, ProtocolVersion.MINECRAFT_1_7_2, true),
+        map(0x21, ProtocolVersion.MINECRAFT_1_8, true),
+        map(0x20, ProtocolVersion.MINECRAFT_1_9, true),
+        map(0x22, ProtocolVersion.MINECRAFT_1_13, true),
+        map(0x21, ProtocolVersion.MINECRAFT_1_14, true),
+        map(0x22, ProtocolVersion.MINECRAFT_1_15, true),
+        map(0x21, ProtocolVersion.MINECRAFT_1_16, true),
+        map(0x20, ProtocolVersion.MINECRAFT_1_16_2, true),
+        map(0x22, ProtocolVersion.MINECRAFT_1_17, true));
+    StateRegistry.VIRTUAL.clientbound.register(
+        SetSlot.class, SetSlot::new,
+        map(0x2F, ProtocolVersion.MINECRAFT_1_7_2, true),
+        map(0x2F, ProtocolVersion.MINECRAFT_1_8, true),
+        map(0x16, ProtocolVersion.MINECRAFT_1_9, true),
+        map(0x17, ProtocolVersion.MINECRAFT_1_13, true),
+        map(0x16, ProtocolVersion.MINECRAFT_1_14, true),
+        map(0x17, ProtocolVersion.MINECRAFT_1_15, true),
+        map(0x16, ProtocolVersion.MINECRAFT_1_16, true),
+        map(0x15, ProtocolVersion.MINECRAFT_1_16_2, true),
+        map(0x16, ProtocolVersion.MINECRAFT_1_17, true));
+    StateRegistry.VIRTUAL.clientbound.register(
+        MapDataPacket.class, MapDataPacket::new,
+        map(0x34, ProtocolVersion.MINECRAFT_1_7_2, true), //TODO: True 1.7 value
+        map(0x34, ProtocolVersion.MINECRAFT_1_8, true),
+        map(0x24, ProtocolVersion.MINECRAFT_1_9, true),
+        map(0x26, ProtocolVersion.MINECRAFT_1_13, true),
+        map(0x26, ProtocolVersion.MINECRAFT_1_14, true),
+        map(0x27, ProtocolVersion.MINECRAFT_1_15, true),
+        map(0x26, ProtocolVersion.MINECRAFT_1_16, true),
+        map(0x25, ProtocolVersion.MINECRAFT_1_16_2, true),
+        map(0x27, ProtocolVersion.MINECRAFT_1_17, true));
+    StateRegistry.VIRTUAL.clientbound.register(
+        PlayerAbilities.class, PlayerAbilities::new,
+        map(0x39, ProtocolVersion.MINECRAFT_1_7_2, true), //TODO: True 1.7 value
+        map(0x39, ProtocolVersion.MINECRAFT_1_8, true),
+        map(0x2B, ProtocolVersion.MINECRAFT_1_9, true),
+        map(0x2C, ProtocolVersion.MINECRAFT_1_12_1, true),
+        map(0x2E, ProtocolVersion.MINECRAFT_1_13, true),
+        map(0x31, ProtocolVersion.MINECRAFT_1_14, true),
+        map(0x32, ProtocolVersion.MINECRAFT_1_15, true),
+        map(0x31, ProtocolVersion.MINECRAFT_1_16, true),
+        map(0x30, ProtocolVersion.MINECRAFT_1_16_2, true),
+        map(0x32, ProtocolVersion.MINECRAFT_1_17, true));
+    StateRegistry.VIRTUAL.clientbound.register(
+        SetExp.class, SetExp::new,
+        map(0x2B, ProtocolVersion.MINECRAFT_1_7_2, true),
+        map(0x1F, ProtocolVersion.MINECRAFT_1_8, true),
+        map(0x3D, ProtocolVersion.MINECRAFT_1_9, true),
+        map(0x3F, ProtocolVersion.MINECRAFT_1_12, true),
+        map(0x40, ProtocolVersion.MINECRAFT_1_12_1, true),
+        map(0x43, ProtocolVersion.MINECRAFT_1_13, true),
+        map(0x47, ProtocolVersion.MINECRAFT_1_14, true),
+        map(0x48, ProtocolVersion.MINECRAFT_1_15, true),
+        map(0x51, ProtocolVersion.MINECRAFT_1_17, true));
+    StateRegistry.VIRTUAL.clientbound.register(
+        UpdateViewPosition.class, UpdateViewPosition::new,
+        map(0x40, ProtocolVersion.MINECRAFT_1_7_2, true),
+        map(0x40, ProtocolVersion.MINECRAFT_1_14, true),
+        map(0x41, ProtocolVersion.MINECRAFT_1_15, true),
+        map(0x40, ProtocolVersion.MINECRAFT_1_16_1, true),
+        map(0x49, ProtocolVersion.MINECRAFT_1_17, true));
+
+    StateRegistry.VIRTUAL.serverbound.register(
+        Chat.class, Chat::new,
+        StateRegistry.PLAY.serverbound.getMappingsForPacket(Chat.class, false));
+    StateRegistry.VIRTUAL.serverbound.register(
+        ClientSettings.class, ClientSettings::new,
+        StateRegistry.PLAY.serverbound.getMappingsForPacket(ClientSettings.class, false));
+    StateRegistry.VIRTUAL.serverbound.register(
+        PluginMessage.class, PluginMessage::new,
+        StateRegistry.PLAY.serverbound.getMappingsForPacket(PluginMessage.class, false));
+    StateRegistry.VIRTUAL.clientbound.register(
+        Chat.class, Chat::new,
+        StateRegistry.PLAY.clientbound.getMappingsForPacket(Chat.class, true));
+    StateRegistry.VIRTUAL.clientbound.register(
+        JoinGame.class, JoinGame::new,
+        StateRegistry.PLAY.clientbound.getMappingsForPacket(JoinGame.class, true));
+    StateRegistry.VIRTUAL.clientbound.register(
+        Disconnect.class, Disconnect::new,
+        StateRegistry.PLAY.clientbound.getMappingsForPacket(Disconnect.class, true));
+    StateRegistry.VIRTUAL.clientbound.register(
+        PluginMessage.class, PluginMessage::new,
+        StateRegistry.PLAY.clientbound.getMappingsForPacket(PluginMessage.class, true));
+    StateRegistry.VIRTUAL.clientbound.register(
+        Respawn.class, Respawn::new,
+        StateRegistry.PLAY.clientbound.getMappingsForPacket(Respawn.class, true));
+  }
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/data/registry/Biome.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/registry/Biome.java
similarity index 79%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/data/registry/Biome.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/registry/Biome.java
index fb35f4d1..be9a81b8 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/data/registry/Biome.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/registry/Biome.java
@@ -17,34 +17,47 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.protocol.data.registry;
+package net.elytrium.elytraproxy.virtual.protocol.data.registry;
 
+import com.google.common.collect.ImmutableList;
+import java.util.List;
+import java.util.stream.Collectors;
 import javax.annotation.Nullable;
 import lombok.Data;
 import lombok.NonNull;
 import lombok.RequiredArgsConstructor;
+import net.elytrium.elytraproxy.virtual.protocol.data.registry.Biome.Effects.MoodSound;
 import net.kyori.adventure.nbt.CompoundBinaryTag;
 import net.kyori.adventure.nbt.CompoundBinaryTag.Builder;
-import net.elytrium.elytraproxy.botfilter.protocol.data.registry.Biome.Effects.MoodSound;
+import net.kyori.adventure.nbt.ListBinaryTag;
 
 public class Biome {
 
-  public static final Biome PLAINTS = new Biome("minecraft:plains", 1,
+  public static final Biome PLAINS = new Biome("minecraft:plains", 1,
       new Element("rain", 0.125f, 0.8f, 0.05f, 0.4f, "plains",
           Effects.builder(7907327, 329011, 12638463, 415920)
-              .moodSound(MoodSound.of(6000, 2.0d, 8, "minecraft:ambient.cave")).build()));
+              .moodSound(MoodSound.of(6000, 2.0d, 8, "minecraft:ambient.cave"))
+              .build())
+  );
 
   public static final Biome SWAMP = new Biome("minecraft:swamp", 6,
       new Element("rain", -0.2F, 0.8f, 0.1F, 0.9F, "swamp",
           Effects.builder(7907327, 329011, 12638463, 415920).grassColorModifier("swamp")
               .foliageColor(6975545)
-              .moodSound(MoodSound.of(6000, 2.0d, 8, "minecraft:ambient.cave")).build()));
+              .moodSound(MoodSound.of(6000, 2.0d, 8, "minecraft:ambient.cave"))
+              .build())
+  );
 
   public static final Biome SWAMP_HILLS = new Biome("minecraft:swamp_hills", 134,
       new Element("rain", -0.1F, 0.8f, 0.3F, 0.9F, "swamp",
           Effects.builder(7907327, 329011, 12638463, 415920).grassColorModifier("swamp")
               .foliageColor(6975545)
-              .moodSound(MoodSound.of(6000, 2.0d, 8, "minecraft:ambient.cave")).build()));
+              .moodSound(MoodSound.of(6000, 2.0d, 8, "minecraft:ambient.cave"))
+              .build())
+  );
+
+  public static final List<Biome> REGISTERED_BIOMES = ImmutableList.of(PLAINS);
+
   public final String name;
   public final int id;
   public final Element element;
@@ -62,6 +75,14 @@ public class Biome {
         .put("element", element.encode()).build();
   }
 
+  public static CompoundBinaryTag getRegistry() {
+    return CompoundBinaryTag.builder()
+        .putString("type", "minecraft:worldgen/biome")
+        .put("value", ListBinaryTag
+            .from(REGISTERED_BIOMES.stream().map(Biome::encodeBiome)
+                .collect(Collectors.toList()))).build();
+  }
+
   public static class Element {
 
     public final String precipitation;
@@ -72,9 +93,8 @@ public class Biome {
     public final String category;
     public final Effects effects;
 
-    public Element(String precipitation, float depth, float temperature, float scale,
-        float downfall,
-        String category, Effects effects) {
+    public Element(String precipitation, float depth, float temperature,
+                   float scale, float downfall, String category, Effects effects) {
       this.precipitation = precipitation;
       this.depth = depth;
       this.temperature = temperature;
@@ -106,13 +126,20 @@ public class Biome {
     private final int fogColor;
     private final int waterColor;
 
-    @Nullable private final Integer foliageColor;
-    @Nullable private final String grassColorModifier;
-    @Nullable private final Music music;
-    @Nullable private final String ambientSound;
-    @Nullable private final AdditionsSound additionsSound;
-    @Nullable private final MoodSound moodSound;
-    @Nullable private final Particle particle;
+    @Nullable
+    private final Integer foliageColor;
+    @Nullable
+    private final String grassColorModifier;
+    @Nullable
+    private final Music music;
+    @Nullable
+    private final String ambientSound;
+    @Nullable
+    private final AdditionsSound additionsSound;
+    @Nullable
+    private final MoodSound moodSound;
+    @Nullable
+    private final Particle particle;
 
     public CompoundBinaryTag encode() {
       Builder result = CompoundBinaryTag.builder();
@@ -145,8 +172,7 @@ public class Biome {
       return result.build();
     }
 
-    public static EffectsBuilder builder(int skyColor, int waterFogColor, int fogColor,
-        int waterColor) {
+    public static EffectsBuilder builder(int skyColor, int waterFogColor, int fogColor, int waterColor) {
       return new EffectsBuilder().skyColor(skyColor).waterFogColor(waterFogColor).fogColor(fogColor)
           .waterColor(waterColor);
     }
@@ -158,7 +184,8 @@ public class Biome {
       private final int tickDelay;
       private final double offset;
       private final int blockSearchExtent;
-      @NonNull private final String sound;
+      @NonNull
+      private final String sound;
 
       public CompoundBinaryTag encode() {
         return CompoundBinaryTag.builder()
@@ -174,7 +201,8 @@ public class Biome {
     public static class Music {
 
       private final boolean replaceCurrentMusic;
-      @NonNull private final String sound;
+      @NonNull
+      private final String sound;
       private final int maxDelay;
       private final int minDelay;
 
@@ -191,7 +219,8 @@ public class Biome {
     @RequiredArgsConstructor(staticName = "of")
     public static class AdditionsSound {
 
-      @NonNull private final String sound;
+      @NonNull
+      private final String sound;
       private final double tickChance;
 
       public CompoundBinaryTag encode() {
@@ -206,7 +235,8 @@ public class Biome {
     public static class Particle {
 
       private final float probability;
-      @NonNull private final ParticleOptions options;
+      @NonNull
+      private final ParticleOptions options;
 
       public CompoundBinaryTag encode() {
         return CompoundBinaryTag.builder()
@@ -218,7 +248,8 @@ public class Biome {
       @RequiredArgsConstructor
       public static class ParticleOptions {
 
-        @NonNull private final String type;
+        @NonNull
+        private final String type;
 
         public CompoundBinaryTag encode() {
           return CompoundBinaryTag.builder()
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/data/storage/BlockStorage.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/storage/BlockStorage.java
similarity index 88%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/data/storage/BlockStorage.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/storage/BlockStorage.java
index 8f207fa2..7b796797 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/data/storage/BlockStorage.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/storage/BlockStorage.java
@@ -17,14 +17,14 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.protocol.data.storage;
+package net.elytrium.elytraproxy.virtual.protocol.data.storage;
 
 import com.velocitypowered.api.network.ProtocolVersion;
 import io.netty.buffer.ByteBuf;
 import lombok.NonNull;
+import net.elytrium.elytraproxy.virtual.server.world.SimpleBlock;
+import net.elytrium.elytraproxy.virtual.server.world.SimpleBlock.Version;
 import org.jetbrains.annotations.NotNull;
-import net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock;
-import net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.Version;
 
 public interface BlockStorage {
 
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/data/storage/BlockStorage17.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/storage/BlockStorage17.java
similarity index 90%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/data/storage/BlockStorage17.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/storage/BlockStorage17.java
index 755d5a11..2d4801fa 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/data/storage/BlockStorage17.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/storage/BlockStorage17.java
@@ -17,7 +17,7 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.protocol.data.storage;
+package net.elytrium.elytraproxy.virtual.protocol.data.storage;
 
 import com.velocitypowered.api.network.ProtocolVersion;
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
@@ -26,11 +26,11 @@ import java.util.Arrays;
 import lombok.AccessLevel;
 import lombok.NonNull;
 import lombok.RequiredArgsConstructor;
+import net.elytrium.elytraproxy.virtual.protocol.util.mcprotocollib.NibbleArray3d;
+import net.elytrium.elytraproxy.virtual.server.world.SimpleBlock;
+import net.elytrium.elytraproxy.virtual.server.world.SimpleBlock.Version;
+import net.elytrium.elytraproxy.virtual.server.world.chunk.SimpleChunk;
 import org.jetbrains.annotations.NotNull;
-import net.elytrium.elytraproxy.botfilter.protocol.util.mcprotocollib.NibbleArray3d;
-import net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock;
-import net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.Version;
-import net.elytrium.elytraproxy.botfilter.server.world.chunk.SimpleChunk;
 
 @RequiredArgsConstructor(access = AccessLevel.PRIVATE)
 public class BlockStorage17 implements BlockStorage {
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/data/storage/BlockStorage19.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/storage/BlockStorage19.java
similarity index 91%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/data/storage/BlockStorage19.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/storage/BlockStorage19.java
index 708be90c..f898ed14 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/data/storage/BlockStorage19.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/storage/BlockStorage19.java
@@ -17,7 +17,7 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.protocol.data.storage;
+package net.elytrium.elytraproxy.virtual.protocol.data.storage;
 
 import com.velocitypowered.api.network.ProtocolVersion;
 import com.velocitypowered.proxy.protocol.ProtocolUtils;
@@ -30,13 +30,13 @@ import java.util.Map;
 import lombok.AccessLevel;
 import lombok.AllArgsConstructor;
 import lombok.NonNull;
+import net.elytrium.elytraproxy.virtual.protocol.util.CompactStorage;
+import net.elytrium.elytraproxy.virtual.protocol.util.mcprotocollib.BitStorage116;
+import net.elytrium.elytraproxy.virtual.protocol.util.mcprotocollib.BitStorage19;
+import net.elytrium.elytraproxy.virtual.server.world.SimpleBlock;
+import net.elytrium.elytraproxy.virtual.server.world.SimpleBlock.Version;
+import net.elytrium.elytraproxy.virtual.server.world.chunk.SimpleChunk;
 import org.jetbrains.annotations.NotNull;
-import net.elytrium.elytraproxy.botfilter.protocol.util.CompactStorage;
-import net.elytrium.elytraproxy.botfilter.protocol.util.mcprotocollib.BitStorage116;
-import net.elytrium.elytraproxy.botfilter.protocol.util.mcprotocollib.BitStorage19;
-import net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock;
-import net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.Version;
-import net.elytrium.elytraproxy.botfilter.server.world.chunk.SimpleChunk;
 
 @AllArgsConstructor(access = AccessLevel.PRIVATE)
 public class BlockStorage19 implements BlockStorage {
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/MapDataPacket.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/MapDataPacket.java
new file mode 100644
index 00000000..8d00e584
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/MapDataPacket.java
@@ -0,0 +1,74 @@
+/*
+ * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
+ *
+ * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.virtual.protocol.packet;
+
+import com.velocitypowered.api.network.ProtocolVersion;
+import com.velocitypowered.proxy.protocol.MinecraftPacket;
+import com.velocitypowered.proxy.protocol.ProtocolUtils;
+import io.netty.buffer.ByteBuf;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.EqualsAndHashCode;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@EqualsAndHashCode(callSuper = false)
+public class MapDataPacket implements MinecraftPacket {
+
+  private int mapId;
+  private byte scale;
+  private MapData data;
+
+  @Override
+  public void encode(ByteBuf buf, ProtocolUtils.Direction direction, ProtocolVersion version) {
+    ProtocolUtils.writeVarInt(buf, this.mapId);
+    buf.writeByte(this.scale);
+    if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_9)
+        && version.isBefore(ProtocolVersion.MINECRAFT_1_17)) {
+      buf.writeBoolean(false);
+    }
+    if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_14)) {
+      buf.writeBoolean(false);
+    }
+    if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_17)) {
+      buf.writeBoolean(false);
+    } else {
+      ProtocolUtils.writeVarInt(buf, 0);
+    }
+    buf.writeByte(data.getColumns());
+    buf.writeByte(data.getRows());
+    buf.writeByte(data.getX());
+    buf.writeByte(data.getY());
+    ProtocolUtils.writeByteArray(buf, data.getData());
+  }
+
+  @AllArgsConstructor
+  @Getter
+  public static class MapData {
+    private final int columns;
+    private final int rows;
+    private final int x;
+    private final int y;
+    private final byte[] data;
+  }
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/Player.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/Player.java
new file mode 100644
index 00000000..b0d2521e
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/Player.java
@@ -0,0 +1,51 @@
+/*
+ * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
+ *
+ * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.virtual.protocol.packet;
+
+import com.velocitypowered.api.network.ProtocolVersion;
+import com.velocitypowered.proxy.connection.MinecraftSessionHandler;
+import com.velocitypowered.proxy.protocol.MinecraftPacket;
+import com.velocitypowered.proxy.protocol.ProtocolUtils;
+import io.netty.buffer.ByteBuf;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.EqualsAndHashCode;
+import lombok.NoArgsConstructor;
+import net.elytrium.elytraproxy.virtual.server.VirtualSessionHandler;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@EqualsAndHashCode(callSuper = false)
+public class Player implements MinecraftPacket {
+
+  private boolean onGround;
+
+  @Override
+  public void decode(ByteBuf buf, ProtocolUtils.Direction direction, ProtocolVersion protocolVersion) {
+    this.onGround = buf.readBoolean();
+  }
+
+  @Override
+  public boolean handle(MinecraftSessionHandler handler) {
+    ((VirtualSessionHandler) handler).handle(this);
+    return false;
+  }
+}
\ No newline at end of file
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/PlayerAbilities.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/PlayerAbilities.java
new file mode 100644
index 00000000..5101c6dd
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/PlayerAbilities.java
@@ -0,0 +1,53 @@
+/*
+ * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
+ *
+ * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.virtual.protocol.packet;
+
+import com.velocitypowered.api.network.ProtocolVersion;
+import com.velocitypowered.proxy.connection.MinecraftSessionHandler;
+import com.velocitypowered.proxy.protocol.MinecraftPacket;
+import com.velocitypowered.proxy.protocol.ProtocolUtils;
+import io.netty.buffer.ByteBuf;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.EqualsAndHashCode;
+import lombok.NoArgsConstructor;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@EqualsAndHashCode(callSuper = false)
+public class PlayerAbilities implements MinecraftPacket {
+
+  byte flags;
+  float speed;
+  float field;
+
+  @Override
+  public void encode(ByteBuf buf, ProtocolUtils.Direction direction, ProtocolVersion protocolVersion) {
+    buf.writeByte(this.flags);
+    buf.writeFloat(this.speed);
+    buf.writeFloat(this.field);
+  }
+
+  @Override
+  public boolean handle(MinecraftSessionHandler handler) {
+    return false;
+  }
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/PlayerPosition.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/PlayerPosition.java
new file mode 100644
index 00000000..2d65f5fe
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/PlayerPosition.java
@@ -0,0 +1,56 @@
+/*
+ * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
+ *
+ * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.virtual.protocol.packet;
+
+import com.velocitypowered.api.network.ProtocolVersion;
+import com.velocitypowered.proxy.connection.MinecraftSessionHandler;
+import com.velocitypowered.proxy.protocol.MinecraftPacket;
+import com.velocitypowered.proxy.protocol.ProtocolUtils;
+import io.netty.buffer.ByteBuf;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.EqualsAndHashCode;
+import lombok.NoArgsConstructor;
+import net.elytrium.elytraproxy.virtual.server.VirtualSessionHandler;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@EqualsAndHashCode(callSuper = false)
+public class PlayerPosition implements MinecraftPacket {
+
+  private double x;
+  private double y;
+  private double z;
+  private boolean onGround;
+
+  @Override
+  public void decode(ByteBuf buf, ProtocolUtils.Direction direction, ProtocolVersion protocolVersion) {
+    this.x = buf.readDouble();
+    this.y = buf.readDouble();
+    this.z = buf.readDouble();
+    this.onGround = buf.readBoolean();
+  }
+
+  @Override
+  public boolean handle(MinecraftSessionHandler handler) {
+    return ((VirtualSessionHandler) handler).handle(this);
+  }
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/PlayerPositionAndLook.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/PlayerPositionAndLook.java
similarity index 93%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/PlayerPositionAndLook.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/PlayerPositionAndLook.java
index 23f3a7cb..6c75fd27 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/PlayerPositionAndLook.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/PlayerPositionAndLook.java
@@ -17,7 +17,7 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.protocol.packet;
+package net.elytrium.elytraproxy.virtual.protocol.packet;
 
 import com.velocitypowered.api.network.ProtocolVersion;
 import com.velocitypowered.proxy.connection.MinecraftSessionHandler;
@@ -30,6 +30,7 @@ import lombok.Getter;
 import lombok.NoArgsConstructor;
 import lombok.Setter;
 import lombok.ToString;
+import net.elytrium.elytraproxy.virtual.server.VirtualSessionHandler;
 
 @Getter
 @Setter
@@ -83,6 +84,6 @@ public class PlayerPositionAndLook implements MinecraftPacket {
 
   @Override
   public boolean handle(MinecraftSessionHandler handler) {
-    return handler.handle(this);
+    return ((VirtualSessionHandler) handler).handle(this);
   }
 }
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/SetExp.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/SetExp.java
new file mode 100644
index 00000000..db09ae96
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/SetExp.java
@@ -0,0 +1,59 @@
+/*
+ * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
+ *
+ * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.virtual.protocol.packet;
+
+import com.velocitypowered.api.network.ProtocolVersion;
+import com.velocitypowered.proxy.connection.MinecraftSessionHandler;
+import com.velocitypowered.proxy.protocol.MinecraftPacket;
+import com.velocitypowered.proxy.protocol.ProtocolUtils;
+import io.netty.buffer.ByteBuf;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.EqualsAndHashCode;
+import lombok.NoArgsConstructor;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@EqualsAndHashCode(callSuper = false)
+public class SetExp implements MinecraftPacket {
+
+  float expBar;
+  int level;
+  int totalExp;
+
+  @Override
+  public void encode(ByteBuf buf, ProtocolUtils.Direction direction, ProtocolVersion protocolVersion) {
+    if (protocolVersion.isAfterOrEq(ProtocolVersion.MINECRAFT_1_8)) {
+      buf.writeFloat(this.expBar);
+      ProtocolUtils.writeVarInt(buf, this.level);
+      ProtocolUtils.writeVarInt(buf, this.totalExp);
+    } else {
+      buf.writeByte((int) this.expBar); // or? buf.writeFloat(this.expBar);
+      buf.writeByte(this.level); // or? buf.writeShort(this.level);
+      buf.writeShort(this.totalExp);
+    }
+  }
+
+  @Override
+  public boolean handle(MinecraftSessionHandler handler) {
+    return true;
+  }
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/SetSlot.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/SetSlot.java
new file mode 100644
index 00000000..37e7796a
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/SetSlot.java
@@ -0,0 +1,98 @@
+/*
+ * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
+ *
+ * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.virtual.protocol.packet;
+
+import com.velocitypowered.api.network.ProtocolVersion;
+import com.velocitypowered.proxy.protocol.MinecraftPacket;
+import com.velocitypowered.proxy.protocol.ProtocolUtils;
+import io.netty.buffer.ByteBuf;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.EqualsAndHashCode;
+import lombok.NoArgsConstructor;
+import net.kyori.adventure.nbt.CompoundBinaryTag;
+import net.kyori.adventure.nbt.IntBinaryTag;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@EqualsAndHashCode(callSuper = false)
+public class SetSlot implements MinecraftPacket {
+
+  private int windowId;
+  private int slot;
+  private int item;
+  private int count;
+  private int data;
+
+  @Override
+  public void encode(ByteBuf buf, ProtocolUtils.Direction direction, ProtocolVersion version) {
+    buf.writeByte(this.windowId);
+    if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_17_1)) {
+      ProtocolUtils.writeVarInt(buf, 0);
+    }
+    buf.writeShort(this.slot);
+    int id = this.item == 358 ? getCaptchaId(version) : this.item;
+    boolean present = id > 0;
+
+    if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_13_2)) {
+      buf.writeBoolean(present);
+    }
+
+    if (!present && version.isBefore(ProtocolVersion.MINECRAFT_1_13_2)) {
+      buf.writeShort(-1);
+    }
+
+    if (present) {
+      if (version.isBefore(ProtocolVersion.MINECRAFT_1_13_2)) {
+        buf.writeShort(id);
+      } else {
+        ProtocolUtils.writeVarInt(buf, id);
+      }
+      buf.writeByte(this.count);
+      if (version.isBefore(ProtocolVersion.MINECRAFT_1_13)) {
+        buf.writeShort(this.data);
+      }
+
+      if (version.isBefore(ProtocolVersion.MINECRAFT_1_17)) {
+        buf.writeByte(0); //No Nbt
+      } else {
+        CompoundBinaryTag nbt = CompoundBinaryTag.builder().put("map", IntBinaryTag.of(0)).build();
+        ProtocolUtils.writeCompoundTag(buf, nbt);
+      }
+    }
+  }
+
+  private int getCaptchaId(ProtocolVersion version) {
+    if (version.isBeforeOrEq(ProtocolVersion.MINECRAFT_1_12_2)) {
+      return 358;
+    } else if (version.equals(ProtocolVersion.MINECRAFT_1_13)) {
+      return 608;
+    } else if (version.isBeforeOrEq(ProtocolVersion.MINECRAFT_1_13_2)) {
+      return 613;
+    } else if (version.isBeforeOrEq(ProtocolVersion.MINECRAFT_1_15_2)) {
+      return 671;
+    } else if (version.isBeforeOrEq(ProtocolVersion.MINECRAFT_1_16_4)) {
+      return 733;
+    } else {
+      return 847;
+    }
+  }
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/TeleportConfirm.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/TeleportConfirm.java
new file mode 100644
index 00000000..e3af0ac8
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/TeleportConfirm.java
@@ -0,0 +1,50 @@
+/*
+ * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
+ *
+ * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.virtual.protocol.packet;
+
+import com.velocitypowered.api.network.ProtocolVersion;
+import com.velocitypowered.proxy.connection.MinecraftSessionHandler;
+import com.velocitypowered.proxy.protocol.MinecraftPacket;
+import com.velocitypowered.proxy.protocol.ProtocolUtils;
+import io.netty.buffer.ByteBuf;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.EqualsAndHashCode;
+import lombok.NoArgsConstructor;
+import net.elytrium.elytraproxy.virtual.server.VirtualSessionHandler;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@EqualsAndHashCode(callSuper = false)
+public class TeleportConfirm implements MinecraftPacket {
+
+  int teleportId;
+
+  @Override
+  public void decode(ByteBuf buf, ProtocolUtils.Direction direction, ProtocolVersion protocolVersion) {
+    teleportId = ProtocolUtils.readVarInt(buf);
+  }
+
+  @Override
+  public boolean handle(MinecraftSessionHandler handler) {
+    return ((VirtualSessionHandler) handler).handle(this);
+  }
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/UpdateViewPosition.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/UpdateViewPosition.java
similarity index 73%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/UpdateViewPosition.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/UpdateViewPosition.java
index 4e17995a..ca83525f 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/UpdateViewPosition.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/UpdateViewPosition.java
@@ -17,32 +17,29 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.protocol.packet;
+package net.elytrium.elytraproxy.virtual.protocol.packet;
 
 import com.velocitypowered.api.network.ProtocolVersion;
 import com.velocitypowered.proxy.protocol.MinecraftPacket;
 import com.velocitypowered.proxy.protocol.ProtocolUtils;
-import com.velocitypowered.proxy.protocol.ProtocolUtils.Direction;
 import io.netty.buffer.ByteBuf;
 import lombok.AllArgsConstructor;
-import lombok.Getter;
+import lombok.Data;
+import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
-import lombok.Setter;
-import lombok.ToString;
 
-@Getter
-@Setter
-@AllArgsConstructor
+@Data
 @NoArgsConstructor
-@ToString
+@AllArgsConstructor
+@EqualsAndHashCode(callSuper = false)
 public class UpdateViewPosition implements MinecraftPacket {
 
-  private int chunkX;
-  private int chunkZ;
+  private int x;
+  private int z;
 
   @Override
-  public void encode(ByteBuf buf, Direction direction, ProtocolVersion protocolVersion) {
-    ProtocolUtils.writeVarInt(buf, chunkX);
-    ProtocolUtils.writeVarInt(buf, chunkZ);
+  public void encode(ByteBuf buf, ProtocolUtils.Direction direction, ProtocolVersion protocolVersion) {
+    ProtocolUtils.writeVarInt(buf, this.x);
+    ProtocolUtils.writeVarInt(buf, this.z);
   }
 }
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/world/ChunkData.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/world/ChunkData.java
similarity index 90%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/world/ChunkData.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/world/ChunkData.java
index 3b4b1af0..2381cb65 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/world/ChunkData.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/world/ChunkData.java
@@ -17,7 +17,7 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.protocol.packet.world;
+package net.elytrium.elytraproxy.virtual.protocol.packet.world;
 
 import com.google.common.base.Preconditions;
 import com.velocitypowered.api.network.ProtocolVersion;
@@ -36,16 +36,16 @@ import java.util.Map;
 import java.util.Map.Entry;
 import java.util.zip.Deflater;
 import lombok.Getter;
-import net.elytrium.elytraproxy.botfilter.protocol.data.registry.Biome;
+import net.elytrium.elytraproxy.virtual.protocol.data.registry.Biome;
+import net.elytrium.elytraproxy.virtual.protocol.util.CompactStorage;
+import net.elytrium.elytraproxy.virtual.protocol.util.NetworkSection;
+import net.elytrium.elytraproxy.virtual.protocol.util.mcprotocollib.BitStorage116;
+import net.elytrium.elytraproxy.virtual.protocol.util.mcprotocollib.BitStorage19;
+import net.elytrium.elytraproxy.virtual.server.world.SimpleBlock;
+import net.elytrium.elytraproxy.virtual.server.world.chunk.ChunkSnapshot;
+import net.elytrium.elytraproxy.virtual.server.world.chunk.LightSection;
+import net.elytrium.elytraproxy.virtual.server.world.chunk.SimpleChunk;
 import net.kyori.adventure.nbt.CompoundBinaryTag;
-import net.elytrium.elytraproxy.botfilter.protocol.util.CompactStorage;
-import net.elytrium.elytraproxy.botfilter.protocol.util.NetworkSection;
-import net.elytrium.elytraproxy.botfilter.protocol.util.mcprotocollib.BitStorage116;
-import net.elytrium.elytraproxy.botfilter.protocol.util.mcprotocollib.BitStorage19;
-import net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock;
-import net.elytrium.elytraproxy.botfilter.server.world.chunk.ChunkSnapshot;
-import net.elytrium.elytraproxy.botfilter.server.world.chunk.LightSection;
-import net.elytrium.elytraproxy.botfilter.server.world.chunk.SimpleChunk;
 
 public class ChunkData implements MinecraftPacket {
 
@@ -89,8 +89,8 @@ public class ChunkData implements MinecraftPacket {
     if (version.isBefore(ProtocolVersion.MINECRAFT_1_17)) {
       buf.writeBoolean(chunk.isFullChunk());
 
-      if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_16) &&
-          version.isBefore(ProtocolVersion.MINECRAFT_1_16_2)) {
+      if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_16)
+          && version.isBefore(ProtocolVersion.MINECRAFT_1_16_2)) {
         buf.writeBoolean(true); //ignore old data
       }
 
@@ -203,7 +203,7 @@ public class ChunkData implements MinecraftPacket {
   }
 
   private long[] create117Mask() {
-    BitSet bitSet = BitSet.valueOf(new long[]{mask});
+    BitSet bitSet = BitSet.valueOf(new long[] {mask});
     return bitSet.toLongArray();
   }
 
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/util/CompactStorage.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/CompactStorage.java
similarity index 95%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/util/CompactStorage.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/CompactStorage.java
index 0be862f1..aca3b339 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/util/CompactStorage.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/CompactStorage.java
@@ -17,7 +17,7 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.protocol.util;
+package net.elytrium.elytraproxy.virtual.protocol.util;
 
 import com.velocitypowered.api.network.ProtocolVersion;
 import io.netty.buffer.ByteBuf;
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/util/NetworkSection.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/NetworkSection.java
similarity index 90%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/util/NetworkSection.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/NetworkSection.java
index f4fa8d89..7c7ad844 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/util/NetworkSection.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/NetworkSection.java
@@ -17,18 +17,18 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.protocol.util;
+package net.elytrium.elytraproxy.virtual.protocol.util;
 
 import com.velocitypowered.api.network.ProtocolVersion;
 import io.netty.buffer.ByteBuf;
 import java.util.EnumMap;
 import java.util.Map;
 import lombok.NonNull;
-import net.elytrium.elytraproxy.botfilter.protocol.data.storage.BlockStorage;
-import net.elytrium.elytraproxy.botfilter.protocol.util.mcprotocollib.NibbleArray3d;
-import net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock;
-import net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.Version;
-import net.elytrium.elytraproxy.botfilter.server.world.chunk.SimpleSection;
+import net.elytrium.elytraproxy.virtual.protocol.data.storage.BlockStorage;
+import net.elytrium.elytraproxy.virtual.protocol.util.mcprotocollib.NibbleArray3d;
+import net.elytrium.elytraproxy.virtual.server.world.SimpleBlock;
+import net.elytrium.elytraproxy.virtual.server.world.SimpleBlock.Version;
+import net.elytrium.elytraproxy.virtual.server.world.chunk.SimpleSection;
 
 public class NetworkSection {
 
@@ -38,8 +38,7 @@ public class NetworkSection {
   private final SimpleSection section;
   private int blockCount = -1;
 
-  public NetworkSection(SimpleSection section, @NonNull NibbleArray3d blockLight,
-      NibbleArray3d skyLight) {
+  public NetworkSection(SimpleSection section, @NonNull NibbleArray3d blockLight, NibbleArray3d skyLight) {
     this.section = section;
     this.blockLight = blockLight;
     this.skyLight = skyLight;
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/util/mcprotocollib/BitStorage116.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/mcprotocollib/BitStorage116.java
similarity index 97%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/util/mcprotocollib/BitStorage116.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/mcprotocollib/BitStorage116.java
index 24f1099f..2e965f4e 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/util/mcprotocollib/BitStorage116.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/mcprotocollib/BitStorage116.java
@@ -22,7 +22,7 @@
  * OR OTHER DEALINGS IN THE SOFTWARE.
  */
 
-package net.elytrium.elytraproxy.botfilter.protocol.util.mcprotocollib;
+package net.elytrium.elytraproxy.virtual.protocol.util.mcprotocollib;
 
 import com.velocitypowered.api.network.ProtocolVersion;
 import com.velocitypowered.proxy.protocol.ProtocolUtils;
@@ -30,7 +30,7 @@ import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import io.netty.buffer.ByteBuf;
 import java.util.Arrays;
 import lombok.Getter;
-import net.elytrium.elytraproxy.botfilter.protocol.util.CompactStorage;
+import net.elytrium.elytraproxy.virtual.protocol.util.CompactStorage;
 
 public class BitStorage116 implements CompactStorage {
 
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/util/mcprotocollib/BitStorage19.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/mcprotocollib/BitStorage19.java
similarity index 96%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/util/mcprotocollib/BitStorage19.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/mcprotocollib/BitStorage19.java
index 9ad241f9..dcf42f5b 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/util/mcprotocollib/BitStorage19.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/mcprotocollib/BitStorage19.java
@@ -22,14 +22,14 @@
  * OR OTHER DEALINGS IN THE SOFTWARE.
  */
 
-package net.elytrium.elytraproxy.botfilter.protocol.util.mcprotocollib;
+package net.elytrium.elytraproxy.virtual.protocol.util.mcprotocollib;
 
 import com.velocitypowered.api.network.ProtocolVersion;
 import com.velocitypowered.proxy.protocol.ProtocolUtils;
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import io.netty.buffer.ByteBuf;
 import java.util.Arrays;
-import net.elytrium.elytraproxy.botfilter.protocol.util.CompactStorage;
+import net.elytrium.elytraproxy.virtual.protocol.util.CompactStorage;
 
 @SuppressFBWarnings({"EI_EXPOSE_REP2", "EI_EXPOSE_REP"})
 public class BitStorage19 implements CompactStorage {
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/util/mcprotocollib/NibbleArray3d.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/mcprotocollib/NibbleArray3d.java
similarity index 97%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/util/mcprotocollib/NibbleArray3d.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/mcprotocollib/NibbleArray3d.java
index 596c987c..896a5bdb 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/util/mcprotocollib/NibbleArray3d.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/mcprotocollib/NibbleArray3d.java
@@ -22,7 +22,7 @@
  * OR OTHER DEALINGS IN THE SOFTWARE.
  */
 
-package net.elytrium.elytraproxy.botfilter.protocol.util.mcprotocollib;
+package net.elytrium.elytraproxy.virtual.protocol.util.mcprotocollib;
 
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.util.Arrays;
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/ServerPackets.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/ServerPackets.java
new file mode 100644
index 00000000..a58d230b
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/ServerPackets.java
@@ -0,0 +1,263 @@
+/*
+ * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
+ *
+ * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.virtual.server;
+
+import com.google.common.collect.ImmutableSet;
+import com.velocitypowered.api.network.ProtocolVersion;
+import com.velocitypowered.proxy.connection.registry.DimensionData;
+import com.velocitypowered.proxy.connection.registry.DimensionInfo;
+import com.velocitypowered.proxy.connection.registry.DimensionRegistry;
+import com.velocitypowered.proxy.protocol.ProtocolUtils;
+import com.velocitypowered.proxy.protocol.packet.Chat;
+import com.velocitypowered.proxy.protocol.packet.Disconnect;
+import com.velocitypowered.proxy.protocol.packet.JoinGame;
+import com.velocitypowered.proxy.protocol.packet.PluginMessage;
+import io.netty.buffer.ByteBuf;
+import io.netty.buffer.ByteBufAllocator;
+import java.util.ArrayList;
+import java.util.List;
+import lombok.Getter;
+import net.elytrium.elytraproxy.botfilter.handler.BotFilterSessionHandler;
+import net.elytrium.elytraproxy.config.Settings;
+import net.elytrium.elytraproxy.virtual.protocol.data.registry.Biome;
+import net.elytrium.elytraproxy.virtual.protocol.packet.PlayerAbilities;
+import net.elytrium.elytraproxy.virtual.protocol.packet.PlayerPositionAndLook;
+import net.elytrium.elytraproxy.virtual.protocol.packet.SetExp;
+import net.elytrium.elytraproxy.virtual.protocol.packet.SetSlot;
+import net.elytrium.elytraproxy.virtual.protocol.packet.UpdateViewPosition;
+import net.elytrium.elytraproxy.virtual.protocol.packet.world.ChunkData;
+import net.elytrium.elytraproxy.virtual.server.world.VirtualWorld;
+import net.elytrium.elytraproxy.virtual.server.world.chunk.SimpleChunk;
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
+
+@Getter
+public class ServerPackets {
+
+  private final VirtualServer virtualServer;
+  private final String key = Settings.IMP.ANTIBOT.BOTFILTER_DIMENSION.MODERN_KEY;
+  private final String hardcodedBrandString = Settings.IMP.ANTIBOT.BRAND + " (ely.su/github)";
+  private final int dimensionId = Settings.IMP.ANTIBOT.BOTFILTER_DIMENSION.ID;
+  private final int legacyDimensionId = Settings.IMP.ANTIBOT.BOTFILTER_DIMENSION.LEGACY_ID;
+  private DimensionData dimension;
+  private DimensionData legacyDimension;
+  private VirtualWorld virtualWorld;
+  private List<ChunkData> staticWorldPacket;
+  private JoinGame joinPacket;
+  private JoinGame legacyJoinPacket;
+  private Disconnect alreadyConnected;
+  private Disconnect tooBigPacket;
+  private Disconnect captchaFailed;
+  private Disconnect fallingCheckFailed;
+  private SetSlot setSlot;
+  private SetSlot resetSlot;
+  private Chat checkingChat;
+  private Chat checkingCaptchaChat;
+  private Chat loginChat;
+  private Chat registerChat;
+  private Chat wrongPasswordChat;
+  private Disconnect nicknamePremium;
+  private Disconnect nicknameInvalid;
+  private Disconnect ipLimit;
+  private Disconnect wrongPassword;
+  private Disconnect successfulBotFilter;
+  private Disconnect successfulAuth;
+  private PlayerPositionAndLook captchaPosAndLook;
+  private PlayerPositionAndLook authPosAndLook;
+  private UpdateViewPosition captchaView;
+  private UpdateViewPosition authView;
+  private PlayerAbilities noAbilities;
+  private List<SetExp> experience;
+  private ByteBuf brandBuf;
+
+  public ServerPackets(VirtualServer virtualServer) {
+    this.virtualServer = virtualServer;
+  }
+
+  public void createPackets() {
+    Settings.ANTIBOT.CAPTCHA_COORDS captchaCoords = Settings.IMP.ANTIBOT.CAPTCHA_COORDS;
+    Settings.AUTH.AUTH_COORDS authCoords = Settings.IMP.AUTH.AUTH_COORDS;
+    // TODO: Проверять валид ли ид
+    dimension = new DimensionData(key, dimensionId, true,
+            0.0f, false, false, false, true,
+            true, true, false, false, 256,
+            "minecraft:infiniburn_nether",
+            0L, false, 1.0, key, 0, 256);
+    legacyDimension = new DimensionData(key, legacyDimensionId, true,
+            0.0f, false, false, false, true,
+            true, true, false, false, 256,
+            "minecraft:infiniburn_nether",
+            0L, false, 1.0, key, 0, 256);
+    this.virtualWorld = new VirtualWorld(dimension,
+        new DimensionInfo(key, key, true, false), captchaCoords.X, captchaCoords.Y);
+
+    /*
+    for (int x = 0; x < 16; x++) {
+      for (int z = 0; z < 16; z++) {
+        virtualWorld.setBlock(x, 40, z, SimpleBlock.GRANITE);
+        virtualWorld.setBlock(x, 60, z, SimpleBlock.GRANITE);
+      }
+    }
+    for (int x = 1; x < 15; x++) {
+      for (int z = 1; z < 15; z++) {
+        if (x % 3 == 0 && z % 3 == 0) {
+          virtualWorld.setBlock(x, 40, z, SimpleBlock.BARRIER);
+          virtualWorld.setBlockLight(x, 41, z, (byte) 15);
+        }
+      }
+    }
+    for (int x = 0; x < 16; x++) {
+      for (int y = 40; y <= 60; y++) {
+        virtualWorld.setBlock(x, y, 0, SimpleBlock.GRANITE);
+        virtualWorld.setBlock(0, y, x, SimpleBlock.GRANITE);
+        virtualWorld.setBlock(x, y, 15, SimpleBlock.GRANITE);
+        virtualWorld.setBlock(15, y, x, SimpleBlock.GRANITE);
+      }
+    }
+    */
+
+    experience = createExpPackets();
+    captchaPosAndLook = createPlayerPosAndLookPacket(captchaCoords.X, captchaCoords.Y, captchaCoords.Z);
+    authPosAndLook = createPlayerPosAndLookPacket(authCoords.X, authCoords.Y, authCoords.Z);
+    captchaView = createUpdateViewPosition(captchaCoords.X, captchaCoords.Z);
+    authView = createUpdateViewPosition(authCoords.X, authCoords.Z);
+
+    joinPacket = createJoinGamePacket();
+    legacyJoinPacket = createLegacyJoinGamePacket();
+    staticWorldPacket = createChunksPackets(60);
+
+    noAbilities = createAbilitiesPacket();
+    alreadyConnected = createDisconnectPacket(Settings.IMP.MESSAGES.VELOCITY.ERROR.ALREADY_CONNECTED_PROXY);
+    tooBigPacket = createDisconnectPacket(Settings.IMP.ANTIBOT.STRINGS.TOO_BIG_PACKET);
+    captchaFailed = createDisconnectPacket(Settings.IMP.ANTIBOT.STRINGS.CAPTCHA_FAILED);
+    fallingCheckFailed = createDisconnectPacket(Settings.IMP.ANTIBOT.STRINGS.FALLING_CHECK_FAILED);
+    setSlot = createSetSlotPacket(0, 36, 358, 1, 0);
+    resetSlot = createSetSlotPacket(0, 36, -1, 0, 0);
+
+    checkingChat = createChatPacket(Settings.IMP.ANTIBOT.STRINGS.CHECKING);
+    checkingCaptchaChat = createChatPacket(Settings.IMP.ANTIBOT.STRINGS.CHECKING_CAPTCHA);
+    loginChat = createChatPacket(Settings.IMP.AUTH.STRINGS.LOGIN);
+    registerChat = createChatPacket(Settings.IMP.AUTH.STRINGS.REGISTER);
+    wrongPasswordChat = createChatPacket(Settings.IMP.AUTH.STRINGS.PASSWORD_WRONG);
+    wrongPassword = createDisconnectPacket(Settings.IMP.AUTH.STRINGS.PASSWORD_WRONG);
+    nicknamePremium = createDisconnectPacket(Settings.IMP.AUTH.STRINGS.NICKNAME_PREMIUM);
+    nicknameInvalid = createDisconnectPacket(Settings.IMP.AUTH.STRINGS.NICKNAME_INVALID);
+    successfulBotFilter = createDisconnectPacket(Settings.IMP.ANTIBOT.STRINGS.SUCCESSFUL);
+    successfulAuth = createDisconnectPacket(Settings.IMP.AUTH.STRINGS.SUCCESSFUL);
+    ipLimit = createDisconnectPacket(Settings.IMP.AUTH.STRINGS.IP_LIMIT);
+    brandBuf = createBrandBuf(hardcodedBrandString);
+  }
+
+  private PlayerAbilities createAbilitiesPacket() {
+    return new PlayerAbilities((byte) 6, 0f, 0f);
+  }
+
+  private JoinGame createJoinGamePacket() {
+    DimensionRegistry dimensionRegistry = new DimensionRegistry(ImmutableSet.of(dimension), ImmutableSet.of(key));
+
+    JoinGame joinGame = new JoinGame();
+    joinGame.setEntityId(0);
+    joinGame.setGamemode((short) 2);
+    joinGame.setPreviousGamemode((short) 2);
+    joinGame.setDimension(dimensionId);
+    joinGame.setDifficulty((short) 0);
+    joinGame.setMaxPlayers(1);
+    joinGame.setPartialHashedSeed(System.currentTimeMillis());
+    joinGame.setLevelType("flat");
+    joinGame.setViewDistance(4);
+    joinGame.setReducedDebugInfo(true);
+    joinGame.setIsHardcore(Settings.IMP.ANTIBOT.BOTFILTER_DIMENSION.HARDCORE_HEARTS);
+    joinGame.setDimensionRegistry(dimensionRegistry);
+    joinGame.setDimensionInfo(new DimensionInfo(key, key, false, false));
+    joinGame.setCurrentDimensionData(dimension);
+    joinGame.setBiomeRegistry(Biome.getRegistry());
+    return joinGame;
+  }
+
+  private JoinGame createLegacyJoinGamePacket() {
+    JoinGame joinGame = createJoinGamePacket();
+    joinGame.setDimension(legacyDimensionId);
+    return joinGame;
+  }
+
+  public PlayerPositionAndLook createPlayerPosAndLookPacket(double x, double y, double z) {
+    return new PlayerPositionAndLook(x, y, z, 0f, 0f, -133, false, true);
+  }
+
+  private List<ChunkData> createChunksPackets(int skyLightY) {
+    List<ChunkData> packets = new ArrayList<>();
+    for (SimpleChunk chunk : virtualWorld.getChunks()) {
+      packets.add(createChunkDataPacket(chunk, skyLightY));
+    }
+    return packets;
+  }
+
+  private List<SetExp> createExpPackets() {
+    List<SetExp> packets = new ArrayList<>();
+    long ticks = BotFilterSessionHandler.TOTAL_TICKS;
+    float expInterval = 1f / (float) ticks;
+    for (int i = 0; i < ticks; ++i) {
+      packets.add(new SetExp(i * expInterval, i, 0));
+    }
+    return packets;
+  }
+
+  public ChunkData createChunkDataPacket(SimpleChunk chunk, int skyLightY) {
+    chunk.setSkyLight(chunk.getX() % 16, skyLightY, chunk.getZ() % 16, (byte) 1);
+    return new ChunkData(chunk.getFullChunkSnapshot(), true);
+  }
+
+  public UpdateViewPosition createUpdateViewPosition(int x, int z) {
+    return new UpdateViewPosition(Math.floorDiv(x, 16), Math.floorDiv(z, 16));
+  }
+
+  private SetSlot createSetSlotPacket(int windowId, int slot, int item, int count, int data) {
+    return new SetSlot(windowId, slot, item, count, data);
+  }
+
+  public PluginMessage getBotFilterBrand() {
+    return createBrandPacket(brandBuf.copy());
+  }
+
+  private PluginMessage createBrandPacket(ByteBuf brandBuf) {
+    return new PluginMessage("MC|Brand", brandBuf);
+  }
+
+  private ByteBuf createBrandBuf(String brand) {
+    ByteBuf brandBuf = ByteBufAllocator.DEFAULT.heapBuffer();
+    ProtocolUtils.writeString(brandBuf, brand);
+    return brandBuf;
+  }
+
+  private Chat createChatPacket(String text) {
+    return new Chat(
+      ProtocolUtils.getJsonChatSerializer(ProtocolVersion.MINIMUM_VERSION).serialize(
+        LegacyComponentSerializer
+          .legacyAmpersand()
+          .deserialize(text)
+      ), Chat.CHAT_TYPE, null
+    );
+  }
+
+  private Disconnect createDisconnectPacket(String message) {
+    Component component = LegacyComponentSerializer.legacyAmpersand().deserialize(message);
+    return Disconnect.create(component, ProtocolVersion.MINIMUM_VERSION);
+  }
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/VirtualServer.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/VirtualServer.java
similarity index 50%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/VirtualServer.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/VirtualServer.java
index d9b75a41..5dc6ce52 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/VirtualServer.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/VirtualServer.java
@@ -17,54 +17,57 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.server;
+package net.elytrium.elytraproxy.virtual.server;
 
+import com.velocitypowered.api.network.ProtocolVersion;
 import com.velocitypowered.proxy.connection.MinecraftConnection;
+import com.velocitypowered.proxy.connection.MinecraftSessionHandler;
 import com.velocitypowered.proxy.connection.client.ConnectedPlayer;
 import com.velocitypowered.proxy.protocol.StateRegistry;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.ConcurrentMap;
 import lombok.Getter;
 import net.elytrium.elytraproxy.ElytraProxy;
-import net.elytrium.elytraproxy.botfilter.protocol.cache.PacketCompressor;
 
-public class VirtualServer {
+public class VirtualServer implements MinecraftSessionHandler {
 
   @Getter
   private final ElytraProxy elytraProxy;
-  private final ConcurrentMap<String, BotFilterSessionHandler>
-      activeConnections = new ConcurrentHashMap<>();
+  @Getter
   private final ServerPackets packets;
 
   public VirtualServer(ElytraProxy elytraProxy) {
     this.elytraProxy = elytraProxy;
-    this.packets = new ServerPackets(
-        new PacketCompressor(elytraProxy.getVelocityServer()::getConfiguration), this);
+    this.packets = new ServerPackets(this);
   }
 
   public void reload() {
-    for (BotFilterSessionHandler session : activeConnections.values()) {
-      session.getPlayer().getConnection().close();
-    }
     packets.createPackets();
   }
 
-  public void spawnPlayer(BotFilterSessionHandler user) {
-    String username = user.getPlayer().getUsername().toLowerCase();
-    ConnectedPlayer player = user.getPlayer();
+  public void spawnPlayer(VirtualSessionHandler handler) {
+    ConnectedPlayer player = handler.getPlayer();
+    MinecraftConnection connection = player.getConnection();
+    connection.setSessionHandler(handler);
+    handler.onSpawn();
+  }
+
+  public void sendJoinPacket(VirtualSessionHandler handler) {
+    ConnectedPlayer player = handler.getPlayer();
     MinecraftConnection connection = player.getConnection();
-    if (activeConnections.putIfAbsent(username, user) != null) {
-      connection.closeWith(packets.getAlreadyConnected());
-      //user.closeWith(preparedPackets.getAlreadyConnected());
-      return;
+
+    if (connection.getProtocolVersion().isBefore(ProtocolVersion.MINECRAFT_1_16)) {
+      connection.write(packets.getLegacyJoinPacket());
+    } else {
+      connection.write(packets.getJoinPacket());
     }
-    user.getOriginalHandler().completeLoginProtocol(player, false);
-    connection.setState(StateRegistry.BotFilter);
-    packets.getSpawnPackets().write(connection, player.isOnlineMode());
-    connection.flush();
   }
 
-  public void disconnected(BotFilterSessionHandler botFilterConnection) {
-    activeConnections.remove(botFilterConnection.getPlayer().getUsername().toLowerCase());
+  public void loginComplete(VirtualSessionHandler handler) {
+    ConnectedPlayer player = handler.getPlayer();
+    MinecraftConnection connection = player.getConnection();
+
+    if (connection.getState() != StateRegistry.VIRTUAL) {
+      connection.setState(StateRegistry.VIRTUAL);
+      sendJoinPacket(handler);
+    }
   }
 }
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/VirtualSessionHandler.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/VirtualSessionHandler.java
new file mode 100644
index 00000000..8bbe8cc1
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/VirtualSessionHandler.java
@@ -0,0 +1,61 @@
+/*
+ * Copyright (C) 2021 Elytrium
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.virtual.server;
+
+import com.velocitypowered.proxy.connection.MinecraftSessionHandler;
+import com.velocitypowered.proxy.connection.client.ConnectedPlayer;
+import java.util.Locale;
+import lombok.Getter;
+import net.elytrium.elytraproxy.virtual.protocol.packet.Player;
+import net.elytrium.elytraproxy.virtual.protocol.packet.PlayerPosition;
+import net.elytrium.elytraproxy.virtual.protocol.packet.PlayerPositionAndLook;
+import net.elytrium.elytraproxy.virtual.protocol.packet.TeleportConfirm;
+
+@Getter
+public abstract class VirtualSessionHandler implements MinecraftSessionHandler {
+  public final ConnectedPlayer player;
+  public final MinecraftSessionHandler originalHandler;
+  public final VirtualServer virtualServer;
+  public final String nickname;
+
+  public VirtualSessionHandler(
+      ConnectedPlayer player, MinecraftSessionHandler originalHandler, VirtualServer virtualServer) {
+    this.player = player;
+    this.originalHandler = originalHandler;
+    this.virtualServer = virtualServer;
+    this.nickname = player.getUsername().toLowerCase(Locale.ROOT);
+  }
+
+  public abstract void onSpawn();
+
+  public boolean handle(Player packet) {
+    return false;
+  }
+
+  public boolean handle(PlayerPosition packet) {
+    return false;
+  }
+
+  public boolean handle(PlayerPositionAndLook packet) {
+    return false;
+  }
+
+  public boolean handle(TeleportConfirm packet) {
+    return false;
+  }
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/world/SimpleBlock.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/SimpleBlock.java
similarity index 87%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/world/SimpleBlock.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/SimpleBlock.java
index fe06742f..c041013e 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/world/SimpleBlock.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/SimpleBlock.java
@@ -17,18 +17,18 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.server.world;
-
-import static net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.BlockInfo.fallback;
-import static net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.BlockInfo.info;
-import static net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.Version.MINECRAFT_1_13;
-import static net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.Version.MINECRAFT_1_13_1;
-import static net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.Version.MINECRAFT_1_14;
-import static net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.Version.MINECRAFT_1_16;
-import static net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.Version.MINECRAFT_1_16_2;
-import static net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.Version.MINECRAFT_1_17;
-import static net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.Version.MINECRAFT_1_7;
-import static net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.Version.MINECRAFT_1_8;
+package net.elytrium.elytraproxy.virtual.server.world;
+
+import static net.elytrium.elytraproxy.virtual.server.world.SimpleBlock.BlockInfo.fallback;
+import static net.elytrium.elytraproxy.virtual.server.world.SimpleBlock.BlockInfo.info;
+import static net.elytrium.elytraproxy.virtual.server.world.SimpleBlock.Version.MINECRAFT_1_13;
+import static net.elytrium.elytraproxy.virtual.server.world.SimpleBlock.Version.MINECRAFT_1_13_1;
+import static net.elytrium.elytraproxy.virtual.server.world.SimpleBlock.Version.MINECRAFT_1_14;
+import static net.elytrium.elytraproxy.virtual.server.world.SimpleBlock.Version.MINECRAFT_1_16;
+import static net.elytrium.elytraproxy.virtual.server.world.SimpleBlock.Version.MINECRAFT_1_16_2;
+import static net.elytrium.elytraproxy.virtual.server.world.SimpleBlock.Version.MINECRAFT_1_17;
+import static net.elytrium.elytraproxy.virtual.server.world.SimpleBlock.Version.MINECRAFT_1_7;
+import static net.elytrium.elytraproxy.virtual.server.world.SimpleBlock.Version.MINECRAFT_1_8;
 
 import com.velocitypowered.api.network.ProtocolVersion;
 import java.util.Arrays;
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/world/VirtualWorld.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/VirtualWorld.java
similarity index 81%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/world/VirtualWorld.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/VirtualWorld.java
index e92d6019..008561e8 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/world/VirtualWorld.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/VirtualWorld.java
@@ -17,9 +17,10 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.server.world;
+package net.elytrium.elytraproxy.virtual.server.world;
 
 import com.google.common.collect.ImmutableList;
+import com.velocitypowered.proxy.connection.registry.DimensionData;
 import com.velocitypowered.proxy.connection.registry.DimensionInfo;
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.util.HashMap;
@@ -29,26 +30,25 @@ import java.util.function.Function;
 import java.util.function.Supplier;
 import lombok.Getter;
 import lombok.NonNull;
-import net.elytrium.elytraproxy.botfilter.protocol.data.registry.Biome;
-import net.elytrium.elytraproxy.botfilter.protocol.data.registry.Dimension;
+import net.elytrium.elytraproxy.virtual.protocol.data.registry.Biome;
+import net.elytrium.elytraproxy.virtual.server.world.chunk.SimpleChunk;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
-import net.elytrium.elytraproxy.botfilter.server.world.chunk.SimpleChunk;
 
 public class VirtualWorld {
 
   @NonNull
   @Getter
-  private final Dimension dimension;
+  private final DimensionData dimension;
   @NonNull
   @Getter
   private final DimensionInfo dimensionInfo;
   private final Map<Long, SimpleChunk> chunks = new HashMap<>();
 
-  public VirtualWorld(@NonNull Dimension dimension, @NonNull DimensionInfo dimensionInfo) {
+  public VirtualWorld(@NonNull DimensionData dimension, @NonNull DimensionInfo dimensionInfo, int x, int z) {
     this.dimension = dimension;
     this.dimensionInfo = dimensionInfo;
-    getChunkOrNew(0, 0);
+    getChunkOrNew(x, z);
   }
 
   public void setBlock(int x, int y, int z, @Nullable SimpleBlock block) {
@@ -71,7 +71,7 @@ public class VirtualWorld {
   }
 
   public Biome getBiome(int x, int y, int z) {
-    return chunkAction(x, z, (c) -> c.getBiome(x, y, z), () -> Biome.PLAINTS);
+    return chunkAction(x, z, (c) -> c.getBiome(x, y, z), () -> Biome.PLAINS);
   }
 
   public byte getBlockLight(int x, int y, int z) {
@@ -83,15 +83,6 @@ public class VirtualWorld {
     getChunkOrNew(x, z).setBlockLight(getChunkCoordinate(x), y, getChunkCoordinate(z), light);
   }
 
-  public byte getSkyLight(int x, int y, int z) {
-    return chunkAction(x, z,
-        (c) -> c.getSkyLight(getChunkCoordinate(x), y, getChunkCoordinate(z)), () -> (byte) 0);
-  }
-
-  public void setSkyLight(int x, int y, int z, byte light) {
-    getChunkOrNew(x, z).setSkyLight(getChunkCoordinate(x), y, getChunkCoordinate(z), light);
-  }
-
   public List<SimpleChunk> getChunks() {
     return ImmutableList.copyOf(chunks.values());
   }
@@ -115,7 +106,7 @@ public class VirtualWorld {
     long index = getChunkIndex(x, z);
     SimpleChunk simpleChunk = chunks.get(index);
     if (simpleChunk == null) {
-      chunks.put(index, simpleChunk = new SimpleChunk(this, x, z));
+      chunks.put(index, simpleChunk = new SimpleChunk(x, z));
     }
     return simpleChunk;
   }
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/world/chunk/ChunkSnapshot.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/ChunkSnapshot.java
similarity index 86%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/world/chunk/ChunkSnapshot.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/ChunkSnapshot.java
index 385bf6e9..9c2c3ca4 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/world/chunk/ChunkSnapshot.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/ChunkSnapshot.java
@@ -17,12 +17,12 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.server.world.chunk;
+package net.elytrium.elytraproxy.virtual.server.world.chunk;
 
 import lombok.Getter;
 import lombok.RequiredArgsConstructor;
-import net.elytrium.elytraproxy.botfilter.protocol.data.registry.Biome;
-import net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock;
+import net.elytrium.elytraproxy.virtual.protocol.data.registry.Biome;
+import net.elytrium.elytraproxy.virtual.server.world.SimpleBlock;
 
 @RequiredArgsConstructor
 @Getter
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/world/chunk/LightSection.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/LightSection.java
similarity index 95%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/world/chunk/LightSection.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/LightSection.java
index a39a8098..7c899885 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/world/chunk/LightSection.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/LightSection.java
@@ -17,14 +17,14 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.server.world.chunk;
+package net.elytrium.elytraproxy.virtual.server.world.chunk;
 
 import com.google.common.base.Preconditions;
 import lombok.AccessLevel;
 import lombok.AllArgsConstructor;
 import lombok.Getter;
 import lombok.NoArgsConstructor;
-import net.elytrium.elytraproxy.botfilter.protocol.util.mcprotocollib.NibbleArray3d;
+import net.elytrium.elytraproxy.virtual.protocol.util.mcprotocollib.NibbleArray3d;
 
 @AllArgsConstructor(access = AccessLevel.PRIVATE)
 @NoArgsConstructor
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/world/chunk/SimpleChunk.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/SimpleChunk.java
similarity index 91%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/world/chunk/SimpleChunk.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/SimpleChunk.java
index db6ca3a7..db6a8cca 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/world/chunk/SimpleChunk.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/SimpleChunk.java
@@ -17,7 +17,7 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.server.world.chunk;
+package net.elytrium.elytraproxy.virtual.server.world.chunk;
 
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.util.Arrays;
@@ -25,9 +25,8 @@ import java.util.function.Function;
 import java.util.function.Supplier;
 import lombok.Getter;
 import lombok.NonNull;
-import net.elytrium.elytraproxy.botfilter.protocol.data.registry.Biome;
-import net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock;
-import net.elytrium.elytraproxy.botfilter.server.world.VirtualWorld;
+import net.elytrium.elytraproxy.virtual.protocol.data.registry.Biome;
+import net.elytrium.elytraproxy.virtual.server.world.SimpleBlock;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
@@ -36,8 +35,6 @@ public class SimpleChunk {
 
   public static final int MAX_BLOCKS_PER_SECTION = 16 * 16 * 16;
 
-  @Getter
-  private final VirtualWorld world;
   @Getter
   private final int x;
   @Getter
@@ -46,11 +43,10 @@ public class SimpleChunk {
   private final LightSection[] light = new LightSection[18];
   private final Biome[] biomes = new Biome[1024];
 
-  public SimpleChunk(VirtualWorld world, int x, int z) {
-    this.world = world;
+  public SimpleChunk(int x, int z) {
     this.x = x;
     this.z = z;
-    Arrays.fill(biomes, Biome.PLAINTS);
+    Arrays.fill(biomes, Biome.PLAINS);
     //Arrays.fill(light, LightSection.DEFAULT);
   }
 
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/world/chunk/SimpleSection.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/SimpleSection.java
similarity index 88%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/world/chunk/SimpleSection.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/SimpleSection.java
index 1a062bd0..5825c7c0 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/world/chunk/SimpleSection.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/SimpleSection.java
@@ -17,15 +17,15 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.server.world.chunk;
+package net.elytrium.elytraproxy.virtual.server.world.chunk;
 
 import com.google.common.base.Preconditions;
 import lombok.AllArgsConstructor;
 import lombok.Getter;
 import lombok.RequiredArgsConstructor;
-import net.elytrium.elytraproxy.botfilter.protocol.data.storage.BlockStorage;
-import net.elytrium.elytraproxy.botfilter.protocol.data.storage.BlockStorage19;
-import net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock;
+import net.elytrium.elytraproxy.virtual.protocol.data.storage.BlockStorage;
+import net.elytrium.elytraproxy.virtual.protocol.data.storage.BlockStorage19;
+import net.elytrium.elytraproxy.virtual.server.world.SimpleBlock;
 import org.jetbrains.annotations.Nullable;
 
 @RequiredArgsConstructor
diff --git a/proxy/src/test/java/com/velocitypowered/proxy/util/ratelimit/GuavaCacheRatelimiterTest.java b/proxy/src/test/java/com/velocitypowered/proxy/util/ratelimit/GuavaCacheRatelimiterTest.java
index 7ed4618e..90508ee0 100644
--- a/proxy/src/test/java/com/velocitypowered/proxy/util/ratelimit/GuavaCacheRatelimiterTest.java
+++ b/proxy/src/test/java/com/velocitypowered/proxy/util/ratelimit/GuavaCacheRatelimiterTest.java
@@ -30,6 +30,8 @@ class GuavaCacheRatelimiterTest {
 
   @Test
   void attemptZero() {
+    // BotFilter BackPort Start: Global ip rate limiter
+    //Ratelimiter noRatelimiter = new GuavaCacheRatelimiter(0, TimeUnit.MILLISECONDS);
     Ratelimiter noRatelimiter = Ratelimiters.createWithMilliseconds(0, 0);
     assertTrue(noRatelimiter.attempt(InetAddress.getLoopbackAddress()));
     assertTrue(noRatelimiter.attempt(InetAddress.getLoopbackAddress()));
@@ -39,6 +41,7 @@ class GuavaCacheRatelimiterTest {
     noRatelimiter = Ratelimiters.createWithMilliseconds(20, 0);
     assertTrue(noRatelimiter.attempt(InetAddress.getLoopbackAddress()));
     assertTrue(noRatelimiter.attempt(InetAddress.getLoopbackAddress()));
+    // BotFilter BackPort End
   }
 
   @Test
@@ -51,6 +54,8 @@ class GuavaCacheRatelimiterTest {
         return base + extra.get();
       }
     };
+    // BotFilter BackPort Start: Global ip rate limiter
+    //Ratelimiter ratelimiter = new GuavaCacheRatelimiter(1000, TimeUnit.MILLISECONDS, testTicker);
     Ratelimiter ratelimiter = new GuavaCacheRatelimiter(1000, 3, TimeUnit.MILLISECONDS, testTicker);
     assertTrue(ratelimiter.attempt(InetAddress.getLoopbackAddress()));
     assertTrue(ratelimiter.attempt(InetAddress.getLoopbackAddress()));
@@ -96,5 +101,6 @@ class GuavaCacheRatelimiterTest {
     assertTrue(ratelimiter.attempt(InetAddress.getLoopbackAddress()));
     assertFalse(ratelimiter.attempt(InetAddress.getLoopbackAddress()));
   }
+  // BotFilter BackPort End
 
 }
-- 
2.24.1.windows.2

