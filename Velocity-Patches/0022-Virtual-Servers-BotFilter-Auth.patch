From 6fc179b79d3e7eb6cc01f8af5b41a642698b0113 Mon Sep 17 00:00:00 2001
From: Petr Ilin <hevav@hevav.dev>
Date: Thu, 24 Jun 2021 15:01:38 +0900
Subject: [PATCH] Virtual Servers, BotFilter, Auth

Signed-off-by: Petr Ilin <hevav@hevav.dev>

diff --git a/.gitignore b/.gitignore
index 2ffb4fd0..fbdf3cea 100644
--- a/.gitignore
+++ b/.gitignore
@@ -84,7 +84,7 @@ logs/
 server-icon.png
 /bin/
 run/
-#plugins/
+plugins/
 
 ### Natives stuff ###
 native/mbedtls
diff --git a/api/build.gradle b/api/build.gradle
index 368004ab..b074ecce 100644
--- a/api/build.gradle
+++ b/api/build.gradle
@@ -37,11 +37,12 @@ dependencies {
     api("net.kyori:adventure-text-serializer-legacy")
     api("net.kyori:adventure-text-serializer-plain")
 
-    // ElytraProxy: Revert deprecated kyori dependencies for backward compatibility
+    // ElytraProxy Start: Revert deprecated kyori dependencies for backward compatibility
     api "net.kyori:text-api:${textVersion}"
     api "net.kyori:text-serializer-gson:${textVersion}"
     api "net.kyori:text-serializer-legacy:${textVersion}"
     api "net.kyori:text-serializer-plain:${textVersion}"
+    // ElytraProxy End
 
     api "org.slf4j:slf4j-api:${slf4jVersion}"
     api 'com.google.inject:guice:5.0.1'
diff --git a/api/src/main/java/com/velocitypowered/api/network/ProtocolVersion.java b/api/src/main/java/com/velocitypowered/api/network/ProtocolVersion.java
index a24b9229..0070c5ba 100644
--- a/api/src/main/java/com/velocitypowered/api/network/ProtocolVersion.java
+++ b/api/src/main/java/com/velocitypowered/api/network/ProtocolVersion.java
@@ -22,7 +22,10 @@ import java.util.Set;
 public enum ProtocolVersion {
   UNKNOWN(-1, "Unknown"),
   LEGACY(-2, "Legacy"),
+
+  // ElytraProxy: Maintenance mode
   MAINTENANCE(-99, "Maintenance"),
+
   MINECRAFT_1_7_2(4,
           "1.7.2", "1.7.3", "1.7.4", "1.7.5"),
   MINECRAFT_1_7_6(5,
@@ -232,7 +235,7 @@ public enum ProtocolVersion {
     return this == LEGACY;
   }
 
-  //BotFilter start
+  // BotFilter BackPort Start
   public boolean isBefore(ProtocolVersion other) {
     return this.compareTo(other) < 0;
   }
@@ -248,12 +251,11 @@ public enum ProtocolVersion {
   public boolean isAfterOrEq(ProtocolVersion other) {
     return this.compareTo(other) >= 0;
   }
-  //BotFilter add
 
   public static ProtocolVersion adapt(int protocol) {
     return ID_TO_PROTOCOL_CONSTANT.get(protocol);
   }
-  //BotFilter end
+  // BotFilter BackPort End
 
   @Override
   public String toString() {
diff --git a/api/src/main/java/com/velocitypowered/api/proxy/config/ProxyConfig.java b/api/src/main/java/com/velocitypowered/api/proxy/config/ProxyConfig.java
index 262e21bd..7ec5bdd0 100644
--- a/api/src/main/java/com/velocitypowered/api/proxy/config/ProxyConfig.java
+++ b/api/src/main/java/com/velocitypowered/api/proxy/config/ProxyConfig.java
@@ -121,12 +121,14 @@ public interface ProxyConfig {
    */
   int getLoginRatelimit();
 
+  // BotFilter BackPort Start
   /**
    * Get the limit for how many times a player must login before rate limit will work.
    *
    * @return the max join attempts before rate limiting
    */
   int getLoginRatelimitAttempts();
+  // BotFilter BackPort End
 
   /**
    * Get the proxy favicon shown in the tablist.
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index 01b8bf6b1f99cad9213fc495b33ad5bbab8efd20..7454180f2ae8848c63b8b4dea2cb829da983f2fa 100644
GIT binary patch
literal 59536
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
QuEJmfE|#`Dqx|px0L@K;Y5)KL

literal 54329
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
F{{fV+={5iW

diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 4e8b1495..05679dc3 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,5 @@
-#Mon Jul 23 20:52:34 EDT 2018
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-7.1.1-bin.zip
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-7.1-all.zip
diff --git a/gradlew b/gradlew
index cccdd3d5..744e882e 100755
--- a/gradlew
+++ b/gradlew
@@ -1,5 +1,21 @@
 #!/usr/bin/env sh
 
+#
+# Copyright 2015 the original author or authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      https://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
 ##############################################################################
 ##
 ##  Gradle start up script for UN*X
@@ -28,7 +44,7 @@ APP_NAME="Gradle"
 APP_BASE_NAME=`basename "$0"`
 
 # Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-DEFAULT_JVM_OPTS=""
+DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'
 
 # Use the maximum available, or set MAX_FD != -1 to use that value.
 MAX_FD="maximum"
@@ -56,7 +72,7 @@ case "`uname`" in
   Darwin* )
     darwin=true
     ;;
-  MINGW* )
+  MSYS* | MINGW* )
     msys=true
     ;;
   NONSTOP* )
@@ -66,6 +82,7 @@ esac
 
 CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
 
+
 # Determine the Java command to use to start the JVM.
 if [ -n "$JAVA_HOME" ] ; then
     if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
@@ -109,10 +126,11 @@ if $darwin; then
     GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
 fi
 
-# For Cygwin, switch paths to Windows format before running java
-if $cygwin ; then
+# For Cygwin or MSYS, switch paths to Windows format before running java
+if [ "$cygwin" = "true" -o "$msys" = "true" ] ; then
     APP_HOME=`cygpath --path --mixed "$APP_HOME"`
     CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+
     JAVACMD=`cygpath --unix "$JAVACMD"`
 
     # We build the pattern for arguments to be converted via cygpath
@@ -138,19 +156,19 @@ if $cygwin ; then
         else
             eval `echo args$i`="\"$arg\""
         fi
-        i=$((i+1))
+        i=`expr $i + 1`
     done
     case $i in
-        (0) set -- ;;
-        (1) set -- "$args0" ;;
-        (2) set -- "$args0" "$args1" ;;
-        (3) set -- "$args0" "$args1" "$args2" ;;
-        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
-        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
-        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
-        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
-        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
-        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
+        0) set -- ;;
+        1) set -- "$args0" ;;
+        2) set -- "$args0" "$args1" ;;
+        3) set -- "$args0" "$args1" "$args2" ;;
+        4) set -- "$args0" "$args1" "$args2" "$args3" ;;
+        5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
+        6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
+        7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
+        8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
+        9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
     esac
 fi
 
@@ -159,14 +177,9 @@ save () {
     for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
     echo " "
 }
-APP_ARGS=$(save "$@")
+APP_ARGS=`save "$@"`
 
 # Collect all arguments for the java command, following the shell quoting and substitution rules
 eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"
 
-# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong
-if [ "$(uname)" = "Darwin" ] && [ "$HOME" = "$PWD" ]; then
-  cd "$(dirname "$0")"
-fi
-
 exec "$JAVACMD" "$@"
diff --git a/gradlew.bat b/gradlew.bat
index f9553162..107acd32 100644
--- a/gradlew.bat
+++ b/gradlew.bat
@@ -1,3 +1,19 @@
+@rem
+@rem Copyright 2015 the original author or authors.
+@rem
+@rem Licensed under the Apache License, Version 2.0 (the "License");
+@rem you may not use this file except in compliance with the License.
+@rem You may obtain a copy of the License at
+@rem
+@rem      https://www.apache.org/licenses/LICENSE-2.0
+@rem
+@rem Unless required by applicable law or agreed to in writing, software
+@rem distributed under the License is distributed on an "AS IS" BASIS,
+@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+@rem See the License for the specific language governing permissions and
+@rem limitations under the License.
+@rem
+
 @if "%DEBUG%" == "" @echo off
 @rem ##########################################################################
 @rem
@@ -13,15 +29,18 @@ if "%DIRNAME%" == "" set DIRNAME=.
 set APP_BASE_NAME=%~n0
 set APP_HOME=%DIRNAME%
 
+@rem Resolve any "." and ".." in APP_HOME to make it shorter.
+for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi
+
 @rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-set DEFAULT_JVM_OPTS=
+set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"
 
 @rem Find java.exe
 if defined JAVA_HOME goto findJavaFromJavaHome
 
 set JAVA_EXE=java.exe
 %JAVA_EXE% -version >NUL 2>&1
-if "%ERRORLEVEL%" == "0" goto init
+if "%ERRORLEVEL%" == "0" goto execute
 
 echo.
 echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
@@ -35,7 +54,7 @@ goto fail
 set JAVA_HOME=%JAVA_HOME:"=%
 set JAVA_EXE=%JAVA_HOME%/bin/java.exe
 
-if exist "%JAVA_EXE%" goto init
+if exist "%JAVA_EXE%" goto execute
 
 echo.
 echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
@@ -45,28 +64,14 @@ echo location of your Java installation.
 
 goto fail
 
-:init
-@rem Get command-line arguments, handling Windows variants
-
-if not "%OS%" == "Windows_NT" goto win9xME_args
-
-:win9xME_args
-@rem Slurp the command line arguments.
-set CMD_LINE_ARGS=
-set _SKIP=2
-
-:win9xME_args_slurp
-if "x%~1" == "x" goto execute
-
-set CMD_LINE_ARGS=%*
-
 :execute
 @rem Setup the command line
 
 set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
 
+
 @rem Execute Gradle
-"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*
 
 :end
 @rem End local scope for the variables with windows NT shell
diff --git a/native/src/main/java/com/velocitypowered/natives/compression/JavaVelocityCompressor.java b/native/src/main/java/com/velocitypowered/natives/compression/JavaVelocityCompressor.java
index 37b994ba..0c0c0871 100644
--- a/native/src/main/java/com/velocitypowered/natives/compression/JavaVelocityCompressor.java
+++ b/native/src/main/java/com/velocitypowered/natives/compression/JavaVelocityCompressor.java
@@ -38,7 +38,9 @@ public class JavaVelocityCompressor implements VelocityCompressor {
   private boolean disposed = false;
 
   private JavaVelocityCompressor(int level) {
-    level = Math.min(9, level); //BotFilter
+    // BotFilter Backport
+    level = Math.min(9, level);
+
     this.deflater = new Deflater(level);
     this.inflater = new Inflater();
   }
diff --git a/proxy/build.gradle b/proxy/build.gradle
index 578a56e5..4540796e 100644
--- a/proxy/build.gradle
+++ b/proxy/build.gradle
@@ -10,12 +10,19 @@ apply from: '../gradle/checkstyle.gradle'
 apply plugin: 'com.github.johnrengelman.shadow'
 
 license {
+    // ElytraProxy Start: Add licenses
     matching(includes: ['**/elytraproxy/**']) {
         header = project.rootProject.file('HEADER_ELYTRAPROXY.txt')
     }
     matching(includes: ['**/elytraproxy/config/helpers/**']) {
         header = project.rootProject.file('HEADER_BUNGEECORD.txt')
     }
+    matching(includes: ['**/virtual/**']) {
+        header = project.rootProject.file('HEADER_BOTFILTER.txt')
+    }
+    matching(includes: ['**/virtual/server/VirtualSessionHandler.java']) {
+        header = project.rootProject.file('HEADER_ELYTRAPROXY.txt')
+    }
     matching(includes: ['**/botfilter/**']) {
         header = project.rootProject.file('HEADER_BOTFILTER.txt')
     }
@@ -25,6 +32,7 @@ license {
     matching(includes: ['**/ElytraProxyCommand.java']) {
         header = project.rootProject.file('HEADER.txt')
     }
+    // ElytraProxy End
     header = project.rootProject.file('HEADER.txt')
 }
 
@@ -39,9 +47,9 @@ jar {
         }
 
         attributes 'Main-Class': 'com.velocitypowered.proxy.Velocity'
-        attributes 'Implementation-Title': "ElytraProxy"
+        attributes 'Implementation-Title': /*"Velocity"*/"ElytraProxy"
         attributes 'Implementation-Version': version
-        attributes 'Implementation-Vendor': "Velocity Contributors, ElytraProxy Contributors"
+        attributes 'Implementation-Vendor': "Velocity Contributors, ElytraProxy Contributors" // ElytraProxy
         attributes 'Multi-Release': 'true'
     }
 }
@@ -52,25 +60,31 @@ shadowJar {
 
 tasks.withType(Checkstyle) {
     exclude('**/com/velocitypowered/proxy/protocol/packet/*.java')
+
+    // ElytraProxy
     exclude('**/net/elytrium/elytraproxy/botfilter/**') // temp
+    exclude('**/net/elytrium/elytraproxy/virtual/**') // temp
     exclude('**/net/elytrium/elytraproxy/config/Settings.java')
 }
 
 dependencies {
-    // BotFilter backport: Add lombok
+    // BotFilter Backport Start: Add lombok
     compileOnly 'org.projectlombok:lombok:1.18.20'
     annotationProcessor 'org.projectlombok:lombok:1.18.20'
 
     testCompileOnly 'org.projectlombok:lombok:1.18.20'
     testAnnotationProcessor 'org.projectlombok:lombok:1.18.20'
+    // BotFilter Backport End
 
-    // Note: we depend on the API twice, first the main sourceset, and then the annotation processor.
-    implementation project(':elytraproxy-api')
-    implementation project(':elytraproxy-api').sourceSets.ap.output
-    implementation project(':elytraproxy-native')
-
-    // ElytraProxy
+    // ElytraProxy Start
     implementation "org.mariadb.jdbc:mariadb-java-client:2.7.3"
+    implementation 'at.favre.lib:bcrypt:0.9.0'
+
+    // Note: we depend on the API twice, first the main sourceset, and then the annotation processor.
+    implementation project(/*':velocity-api'*/':elytraproxy-api')
+    implementation project(/*':velocity-api'*/':elytraproxy-api').sourceSets.ap.output
+    implementation project(/*':velocity-native'*/':elytraproxy-native')
+    // ElytraProxy End
 
     implementation "io.netty:netty-codec:${nettyVersion}"
     implementation "io.netty:netty-codec-haproxy:${nettyVersion}"
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/Metrics.java b/proxy/src/main/java/com/velocitypowered/proxy/Metrics.java
index 5e4bf99a..84ec1021 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/Metrics.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/Metrics.java
@@ -18,11 +18,13 @@
 package com.velocitypowered.proxy;
 
 import com.velocitypowered.proxy.config.VelocityConfiguration;
+
 import java.io.File;
 import java.io.IOException;
 import java.nio.file.Paths;
 import java.util.HashMap;
 import java.util.Map;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.bstats.MetricsBase;
@@ -87,11 +89,12 @@ public class Metrics {
   }
 
   private void appendPlatformData(JsonObjectBuilder builder) {
-    // ElytraProxy
-    builder.appendField("osName", "ElytraProxy Fork");
-    builder.appendField("osArch", "ElytraProxy Fork");
-    builder.appendField("osVersion", "ElytraProxy Fork");
-    builder.appendField("coreCount", "ElytraProxy Fork");
+    // ElytraProxy Start
+    builder.appendField("osName", /*System.getProperty("os.name")*/"The ElytraProxy Fork");
+    builder.appendField("osArch", /*System.getProperty("os.arch")*/"The ElytraProxy Fork");
+    builder.appendField("osVersion", /*System.getProperty("os.version")*/"The ElytraProxy Fork");
+    builder.appendField("coreCount", /*Runtime.getRuntime().availableProcessors()*/"The ElytraProxy Fork");
+    // ElytraProxy End
   }
 
   static class VelocityMetrics {
@@ -107,20 +110,58 @@ public class Metrics {
       metrics.addCustomChart(
           new SingleLineChart("managed_servers", () -> server.getAllServers().size())
       );
-      // ElytraProxy
+      // ElytraProxy Start
       metrics.addCustomChart(
-          new SimplePie("online_mode", () -> "ElytraProxy Fork")
+          new SimplePie("online_mode",
+              /*() -> server.getConfiguration().isOnlineMode() ? "online" : "offline")*/
+              () -> "The ElytraProxy Fork")
       );
+      /*
+      metrics.addCustomChart(new SimplePie("velocity_version",
+          () -> server.getVersion().getVersion()));
+      */
       metrics.addCustomChart(
-          new SimplePie("velocity_version", () -> "ElytraProxy Fork")
+          new SimplePie("velocity_version", () -> "The ElytraProxy Fork")
       );
+      // ElytraProxy End
 
       metrics.addCustomChart(new DrilldownPie("java_version", () -> {
+        // ElytraProxy Start
+        /*
+        Map<String, Map<String, Integer>> map = new HashMap<>();
+        String javaVersion = System.getProperty("java.version");
+        Map<String, Integer> entry = new HashMap<>();
+        entry.put(javaVersion, 1);
+
+        // http://openjdk.java.net/jeps/223
+        // Java decided to change their versioning scheme and in doing so modified the
+        // java.version system property to return $major[.$minor][.$security][-ea], as opposed to
+        // 1.$major.0_$identifier we can handle pre-9 by checking if the "major" is equal to "1",
+        // otherwise, 9+
+        String majorVersion = javaVersion.split("\\.")[0];
+        String release;
+
+        int indexOf = javaVersion.lastIndexOf('.');
+
+        if (majorVersion.equals("1")) {
+          release = "Java " + javaVersion.substring(0, indexOf);
+        } else {
+          // of course, it really wouldn't be all that simple if they didn't add a quirk, now
+          // would it valid strings for the major may potentially include values such as -ea to
+          // denote a pre release
+          Matcher versionMatcher = Pattern.compile("\\d+").matcher(majorVersion);
+          if (versionMatcher.find()) {
+            majorVersion = versionMatcher.group(0);
+          }
+          release = "Java " + majorVersion;
+        }
+        map.put(release, entry);
+        */
         Map<String, Map<String, Integer>> map = new HashMap<>();
-        // ElytraProxy
         Map<String, Integer> entry = new HashMap<>();
-        entry.put("ElytraProxy Fork", 1);
-        map.put("ElytraProxy Fork", entry);
+        entry.put("The ElytraProxy Fork", 1);
+        map.put("The ElytraProxy Fork", entry);
+        // ElytraProxy End
 
         return map;
       }));
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/ProxyOptions.java b/proxy/src/main/java/com/velocitypowered/proxy/ProxyOptions.java
index 8ac26cda..c80b471a 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/ProxyOptions.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/ProxyOptions.java
@@ -27,7 +27,6 @@ import org.apache.logging.log4j.Logger;
 import org.checkerframework.checker.nullness.qual.Nullable;
 
 public final class ProxyOptions {
-
   private static final Logger logger = LogManager.getLogger(ProxyOptions.class);
   private final boolean help;
   private final @Nullable Integer port;
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/Velocity.java b/proxy/src/main/java/com/velocitypowered/proxy/Velocity.java
index 9d31a75e..fdc14a45 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/Velocity.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/Velocity.java
@@ -70,7 +70,8 @@ public class Velocity {
 
     // ElytraProxy
     logger.warn("PLEASE REPORT ALL BUGS, ERRORS AND JUST NOTES"
-            + " OR SUGGESTIONS ON GITHUB PAGE. (https://github.com/Elytrium/ElytraProxy/issues)");
+        + " OR SUGGESTIONS ON GITHUB PAGE. (https://github.com/Elytrium/ElytraProxy/issues)");
+
     server.getConsoleCommandSource().start();
 
     // If we don't have a console available (because SimpleTerminalConsole returned), then we still
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/VelocityServer.java b/proxy/src/main/java/com/velocitypowered/proxy/VelocityServer.java
index 318363a0..dab1866b 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/VelocityServer.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/VelocityServer.java
@@ -54,9 +54,7 @@ import com.velocitypowered.proxy.protocol.util.GameProfileSerializer;
 import com.velocitypowered.proxy.scheduler.VelocityScheduler;
 import com.velocitypowered.proxy.server.ServerMap;
 import com.velocitypowered.proxy.util.AddressUtil;
-import com.velocitypowered.proxy.util.ClosestLocaleMatcher;
 import com.velocitypowered.proxy.util.EncryptionUtils;
-import com.velocitypowered.proxy.util.FileSystemUtils;
 import com.velocitypowered.proxy.util.VelocityChannelRegistrar;
 import com.velocitypowered.proxy.util.bossbar.AdventureBossBarManager;
 import com.velocitypowered.proxy.util.ratelimit.Ratelimiter;
@@ -80,7 +78,6 @@ import java.util.Locale;
 import java.util.Map;
 import java.util.Objects;
 import java.util.Optional;
-import java.util.ResourceBundle;
 import java.util.UUID;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ConcurrentHashMap;
@@ -96,11 +93,7 @@ import net.elytrium.elytraproxy.ElytraProxy;
 import net.elytrium.elytraproxy.config.Settings;
 import net.kyori.adventure.audience.Audience;
 import net.kyori.adventure.audience.ForwardingAudience;
-import net.kyori.adventure.key.Key;
 import net.kyori.adventure.text.Component;
-import net.kyori.adventure.translation.GlobalTranslator;
-import net.kyori.adventure.translation.TranslationRegistry;
-import net.kyori.adventure.util.UTF8ResourceBundleControl;
 import net.kyori.adventure.text.serializer.gson.GsonComponentSerializer;
 import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
 import org.apache.logging.log4j.LogManager;
@@ -145,16 +138,18 @@ public class VelocityServer implements ProxyServer, ForwardingAudience {
   // ElytraProxy
   @Getter
   private static final Map<UUID, ConnectedPlayer> connectionsByUuid = new ConcurrentHashMap<>();
+
   private final Map<String, ConnectedPlayer> connectionsByName = new ConcurrentHashMap<>();
   private final VelocityConsole console;
   private @MonotonicNonNull Ratelimiter ipAttemptLimiter;
   private final VelocityEventManager eventManager;
   private final VelocityScheduler scheduler;
   private final VelocityChannelRegistrar channelRegistrar = new VelocityChannelRegistrar();
-  // ElytraProxy
+  // ElytraProxy Start
   @Getter
-  private ElytraProxy elytraProxy;
+  private @MonotonicNonNull ElytraProxy elytraProxy;
   private Component maintenanceMotd;
+  // ElytraProxy End
 
   VelocityServer(final ProxyOptions options) {
     pluginManager = new VelocityPluginManager(this);
@@ -184,15 +179,14 @@ public class VelocityServer implements ProxyServer, ForwardingAudience {
     String implVersion;
     String implVendor;
     if (pkg != null) {
-      // ElytraProxy
-      implName = MoreObjects.firstNonNull(pkg.getImplementationTitle(), "ElytraProxy");
+      implName = MoreObjects.firstNonNull(pkg.getImplementationTitle(), /*"Velocity"*/"ElytraProxy");
       implVersion = MoreObjects.firstNonNull(pkg.getImplementationVersion(), "<unknown>");
       implVendor = MoreObjects.firstNonNull(pkg.getImplementationVendor(), "Velocity Contributors,"
-          + " ElytraProxy Contributors");
+          + " ElytraProxy Contributors"); // ElytraProxy
     } else {
-      implName = "ElytraProxy";
+      implName = /*"Velocity"*/"ElytraProxy";
       implVersion = "<unknown>";
-      implVendor = "Velocity Contributors, ElytraProxy Contributors";
+      implVendor = "Velocity Contributors, ElytraProxy Contributors"; // ElytraProxy
     }
 
     return new ProxyVersion(implName, implVendor, implVersion);
@@ -212,9 +206,11 @@ public class VelocityServer implements ProxyServer, ForwardingAudience {
   void start() {
     // ElytraProxy
     logger.info("Booting up {} {}...", getVersion().getName(), Settings.IMP.VERSION);
+
     console.setupStreams();
 
-    registerTranslations();
+    // ElytraProxy: Removed as unnecessary
+    //registerTranslations();
 
     serverKeyPair = EncryptionUtils.createRsaKeyPair(1024);
 
@@ -223,7 +219,7 @@ public class VelocityServer implements ProxyServer, ForwardingAudience {
     // Initialize commands first
 
     // ElytraProxy: Move initialization to ElytraProxy main class
-    // commandManager.register("elytraproxy", new ElytraProxyCommand(this));
+    //commandManager.register("velocity", new VelocityCommand(this));
     commandManager.register("server", new ServerCommand(this));
     commandManager.register("shutdown", new ShutdownCommand(this),"end");
     new GlistCommand(this).register();
@@ -235,7 +231,11 @@ public class VelocityServer implements ProxyServer, ForwardingAudience {
     }
 
     ipAttemptLimiter = Ratelimiters.createWithMilliseconds(configuration.getLoginRatelimit(),
-        configuration.getLoginRatelimitAttempts()); // BotFilter backport: global rate limiter
+        configuration.getLoginRatelimitAttempts()); // BotFilter Backport: Global rate limiter
+
+    // ElytraProxy
+    this.elytraProxy = new ElytraProxy(this);
+
     loadPlugins();
 
     // Go ahead and fire the proxy initialization event. We block since plugins should have a chance
@@ -258,11 +258,11 @@ public class VelocityServer implements ProxyServer, ForwardingAudience {
     }
 
     Metrics.VelocityMetrics.startMetrics(this, configuration.getMetrics());
-
-    // ElytraProxy
-    this.elytraProxy = new ElytraProxy(this);
   }
 
+
+  // ElytraProxy: Removed as unnecessary
+  /*
   private void registerTranslations() {
     final TranslationRegistry translationRegistry = TranslationRegistry
         .create(Key.key("velocity", "translations"));
@@ -304,6 +304,7 @@ public class VelocityServer implements ProxyServer, ForwardingAudience {
     }
     GlobalTranslator.get().addSource(translationRegistry);
   }
+  */
 
   @SuppressFBWarnings("DM_EXIT")
   private void doStartupConfigLoad() {
@@ -457,9 +458,8 @@ public class VelocityServer implements ProxyServer, ForwardingAudience {
     }
 
     commandManager.setAnnounceProxyCommands(newConfiguration.isAnnounceProxyCommands());
-    // BotFilter backport: global rate limiter
     ipAttemptLimiter = Ratelimiters.createWithMilliseconds(newConfiguration.getLoginRatelimit(),
-        newConfiguration.getLoginRatelimitAttempts());
+        newConfiguration.getLoginRatelimitAttempts()); // BotFilter Backport: Global rate limiter
     this.configuration = newConfiguration;
     eventManager.fireAndForget(new ProxyReloadEvent());
     return true;
@@ -469,7 +469,7 @@ public class VelocityServer implements ProxyServer, ForwardingAudience {
    * Shuts down the proxy, kicking players with the specified {@param reason}.
    *
    * @param explicitExit whether the user explicitly shut down the proxy
-   * @param reason message to kick online players with
+   * @param reason       message to kick online players with
    */
   public void shutdown(boolean explicitExit, Component reason) {
     if (eventManager == null || pluginManager == null || cm == null || scheduler == null) {
@@ -500,8 +500,8 @@ public class VelocityServer implements ProxyServer, ForwardingAudience {
           // makes sure that all the disconnect events are being fired
 
           CompletableFuture<Void> playersTeardownFuture = CompletableFuture.allOf(players.stream()
-                  .map(ConnectedPlayer::getTeardownFuture)
-                  .toArray((IntFunction<CompletableFuture<Void>[]>) CompletableFuture[]::new));
+              .map(ConnectedPlayer::getTeardownFuture)
+              .toArray((IntFunction<CompletableFuture<Void>[]>) CompletableFuture[]::new));
 
           playersTeardownFuture.get(10, TimeUnit.SECONDS);
         } catch (TimeoutException e) {
@@ -552,13 +552,12 @@ public class VelocityServer implements ProxyServer, ForwardingAudience {
    * @param explicitExit whether the user explicitly shut down the proxy
    */
   public void shutdown(boolean explicitExit) {
+    // ElytraProxy Start
     shutdown(explicitExit,
         LegacyComponentSerializer
             .legacyAmpersand()
-            .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK.PROXY_SHUTTING_DOWN
-                .replace("{NL}", "\n")
-                .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-            ));
+            .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK.PROXY_SHUTTING_DOWN));
+    // ElytraProxy End
   }
 
   @Override
@@ -650,8 +649,8 @@ public class VelocityServer implements ProxyServer, ForwardingAudience {
     Objects.requireNonNull(partialName);
 
     return getAllPlayers().stream().filter(p -> p.getUsername()
-            .regionMatches(true, 0, partialName, 0, partialName.length()))
-            .collect(Collectors.toList());
+        .regionMatches(true, 0, partialName, 0, partialName.length()))
+        .collect(Collectors.toList());
   }
 
   @Override
@@ -659,8 +658,8 @@ public class VelocityServer implements ProxyServer, ForwardingAudience {
     Objects.requireNonNull(partialName);
 
     return getAllServers().stream().filter(s -> s.getServerInfo().getName()
-            .regionMatches(true, 0, partialName, 0, partialName.length()))
-            .collect(Collectors.toList());
+        .regionMatches(true, 0, partialName, 0, partialName.length()))
+        .collect(Collectors.toList());
   }
 
   @Override
@@ -670,12 +669,13 @@ public class VelocityServer implements ProxyServer, ForwardingAudience {
 
   @Override
   public int getPlayerCount() {
-    // ElytraProxy: Exclude online at servers in list
+    // ElytraProxy Start: Exclude online at servers in list
     return (int) getAllPlayers().stream().filter(p -> p.getCurrentServer()
         .isPresent())
         .filter(p -> !Settings.IMP.MAIN_SETTINGS.IGNORE_ONLINE_AT
             .contains(p.getCurrentServer().get().getServerInfo().getName()))
         .count();
+    // ElytraProxy End
   }
 
   @Override
@@ -771,25 +771,20 @@ public class VelocityServer implements ProxyServer, ForwardingAudience {
     return new VelocityResourcePackInfo.BuilderImpl(url);
   }
 
-  // ElytraProxy
+  // ElytraProxy Start
   public Component getMaintenanceMotd() {
     if (Settings.IMP.MAIN_SETTINGS.MAINTENANCE.ENABLED) {
       if (Settings.IMP.MAIN_SETTINGS.MAINTENANCE.MOTD.startsWith("{")) {
         maintenanceMotd = GsonComponentSerializer
             .gson()
-            .deserialize(Settings.IMP.MAIN_SETTINGS.MAINTENANCE.MOTD
-                .replace("{NL}", "\n")
-                .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-            );
+            .deserialize(Settings.IMP.MAIN_SETTINGS.MAINTENANCE.MOTD);
       } else {
         maintenanceMotd = LegacyComponentSerializer
             .legacyAmpersand()
-            .deserialize(Settings.IMP.MAIN_SETTINGS.MAINTENANCE.MOTD
-                .replace("{NL}", "\n")
-                .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-            );
+            .deserialize(Settings.IMP.MAIN_SETTINGS.MAINTENANCE.MOTD);
       }
     }
     return maintenanceMotd;
   }
+  // ElytraProxy End
 }
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/CommandMessages.java b/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/CommandMessages.java
index 59102c9b..40661ade 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/CommandMessages.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/CommandMessages.java
@@ -23,20 +23,25 @@ import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
 
 public class CommandMessages {
 
+  // ElytraProxy Start
+  /*
+  public static final TranslatableComponent PLAYERS_ONLY = Component.translatable(
+      "velocity.command.players-only", NamedTextColor.RED);
+  */
   public static final Component PLAYERS_ONLY = LegacyComponentSerializer
       .legacyAmpersand()
-      .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.PLAYERS_ONLY
-          .replace("{NL}", "\n")
-          .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-      );
+      .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.PLAYERS_ONLY);
 
+  /*
+  public static final TranslatableComponent SERVER_DOES_NOT_EXIST = Component.translatable(
+      "velocity.command.server-does-not-exist", NamedTextColor.RED);
+  */
   public static Component SERVER_DOES_NOT_EXIST(String serverName) {
     return LegacyComponentSerializer
         .legacyAmpersand()
         .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.SERVER_DOES_NOT_EXIST
-            .replace("{NL}", "\n")
-            .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
             .replace("{0}", serverName)
         );
+    // ElytraProxy End
   }
 }
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/GlistCommand.java b/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/GlistCommand.java
index f9251320..a2fe6dcc 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/GlistCommand.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/GlistCommand.java
@@ -37,8 +37,6 @@ import net.elytrium.elytraproxy.config.Settings;
 import net.kyori.adventure.identity.Identity;
 import net.kyori.adventure.text.Component;
 import net.kyori.adventure.text.TextComponent;
-import net.kyori.adventure.text.TranslatableComponent;
-import net.kyori.adventure.text.format.NamedTextColor;
 import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
 
 public class GlistCommand {
@@ -57,7 +55,9 @@ public class GlistCommand {
   public void register() {
     LiteralCommandNode<CommandSource> totalNode = LiteralArgumentBuilder
         .<CommandSource>literal("glist")
-        .requires(source -> source.hasPermission("velocity.command.glist"))
+        // ElytraProxy
+        .requires(source ->
+            source./*getPermissionValue*/hasPermission("velocity.command.glist")/* == Tristate.TRUE*/)
         .executes(this::totalCount)
         .build();
     ArgumentCommandNode<CommandSource, String> serverNode = RequiredArgumentBuilder
@@ -79,12 +79,11 @@ public class GlistCommand {
     final CommandSource source = context.getSource();
     sendTotalProxyCount(source);
     source.sendMessage(Identity.nil(),
+        // ElytraProxy
+        /*Component.translatable("velocity.command.glist-view-all", NamedTextColor.YELLOW));*/
         LegacyComponentSerializer
             .legacyAmpersand()
-            .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.GLIST_VIEW_ALL
-                .replace("{NL}", "\n")
-                .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-            ));
+            .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.GLIST_VIEW_ALL));
     return 1;
   }
 
@@ -100,7 +99,8 @@ public class GlistCommand {
       Optional<RegisteredServer> registeredServer = server.getServer(serverName);
       if (!registeredServer.isPresent()) {
         source.sendMessage(Identity.nil(),
-            CommandMessages.SERVER_DOES_NOT_EXIST(serverName));
+            // ElytraProxy
+            CommandMessages.SERVER_DOES_NOT_EXIST(serverName)/*.args(Component.text(serverName))*/);
         return -1;
       }
       sendServerPlayers(source, registeredServer.get(), false);
@@ -109,23 +109,26 @@ public class GlistCommand {
   }
 
   private void sendTotalProxyCount(CommandSource target) {
-    int online = server.getAllPlayers().size();
-    Component msg = online == 1
+    // ElytraProxy Start
+    int online = server./*getPlayerCount*/getAllPlayers().size();
+    /*TranslatableComponent*/Component msg = online == 1
+        /*
+        ? Component.translatable("velocity.command.glist-player-singular")
+        : Component.translatable("velocity.command.glist-player-plural");
+        */
         ? LegacyComponentSerializer
-            .legacyAmpersand()
-            .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.GLIST_PLAYER_SINGULAR
-                .replace("{NL}", "\n")
-                .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                .replace("{0}", Integer.toString(online)
-        ))
-            : LegacyComponentSerializer
-                .legacyAmpersand()
-                .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.GLIST_PLAYER_PLURAL
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                    .replace("{0}", Integer.toString(online)
-        ));
-    target.sendMessage(msg);
+        .legacyAmpersand()
+        .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.GLIST_PLAYER_SINGULAR
+            .replace("{0}", Integer.toString(online)
+            ))
+        : LegacyComponentSerializer
+        .legacyAmpersand()
+        .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.GLIST_PLAYER_PLURAL
+            .replace("{0}", Integer.toString(online)
+            ));
+    target.sendMessage(msg/*.color(NamedTextColor.YELLOW)
+        .args(Component.text(Integer.toString(online), NamedTextColor.GREEN))*/);
+    // ElytraProxy End
   }
 
   private void sendServerPlayers(CommandSource target, RegisteredServer server, boolean fromAll) {
@@ -134,16 +137,20 @@ public class GlistCommand {
       return;
     }
 
-    TextComponent.Builder builder = Component
-        .text().append(
+    // ElytraProxy Start
+    TextComponent.Builder builder = Component.text()
+        .append(/*Component.text("[" + server.getServerInfo().getName() + "] ",
+            NamedTextColor.DARK_AQUA))
+        .append(Component.text("(" + onServer.size() + ")", NamedTextColor.GRAY))
+        .append(Component.text(": "))*/
             LegacyComponentSerializer
                 .legacyAmpersand()
                 .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.GLIST_FORMAT_VIEW_ALL
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
                     .replace("{0}", server.getServerInfo().getName())
-                    .replace("{1}", Integer.toString(onServer.size())
-        ))).resetStyle();
+                    .replace("{1}", Integer.toString(onServer.size()))
+                ))
+        // ElytraProxy End
+        .resetStyle();
 
     for (int i = 0; i < onServer.size(); i++) {
       Player player = onServer.get(i);
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/ServerCommand.java b/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/ServerCommand.java
index fa55a506..f5aef727 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/ServerCommand.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/ServerCommand.java
@@ -64,7 +64,10 @@ public class ServerCommand implements SimpleCommand {
       String serverName = args[0];
       Optional<RegisteredServer> toConnect = server.getServer(serverName);
       if (!toConnect.isPresent()) {
-        player.sendMessage(Identity.nil(), CommandMessages.SERVER_DOES_NOT_EXIST(serverName));
+        // ElytraProxy Start
+        player.sendMessage(Identity.nil(), CommandMessages.SERVER_DOES_NOT_EXIST
+            /*.args(Component.text(*/(serverName))/*)*/;
+        // ElytraProxy End
         return;
       }
 
@@ -77,36 +80,37 @@ public class ServerCommand implements SimpleCommand {
   private void outputServerInformation(Player executor) {
     String currentServer = executor.getCurrentServer().map(ServerConnection::getServerInfo)
         .map(ServerInfo::getName).orElse("<unknown>");
-    executor.sendMessage(Identity.nil(),
+    // ElytraProxy Start
+    executor.sendMessage(Identity.nil(), /*Component.translatable(
+        "velocity.command.server-current-server",
+        NamedTextColor.YELLOW,
+        Component.text(currentServer)));*/
         LegacyComponentSerializer
             .legacyAmpersand()
             .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.SERVER_CURRENT_SERVER
-                .replace("{NL}", "\n")
-                .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
                 .replace("{0}", currentServer)
             ));
 
     List<RegisteredServer> servers = BuiltinCommandUtil.sortedServerList(server);
     if (servers.size() > MAX_SERVERS_TO_LIST) {
-      executor.sendMessage(Identity.nil(),
+      executor.sendMessage(Identity.nil(), /*Component.translatable(
+          "velocity.command.server-too-many", NamedTextColor.RED));*/
           LegacyComponentSerializer
               .legacyAmpersand()
-              .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.SERVER_TOO_MANY
-                  .replace("{NL}", "\n")
-                  .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-              ));
+              .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.SERVER_TOO_MANY));
       return;
     }
 
     // Assemble the list of servers as components
-    TextComponent.Builder serverListBuilder = Component
-        .text().append(
+    TextComponent.Builder serverListBuilder = Component.text()
+        .append(/*Component.translatable("velocity.command.server-available",
+            NamedTextColor.YELLOW))
+        .append(Component.space());*/
             LegacyComponentSerializer
                 .legacyAmpersand()
                 .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.SERVER_AVAILABLE
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
                 ));
+    // ElytraProxy End
     for (int i = 0; i < servers.size(); i++) {
       RegisteredServer rs = servers.get(i);
       serverListBuilder.append(formatServerComponent(currentServer, rs));
@@ -123,22 +127,21 @@ public class ServerCommand implements SimpleCommand {
     TextComponent serverTextComponent = Component.text(serverInfo.getName());
 
     int connectedPlayers = server.getPlayersConnected().size();
-    Component playersTextComponent;
+    // ElytraProxy Start
+    /*TranslatableComponent*/Component playersTextComponent;
     if (connectedPlayers == 1) {
-      playersTextComponent = LegacyComponentSerializer
-          .legacyAmpersand()
-          .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.SERVER_TOOLTIP_PLAYER_ONLINE
-              .replace("{NL}", "\n")
-              .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-              .replace("{0}", String.valueOf(connectedPlayers))
+      playersTextComponent = /*Component.translatable("velocity.command.server-tooltip-player-online");*/
+          LegacyComponentSerializer
+              .legacyAmpersand()
+              .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.SERVER_TOOLTIP_PLAYER_ONLINE
+                  .replace("{0}", String.valueOf(connectedPlayers))
           );
     } else {
-      playersTextComponent = LegacyComponentSerializer
-          .legacyAmpersand()
-          .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.SERVER_TOOLTIP_PLAYERS_ONLINE
-              .replace("{NL}", "\n")
-              .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-              .replace("{0}", String.valueOf(connectedPlayers))
+      playersTextComponent = /*Component.translatable("velocity.command.server-tooltip-players-online");*/
+          LegacyComponentSerializer
+              .legacyAmpersand()
+              .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.SERVER_TOOLTIP_PLAYERS_ONLINE
+                  .replace("{0}", String.valueOf(connectedPlayers))
           );
     }
 
@@ -146,32 +149,28 @@ public class ServerCommand implements SimpleCommand {
       serverTextComponent = serverTextComponent.color(NamedTextColor.GREEN)
           .hoverEvent(
               showText(
+                  /*Component.translatable("velocity.command.server-tooltip-current-server")
+                      .append(Component.newline())
+                      .append(playersTextComponent))*/
                   LegacyComponentSerializer
                       .legacyAmpersand()
-                      .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND
-                              .SERVER_TOOLTIP_CURRENT_SERVER
-                          .replace("{NL}", "\n")
-                          .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                          .replace("{0}", LegacyComponentSerializer
-                              .legacySection()
-                              .serialize(playersTextComponent))
+                      .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.SERVER_TOOLTIP_CURRENT_SERVER
+                          .replace("{0}", LegacyComponentSerializer.legacySection().serialize(playersTextComponent))
                       )));
     } else {
       serverTextComponent = serverTextComponent.color(NamedTextColor.GRAY)
           .clickEvent(ClickEvent.runCommand("/server " + serverInfo.getName()))
           .hoverEvent(
-              showText(
+              showText(/*Component.translatable("velocity.command.server-tooltip-offer-connect-server")
+                  .append(Component.newline())
+                  .append(playersTextComponent))*/
                   LegacyComponentSerializer
                       .legacyAmpersand()
-                      .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND
-                              .SERVER_TOOLTIP_OFFER_CONNECT_SERVER
-                          .replace("{NL}", "\n")
-                          .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                          .replace("{0}", LegacyComponentSerializer
-                              .legacySection()
-                              .serialize(playersTextComponent))
+                      .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.SERVER_TOOLTIP_OFFER_CONNECT_SERVER
+                          .replace("{0}", LegacyComponentSerializer.legacySection().serialize(playersTextComponent))
                       )));
     }
+    // ElytraProxy End
     return serverTextComponent;
   }
 
@@ -194,6 +193,7 @@ public class ServerCommand implements SimpleCommand {
 
   @Override
   public boolean hasPermission(final SimpleCommand.Invocation invocation) {
-    return invocation.source().hasPermission("velocity.command.server");
+    // ElytraProxy
+    return invocation.source()./*getPermissionValue*/hasPermission("velocity.command.server")/* != Tristate.FALSE*/;
   }
 }
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/ShutdownCommand.java b/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/ShutdownCommand.java
index 995b6bfc..08da1725 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/ShutdownCommand.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/ShutdownCommand.java
@@ -19,7 +19,6 @@ package com.velocitypowered.proxy.command.builtin;
 
 import com.velocitypowered.api.command.RawCommand;
 import com.velocitypowered.proxy.VelocityServer;
-import net.elytrium.elytraproxy.config.Settings;
 import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
 
 public class ShutdownCommand implements RawCommand {
@@ -36,17 +35,18 @@ public class ShutdownCommand implements RawCommand {
     if (reason.isEmpty() || reason.trim().isEmpty()) {
       server.shutdown(true);
     } else {
+      // ElytraProxy Start
+      /*server.shutdown(true, LegacyComponentSerializer.legacy('&').deserialize(reason));*/
       server.shutdown(true, LegacyComponentSerializer
           .legacyAmpersand()
-          .deserialize(reason
-              .replace("{NL}", "\n")
-              .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-          ));
+          .deserialize(reason));
+      // ElytraProxy End
     }
   }
 
   @Override
   public boolean hasPermission(final Invocation invocation) {
-    return invocation.source().hasPermission("velocity.command.shutdown");
+    // ElytraProxy
+    return invocation.source()/* == server.getConsoleCommandSource()*/.hasPermission("velocity.command.shutdown");
   }
 }
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/config/VelocityConfiguration.java b/proxy/src/main/java/com/velocitypowered/proxy/config/VelocityConfiguration.java
index 71469abd..caf3eb1a 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/config/VelocityConfiguration.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/config/VelocityConfiguration.java
@@ -28,6 +28,7 @@ import com.google.gson.annotations.Expose;
 import com.velocitypowered.api.proxy.config.ProxyConfig;
 import com.velocitypowered.api.util.Favicon;
 import com.velocitypowered.proxy.util.AddressUtil;
+
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.io.File;
 import java.io.IOException;
@@ -58,14 +59,16 @@ public class VelocityConfiguration implements ProxyConfig {
 
   private static final Logger logger = LogManager.getLogger(VelocityConfiguration.class);
 
-  @Expose private String bind = "0.0.0.0:25565";
-  @Expose private String motd = "&3An ElytraProxy Server";
+  // ElytraProxy Start
+  @Expose private String bind = /*"0.0.0.0:25577"*/"0.0.0.0:25565";
+  @Expose private String motd = /*"&3A Velocity Server"*/"&3An ElytraProxy Server";
   @Expose private int showMaxPlayers = 500;
   @Expose private boolean onlineMode = true;
-  @Expose private boolean preventClientProxyConnections = true;
+  @Expose private boolean preventClientProxyConnections = /*false*/true;
   @Expose private PlayerInfoForwarding playerInfoForwardingMode = PlayerInfoForwarding.NONE;
   private byte[] forwardingSecret = generateRandomString(12).getBytes(StandardCharsets.UTF_8);
-  @Expose private boolean announceForge = true;
+  @Expose private boolean announceForge = /*false*/true;
+  // ElytraProxy End
   @Expose private boolean onlineModeKickExistingPlayers = false;
   @Expose private PingPassthroughMode pingPassthrough = PingPassthroughMode.DISABLED;
   private final Servers servers;
@@ -254,19 +257,17 @@ public class VelocityConfiguration implements ProxyConfig {
   public net.kyori.adventure.text.Component getMotd() {
     if (motdAsComponent == null) {
       if (motd.startsWith("{")) {
+        // ElytraProxy Start
+        /*motdAsComponent = GsonComponentSerializer.gson().deserialize(motd);*/
         motdAsComponent = GsonComponentSerializer
             .gson()
-            .deserialize(motd
-                .replace("{NL}", "\n")
-                .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-            );
+            .deserialize(motd);
       } else {
+        /*motdAsComponent = LegacyComponentSerializer.legacy('&').deserialize(motd);*/
         motdAsComponent = LegacyComponentSerializer
             .legacyAmpersand()
-            .deserialize(motd
-                .replace("{NL}", "\n")
-                .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-            );
+            .deserialize(motd);
+        // ElytraProxy End
       }
     }
     return motdAsComponent;
@@ -325,11 +326,12 @@ public class VelocityConfiguration implements ProxyConfig {
     return advanced.getLoginRatelimit();
   }
 
-  //BotFilter - global rate limiter
+  // BotFilter Backport Start: Global rate limiter
   @Override
   public int getLoginRatelimitAttempts() {
     return Settings.IMP.MAIN_SETTINGS.LOGIN_RATELIMIT_ATTEMPTS;
   }
+  // BotFilter Backport End
 
   @Override
   public Optional<Favicon> getFavicon() {
@@ -465,8 +467,10 @@ public class VelocityConfiguration implements ProxyConfig {
     PingPassthroughMode pingPassthroughMode = config.getEnumOrElse("ping-passthrough",
         PingPassthroughMode.DISABLED);
 
-    String bind = config.getOrElse("bind", "0.0.0.0:25565");
-    String motd = config.getOrElse("motd", "&#09add3Am ElytraProxy Server");
+    // ElytraProxy Start
+    String bind = config.getOrElse("bind", /*"0.0.0.0:25577"*/"0.0.0.0:25565");
+    String motd = config.getOrElse("motd", /*"&#09add3A Velocity Server"*/"&#09add3An ElytraProxy Server");
+    // ElytraProxy End
     int maxPlayers = config.getIntOrElse("show-max-players", 500);
     Boolean onlineMode = config.getOrElse("online-mode", true);
     Boolean announceForge = config.getOrElse("announce-forge", true);
@@ -632,26 +636,29 @@ public class VelocityConfiguration implements ProxyConfig {
 
   private static class Advanced {
 
-    @Expose private int compressionThreshold = 512;
-    @Expose private int compressionLevel = 9;
+    // ElytraProxy Start
+    @Expose private int compressionThreshold = /*256*/512;
+    @Expose private int compressionLevel = /*-1*/9;
+    // ElytraProxy End
     @Expose private int loginRatelimit = 3000;
     @Expose private int connectionTimeout = 5000;
     @Expose private int readTimeout = 30000;
     @Expose private boolean proxyProtocol = false;
     @Expose private boolean tcpFastOpen = false;
     @Expose private boolean bungeePluginMessageChannel = true;
-    @Expose private boolean showPingRequests = true;
+    @Expose private boolean showPingRequests = /*false*/true;
     @Expose private boolean failoverOnUnexpectedServerDisconnect = true;
     @Expose private boolean announceProxyCommands = true;
-    @Expose private boolean logCommandExecutions = true;
+    @Expose private boolean logCommandExecutions = /*false*/true;
 
     private Advanced() {
     }
 
     private Advanced(CommentedConfig config) {
       if (config != null) {
-        this.compressionThreshold = config.getIntOrElse("compression-threshold", 512);
-        this.compressionLevel = config.getIntOrElse("compression-level", 9);
+        // ElytraProxy Start
+        this.compressionThreshold = config.getIntOrElse("compression-threshold", /*256*/512);
+        this.compressionLevel = config.getIntOrElse("compression-level", /*-1*/9);
         this.loginRatelimit = config.getIntOrElse("login-ratelimit", 3000);
         this.connectionTimeout = config.getIntOrElse("connection-timeout", 5000);
         this.readTimeout = config.getIntOrElse("read-timeout", 30000);
@@ -662,11 +669,12 @@ public class VelocityConfiguration implements ProxyConfig {
         }
         this.tcpFastOpen = config.getOrElse("tcp-fast-open", false);
         this.bungeePluginMessageChannel = config.getOrElse("bungee-plugin-message-channel", true);
-        this.showPingRequests = config.getOrElse("show-ping-requests", true);
+        this.showPingRequests = config.getOrElse("show-ping-requests", /*false*/true);
         this.failoverOnUnexpectedServerDisconnect = config
             .getOrElse("failover-on-unexpected-server-disconnect", true);
         this.announceProxyCommands = config.getOrElse("announce-proxy-commands", true);
-        this.logCommandExecutions = config.getOrElse("log-command-executions", true);
+        this.logCommandExecutions = config.getOrElse("log-command-executions", /*false*/true);
+        // ElytraProxy End
       }
     }
 
@@ -740,8 +748,10 @@ public class VelocityConfiguration implements ProxyConfig {
   private static class Query {
 
     @Expose private boolean queryEnabled = false;
-    @Expose private int queryPort = 25565;
-    @Expose private String queryMap = "ElytraProxy";
+    // ElytraProxy Start
+    @Expose private int queryPort = /*25577*/25565;
+    @Expose private String queryMap = /*"Velocity"*/"ElytraProxy";
+    // ElytraProxy End
     @Expose private boolean showPlugins = false;
 
     private Query() {
@@ -757,8 +767,10 @@ public class VelocityConfiguration implements ProxyConfig {
     private Query(CommentedConfig config) {
       if (config != null) {
         this.queryEnabled = config.getOrElse("enabled", false);
-        this.queryPort = config.getIntOrElse("port", 25565);
-        this.queryMap = config.getOrElse("map", "ElytraProxy");
+        // ElytraProxy Start
+        this.queryPort = config.getIntOrElse("port", /*25577*/25565);
+        this.queryMap = config.getOrElse("map", /*"Velocity"*/"ElytraProxy");
+        // ElytraProxy End
         this.showPlugins = config.getOrElse("show-plugins", false);
       }
     }
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/MinecraftConnection.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/MinecraftConnection.java
index 03901b49..dc1e6773 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/MinecraftConnection.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/MinecraftConnection.java
@@ -28,12 +28,12 @@ import static com.velocitypowered.proxy.network.Connections.MINECRAFT_ENCODER;
 
 import com.google.common.base.Preconditions;
 import com.velocitypowered.api.network.ProtocolVersion;
-import com.velocitypowered.api.proxy.Player;
 import com.velocitypowered.natives.compression.VelocityCompressor;
 import com.velocitypowered.natives.encryption.VelocityCipher;
 import com.velocitypowered.natives.encryption.VelocityCipherFactory;
 import com.velocitypowered.natives.util.Natives;
 import com.velocitypowered.proxy.VelocityServer;
+import com.velocitypowered.proxy.connection.client.ConnectedPlayer;
 import com.velocitypowered.proxy.connection.client.HandshakeSessionHandler;
 import com.velocitypowered.proxy.connection.client.LoginSessionHandler;
 import com.velocitypowered.proxy.connection.client.StatusSessionHandler;
@@ -64,7 +64,6 @@ import java.security.GeneralSecurityException;
 import java.util.concurrent.TimeUnit;
 import javax.crypto.SecretKey;
 import javax.crypto.spec.SecretKeySpec;
-import net.elytrium.elytraproxy.config.Settings;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.checkerframework.checker.nullness.qual.Nullable;
@@ -90,7 +89,7 @@ public class MinecraftConnection extends ChannelInboundHandlerAdapter {
   /**
    * Initializes a new {@link MinecraftConnection} instance.
    * @param channel the channel on the connection
-   * @param server the Velocity instance
+   * @param server  the Velocity instance
    */
   public MinecraftConnection(Channel channel, VelocityServer server) {
     this.channel = channel;
@@ -139,60 +138,6 @@ public class MinecraftConnection extends ChannelInboundHandlerAdapter {
       }
 
       if (msg instanceof MinecraftPacket) {
-        // ElytraProxy Start
-        // TODO: FIX
-        if (Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.ENABLE) {
-          InetSocketAddress adr = (InetSocketAddress) ctx.channel().localAddress();
-          InetSocketAddress adr1 = (InetSocketAddress) ctx.channel().remoteAddress();
-          String notifymsg = "{} tried to connect using {}";
-          if (!Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.IGNORED_IPS.contains(
-                  adr1.getAddress().getHostAddress())) {
-            if (Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.WHITELIST) {
-              if (Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.IPS_CHECK) {
-                if (!Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.HOSTNAMES.contains(
-                        adr.getAddress().getHostAddress())) {
-                  server.getElytraProxy().getLogger().info(notifymsg,
-                          ctx.channel().remoteAddress(),
-                          adr.getAddress().getHostAddress());
-                  server.getElytraProxy().getStatistics().addBlockedConnection();
-                  return;
-                }
-              }
-              if (Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.DOMAINS_CHECK) {
-                if (!Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.HOSTNAMES.contains(
-                        adr.getHostName())) {
-                  server.getElytraProxy().getLogger().info(notifymsg,
-                          ctx.channel().remoteAddress(),
-                          adr.getHostName());
-                  server.getElytraProxy().getStatistics().addBlockedConnection();
-                  return;
-                }
-              }
-            } else {
-              if (Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.IPS_CHECK) {
-                if (Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.HOSTNAMES.contains(
-                        adr.getAddress().getHostAddress())) {
-                  server.getElytraProxy().getLogger().info(notifymsg,
-                          ctx.channel().remoteAddress(),
-                          adr.getAddress().getHostAddress());
-                  server.getElytraProxy().getStatistics().addBlockedConnection();
-                  return;
-                }
-              }
-              if (Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.DOMAINS_CHECK) {
-                if (Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.HOSTNAMES.contains(
-                        adr.getHostName())) {
-                  server.getElytraProxy().getLogger().info(notifymsg,
-                          ctx.channel().remoteAddress(),
-                          adr.getHostName());
-                  server.getElytraProxy().getStatistics().addBlockedConnection();
-                  return;
-                }
-              }
-            }
-          }
-        }
-        // ElytraProxy End
         MinecraftPacket pkt = (MinecraftPacket) msg;
         if (!pkt.handle(sessionHandler)) {
           sessionHandler.handleGeneric((MinecraftPacket) msg);
@@ -222,7 +167,7 @@ public class MinecraftConnection extends ChannelInboundHandlerAdapter {
       if (sessionHandler != null) {
         try {
           // ElytraProxy Start - Fix long message while player disconnect unexpectedly
-          if (cause instanceof ReadTimeoutException && association instanceof Player) {
+          if (cause instanceof ReadTimeoutException && association instanceof ConnectedPlayer) {
             logger.info("{} may have disconnect by closing minecraft.", association);
           } else {
             sessionHandler.exception(cause);
@@ -311,7 +256,7 @@ public class MinecraftConnection extends ChannelInboundHandlerAdapter {
     if (channel.isActive()) {
       boolean is17 = this.getProtocolVersion().compareTo(ProtocolVersion.MINECRAFT_1_8) < 0
           && this.getProtocolVersion().compareTo(ProtocolVersion.MINECRAFT_1_7_2) >= 0;
-      // BotFilter looks like it works ok for Login protocol
+      // BotFilter BackPort: Looks like it works ok for Login protocol
       if (is17 && this.getState() == StateRegistry.PLAY) {
         channel.eventLoop().execute(() -> {
           // 1.7.x versions have a race condition with switching protocol states, so just explicitly
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/MinecraftSessionHandler.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/MinecraftSessionHandler.java
index e3d2cae0..e72f42d6 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/MinecraftSessionHandler.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/MinecraftSessionHandler.java
@@ -53,7 +53,6 @@ import com.velocitypowered.proxy.protocol.packet.title.TitleSubtitlePacket;
 import com.velocitypowered.proxy.protocol.packet.title.TitleTextPacket;
 import com.velocitypowered.proxy.protocol.packet.title.TitleTimesPacket;
 import io.netty.buffer.ByteBuf;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.PlayerPositionAndLook;
 
 public interface MinecraftSessionHandler {
 
@@ -232,10 +231,4 @@ public interface MinecraftSessionHandler {
   default boolean handle(ResourcePackResponse packet) {
     return false;
   }
-
-  //BotFilter start - add handle methods
-  default boolean handle(PlayerPositionAndLook packet) {
-    return false;
-  }
-  //BotFilter end
 }
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/LoginSessionHandler.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/LoginSessionHandler.java
index b8627700..3451c59b 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/LoginSessionHandler.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/LoginSessionHandler.java
@@ -45,17 +45,16 @@ import javax.crypto.Mac;
 import javax.crypto.SecretKey;
 import javax.crypto.spec.SecretKeySpec;
 import net.elytrium.elytraproxy.config.Settings;
-import net.kyori.adventure.text.TextComponent;
+import net.kyori.adventure.text.Component;
 import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
 
 public class LoginSessionHandler implements MinecraftSessionHandler {
 
-  private static final TextComponent MODERN_IP_FORWARDING_FAILURE = LegacyComponentSerializer
-      .legacyAmpersand()
-      .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.MODERN_FORWARDING_FAILED
-          .replace("{NL}", "\n")
-          .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-      );
+  private static final Component MODERN_IP_FORWARDING_FAILURE = /*Component
+      .translatable("velocity.error.modern-forwarding-failed");*/
+      LegacyComponentSerializer
+          .legacyAmpersand()
+          .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.MODERN_FORWARDING_FAILED);
 
   private final VelocityServer server;
   private final VelocityServerConnection serverConn;
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/TransitionSessionHandler.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/TransitionSessionHandler.java
index 35682584..0479c30a 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/TransitionSessionHandler.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/TransitionSessionHandler.java
@@ -38,6 +38,7 @@ import com.velocitypowered.proxy.protocol.packet.PluginMessage;
 import com.velocitypowered.proxy.protocol.util.PluginMessageUtil;
 import java.io.IOException;
 import java.util.concurrent.CompletableFuture;
+import net.elytrium.elytraproxy.virtual.protocol.packet.PlayerPositionAndLook;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -54,8 +55,8 @@ public class TransitionSessionHandler implements MinecraftSessionHandler {
 
   /**
    * Creates the new transition handler.
-   * @param server the Velocity server instance
-   * @param serverConn the server connection
+   * @param server       the Velocity server instance
+   * @param serverConn   the server connection
    * @param resultFuture the result future
    */
   TransitionSessionHandler(VelocityServer server,
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/VelocityServerConnection.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/VelocityServerConnection.java
index 62be4a34..9d692eb4 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/VelocityServerConnection.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/VelocityServerConnection.java
@@ -69,8 +69,8 @@ public class VelocityServerConnection implements MinecraftConnectionAssociation,
   /**
    * Initializes a new server connection.
    * @param registeredServer the server to connect to
-   * @param proxyPlayer the player connecting to the server
-   * @param server the Velocity proxy instance
+   * @param proxyPlayer      the player connecting to the server
+   * @param server           the Velocity proxy instance
    */
   public VelocityServerConnection(VelocityRegisteredServer registeredServer,
       ConnectedPlayer proxyPlayer, VelocityServer server) {
@@ -82,7 +82,7 @@ public class VelocityServerConnection implements MinecraftConnectionAssociation,
   /**
    * Connects to the server.
    * @return a {@link com.velocitypowered.api.proxy.ConnectionRequestBuilder.Result} representing
-   *         whether or not the connect succeeded
+   * whether or not the connect succeeded
    */
   public CompletableFuture<Impl> connect() {
     CompletableFuture<Impl> result = new CompletableFuture<>();
@@ -230,7 +230,7 @@ public class VelocityServerConnection implements MinecraftConnectionAssociation,
   /**
    * Sends a plugin message to the server through this connection.
    * @param identifier the channel ID to use
-   * @param data the data
+   * @param data       the data
    * @return whether or not the message was sent
    */
   public boolean sendPluginMessage(ChannelIdentifier identifier, ByteBuf data) {
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ClientPlaySessionHandler.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ClientPlaySessionHandler.java
index 67b46aca..f2fc8dae 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ClientPlaySessionHandler.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ClientPlaySessionHandler.java
@@ -68,7 +68,6 @@ import java.util.UUID;
 import java.util.concurrent.CompletableFuture;
 import net.elytrium.elytraproxy.commands.ElytraProxyCommand;
 import net.elytrium.elytraproxy.config.Settings;
-import net.kyori.adventure.identity.Identity;
 import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -84,11 +83,6 @@ public class ClientPlaySessionHandler implements MinecraftSessionHandler {
 
   private final ConnectedPlayer player;
   private boolean spawned = false;
-  // ElytraProxy
-  private boolean checkedBySettings = false;
-  private boolean checkedByBrand = false;
-  private boolean willBeKickedChat = false;
-  private boolean willBeKickedUnk = false;
   private final List<UUID> serverBossBars = new ArrayList<>();
   private final Queue<PluginMessage> loginPluginMessages = new ArrayDeque<>();
   private final VelocityServer server;
@@ -122,34 +116,6 @@ public class ClientPlaySessionHandler implements MinecraftSessionHandler {
     }
   }
 
-  // ElytraProxy
-  private void kickIfCheckNotPassed() {
-    if (Settings.IMP.ANTIBOT.ENABLE) {
-      if ((!checkedBySettings) && Settings.IMP.ANTIBOT.CHECK_CLIENT_SETTINGS) {
-        player.disconnect(
-            LegacyComponentSerializer
-                .legacyAmpersand()
-                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK.CLIENT_CHECK_SETTINGS
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                ));
-        server.getElytraProxy().getStatistics().addBlockedConnection();
-        server.getElytraProxy().getStatistics().addBlockedBots();
-      }
-      if ((!checkedByBrand) && Settings.IMP.ANTIBOT.CHECK_CLIENT_BRAND) {
-        player.disconnect(
-            LegacyComponentSerializer
-                .legacyAmpersand()
-                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK.CLIENT_CHECK_BRAND
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                ));
-        server.getElytraProxy().getStatistics().addBlockedConnection();
-        server.getElytraProxy().getStatistics().addBlockedBots();
-      }
-    }
-  }
-
   @Override
   public boolean handle(KeepAlive packet) {
     VelocityServerConnection serverConnection = player.getConnectedServer();
@@ -169,74 +135,11 @@ public class ClientPlaySessionHandler implements MinecraftSessionHandler {
   @Override
   public boolean handle(ClientSettings packet) {
     player.setPlayerSettings(packet);
-    // ElytraProxy
-    // TODO: Move to botfilter check
-    String toStringPacket = "{} send settings \"locale= '"
-        + packet.getLocale() + '\''
-        + ", viewDistance=" + packet.getViewDistance()
-        + ", chatVisibility=" + packet.getChatVisibility()
-        + ", chatColors=" + packet.isChatColors()
-        + ", skinParts=" + packet.getSkinParts()
-        + ", mainHand=" + packet.getMainHand()
-        + ", chatFilteringEnabled=" + packet.isChatFilteringEnabled() + '"';
-    if (Settings.IMP.ANTIBOT.ENABLE) {
-      if ((!checkedBySettings) && Settings.IMP.ANTIBOT.CHECK_CLIENT_SETTINGS) {
-        if (packet.toString().contains("null")) {
-          logger.error(toStringPacket, player);
-          player.disconnect(
-              LegacyComponentSerializer
-                  .legacyAmpersand()
-                  .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK.CLIENT_CHECK_SETTINGS
-                      .replace("{NL}", "\n")
-                      .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                  ));
-          server.getElytraProxy().getLogger().error("{} has null in settings packet", player);
-          server.getElytraProxy().getStatistics().addBlockedConnection();
-          server.getElytraProxy().getStatistics().addBlockedBots();
-        } else if (!packet.isChatColors()) {
-          logger.error(toStringPacket, player);
-          player.disconnect(
-              LegacyComponentSerializer
-                  .legacyAmpersand()
-                  .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK
-                          .CLIENT_CHECK_SETTINGS_CHAT_COLOR
-                      .replace("{NL}", "\n")
-                      .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                  ));
-          server.getElytraProxy().getLogger().error("{} doesn't send isChatColors packet",
-              player);
-          server.getElytraProxy().getStatistics().addBlockedConnection();
-          server.getElytraProxy().getStatistics().addBlockedBots();
-        } else if (packet.getSkinParts() == 0) {
-          logger.error(toStringPacket, player);
-          player.disconnect(
-              LegacyComponentSerializer
-                  .legacyAmpersand()
-                  .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK
-                          .CLIENT_CHECK_SETTINGS_SKIN_PARTS
-                      .replace("{NL}", "\n")
-                      .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                  ));
-          server.getElytraProxy().getLogger().error("{} doesn't send skin parts packet",
-              player);
-          server.getElytraProxy().getStatistics().addBlockedConnection();
-          server.getElytraProxy().getStatistics().addBlockedBots();
-        }
-        logger.info(toStringPacket, player);
-      }
-    }
-    checkedBySettings = true;
     return false; // will forward onto the server
   }
 
   @Override
   public boolean handle(Chat packet) {
-    // ElytraProxy
-    // TODO: Move to botfilter check
-    if (!willBeKickedChat) {
-      kickIfCheckNotPassed();
-      willBeKickedChat = true;
-    }
     VelocityServerConnection serverConnection = player.getConnectedServer();
     if (serverConnection == null) {
       return true;
@@ -261,8 +164,6 @@ public class ClientPlaySessionHandler implements MinecraftSessionHandler {
                       LegacyComponentSerializer
                           .legacyAmpersand()
                           .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.COMMAND_SPY_FORMAT
-                              .replace("{NL}", "\n")
-                              .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
                               .replace("{0}", player.getUsername())
                               .replace("{1}", "/" + originalCommand)
                           ));
@@ -270,25 +171,22 @@ public class ClientPlaySessionHandler implements MinecraftSessionHandler {
               }
             }
             if (server.getConfiguration().isLogCommandExecutions()) {
-              logger.info(Settings.IMP.MESSAGES.ELYTRAPROXY.CONSOLE_LOG_COMMAND_EXECUTIONS_FORMAT
-                  .replace("{NL}", "\n")
-                  .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                  .replace("&", "§")
-                  .replace("{0}", String.valueOf(player))
-                  .replace("{1}", "/" + originalCommand)
+              logger.info(/*"{} -> executed command /{}", player, originalCommand);*/
+                  Settings.IMP.MESSAGES.ELYTRAPROXY.CONSOLE_LOG_COMMAND_EXECUTIONS_FORMAT
+                      .replace("&", "§")
+                      .replace("{0}", String.valueOf(player))
+                      .replace("{1}", "/" + originalCommand)
               );
             }
           })
           .exceptionally(e -> {
             logger.info("Exception occurred while running command for {}",
                 player.getUsername(), e);
-            player.sendMessage(Identity.nil(),
+            player.sendMessage(/*Component.translatable("velocity.command.generic-error",
+                NamedTextColor.RED));*/
                 LegacyComponentSerializer
                     .legacyAmpersand()
-                    .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.GENERIC_ERROR
-                        .replace("{NL}", "\n")
-                        .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                    ));
+                    .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.GENERIC_ERROR));
             // ElytraProxy End
             return null;
           });
@@ -354,11 +252,6 @@ public class ClientPlaySessionHandler implements MinecraftSessionHandler {
         player.setClientBrand(PluginMessageUtil.readBrandMessage(packet.content()));
         backendConn.write(PluginMessageUtil
             .rewriteMinecraftBrand(packet, server.getVersion(), player.getProtocolVersion()));
-        if (!checkedByBrand) {
-          logger.info("{} has client brand {}", player,
-              PluginMessageUtil.readBrandMessage(packet.content()));
-          checkedByBrand = true;
-        }
       } else if (BungeeCordMessageResponder.isBungeeCordMessage(packet)) {
         return true;
       } else {
@@ -444,12 +337,6 @@ public class ClientPlaySessionHandler implements MinecraftSessionHandler {
     if (smc != null && !smc.isClosed() && serverConnection.getPhase().consideredComplete()) {
       smc.write(buf.retain());
     }
-    // ElytraProxy
-    // TODO: Move to botfilter check
-    if (!willBeKickedUnk) {
-      kickIfCheckNotPassed();
-      willBeKickedUnk = true;
-    }
   }
 
   @Override
@@ -460,13 +347,11 @@ public class ClientPlaySessionHandler implements MinecraftSessionHandler {
   @Override
   public void exception(Throwable throwable) {
     // ElytraProxy
-    player.disconnect(
+    player.disconnect(/*Component.translatable("velocity.error.player-connection-error",
+        NamedTextColor.RED));*/
         LegacyComponentSerializer
             .legacyAmpersand()
-            .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.PLAYER_CONNECTION_ERROR
-                .replace("{NL}", "\n")
-                .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-            ));
+            .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.PLAYER_CONNECTION_ERROR));
   }
 
   @Override
@@ -723,7 +608,7 @@ public class ClientPlaySessionHandler implements MinecraftSessionHandler {
         }, player.getConnection().eventLoop())
         .exceptionally((ex) -> {
           logger.error(
-              "Exception while finishing regular tab completion, with request {} and response {}",
+              "Exception while finishing regular tab completion, with request {} and response{}",
               request, response, ex);
           return null;
         });
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ConnectedPlayer.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ConnectedPlayer.java
index c40d7c3c..9279aa05 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ConnectedPlayer.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ConnectedPlayer.java
@@ -67,7 +67,6 @@ import com.velocitypowered.proxy.protocol.packet.title.GenericTitlePacket;
 import com.velocitypowered.proxy.server.VelocityRegisteredServer;
 import com.velocitypowered.proxy.tablist.VelocityTabList;
 import com.velocitypowered.proxy.tablist.VelocityTabListLegacy;
-import com.velocitypowered.proxy.util.ClosestLocaleMatcher;
 import com.velocitypowered.proxy.util.DurationUtils;
 import com.velocitypowered.proxy.util.collect.CappedSet;
 import io.netty.buffer.ByteBufUtil;
@@ -78,7 +77,6 @@ import java.util.Collection;
 import java.util.Collections;
 import java.util.List;
 import java.util.Locale;
-import java.util.Objects;
 import java.util.Optional;
 import java.util.Queue;
 import java.util.UUID;
@@ -94,10 +92,6 @@ import net.kyori.adventure.pointer.Pointers;
 import net.kyori.adventure.text.Component;
 import net.kyori.adventure.text.serializer.gson.GsonComponentSerializer;
 import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
-import net.kyori.adventure.text.serializer.plain.PlainComponentSerializer;
-import net.kyori.adventure.title.Title;
-import net.kyori.adventure.title.Title.Times;
-import net.kyori.adventure.translation.GlobalTranslator;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
@@ -108,6 +102,11 @@ import org.jetbrains.annotations.NotNull;
 public class ConnectedPlayer implements MinecraftConnectionAssociation, Player {
 
   private static final int MAX_PLUGIN_CHANNELS = 1024;
+  // ElytraProxy: Removed as unnecessary
+  /*
+  private static final PlainComponentSerializer PASS_THRU_TRANSLATE = new PlainComponentSerializer(
+      c -> "", TranslatableComponent::key);
+  */
   static final PermissionProvider DEFAULT_PERMISSIONS = s -> PermissionFunction.ALWAYS_UNDEFINED;
 
   private static final Logger logger = LogManager.getLogger(ConnectedPlayer.class);
@@ -140,10 +139,10 @@ public class ConnectedPlayer implements MinecraftConnectionAssociation, Player {
   private @Nullable ResourcePackInfo pendingResourcePack;
   private @Nullable ResourcePackInfo appliedResourcePack;
   private final @NotNull Pointers pointers = Player.super.pointers().toBuilder()
-          .withDynamic(Identity.UUID, this::getUniqueId)
-          .withDynamic(Identity.NAME, this::getUsername)
-          .withStatic(PermissionChecker.POINTER, getPermissionChecker())
-          .build();
+      .withDynamic(Identity.UUID, this::getUniqueId)
+      .withDynamic(Identity.NAME, this::getUsername)
+      .withStatic(PermissionChecker.POINTER, getPermissionChecker())
+      .build();
   private @Nullable String clientBrand;
 
   ConnectedPlayer(VelocityServer server, GameProfile profile, MinecraftConnection connection,
@@ -264,22 +263,23 @@ public class ConnectedPlayer implements MinecraftConnectionAssociation, Player {
     return connection.getProtocolVersion();
   }
 
-  /**
-   * Translates the message in the user's locale.
-   *
-   * @param message the message to translate
-   * @return the translated message
-   */
-  public Component translateMessage(Component message) {
-    Locale locale = ClosestLocaleMatcher.INSTANCE
-        .lookupClosest(this.settings == null ? Locale.getDefault() : this.settings.getLocale());
-    return GlobalTranslator.render(message, locale);
-  }
+  //ElytraProxy Start: Removed as unnecessary
+  ///**
+  // * Translates the message in the user's locale.
+  // *
+  // * @param message the message to translate
+  // * @return the translated message
+  // */
+  //public Component translateMessage(Component message) {
+  //  Locale locale = ClosestLocaleMatcher.INSTANCE
+  //      .lookupClosest(this.settings == null ? Locale.getDefault() : this.settings.getLocale());
+  //  return GlobalTranslator.render(message, locale);
+  //}
 
   @Override
   public void sendMessage(@NonNull Identity identity, @NonNull Component message) {
-    Component translated = translateMessage(message);
-    connection.write(Chat.createClientbound(identity, translated, this.getProtocolVersion()));
+    //Component translated = translateMessage(message);
+    connection.write(Chat.createClientbound(identity, message/*translated*/, this.getProtocolVersion()));
   }
 
   @Override
@@ -288,30 +288,30 @@ public class ConnectedPlayer implements MinecraftConnectionAssociation, Player {
     Preconditions.checkNotNull(message, "message");
     Preconditions.checkNotNull(type, "type");
 
-    Component translated = translateMessage(message);
-    Chat packet = Chat.createClientbound(identity, translated, this.getProtocolVersion());
+    //Component translated = translateMessage(message);
+    Chat packet = Chat.createClientbound(identity, message/*translated*/, this.getProtocolVersion());
     packet.setType(type == MessageType.CHAT ? Chat.CHAT_TYPE : Chat.SYSTEM_TYPE);
     connection.write(packet);
   }
 
   @Override
   public void sendActionBar(net.kyori.adventure.text.@NonNull Component message) {
-    Component translated = translateMessage(message);
+    //Component translated = translateMessage(message);
 
     ProtocolVersion playerVersion = getProtocolVersion();
     if (playerVersion.compareTo(ProtocolVersion.MINECRAFT_1_11) >= 0) {
       // Use the title packet instead.
       GenericTitlePacket pkt = GenericTitlePacket.constructTitlePacket(
-              GenericTitlePacket.ActionType.SET_ACTION_BAR, playerVersion);
+          GenericTitlePacket.ActionType.SET_ACTION_BAR, playerVersion);
       pkt.setComponent(ProtocolUtils.getJsonChatSerializer(playerVersion)
-          .serialize(translated));
+          .serialize(message/*translated*/));
       connection.write(pkt);
     } else {
       // Due to issues with action bar packets, we'll need to convert the text message into a
       // legacy message and then inject the legacy text into a component... yuck!
       JsonObject object = new JsonObject();
       object.addProperty("text", LegacyComponentSerializer.legacySection()
-          .serialize(translated));
+          .serialize(message/*translated*/));
       Chat chat = new Chat();
       chat.setMessage(object.toString());
       chat.setType(Chat.GAME_INFO_TYPE);
@@ -341,10 +341,12 @@ public class ConnectedPlayer implements MinecraftConnectionAssociation, Player {
 
   @Override
   public void sendPlayerListHeaderAndFooter(final Component header, final Component footer) {
+    /*
     Component translatedHeader = translateMessage(header);
     Component translatedFooter = translateMessage(footer);
-    this.playerListHeader = translatedHeader;
-    this.playerListFooter = translatedFooter;
+    */
+    this.playerListHeader = header/*translatedHeader*/;
+    this.playerListFooter = footer/*translatedFooter*/;
     if (this.getProtocolVersion().compareTo(ProtocolVersion.MINECRAFT_1_8) >= 0) {
       this.connection.write(HeaderAndFooter.create(header, footer, this.getProtocolVersion()));
     }
@@ -357,17 +359,17 @@ public class ConnectedPlayer implements MinecraftConnectionAssociation, Player {
           .getProtocolVersion());
 
       GenericTitlePacket titlePkt = GenericTitlePacket.constructTitlePacket(
-                      GenericTitlePacket.ActionType.SET_TITLE, this.getProtocolVersion());
-      titlePkt.setComponent(serializer.serialize(translateMessage(title.title())));
+          GenericTitlePacket.ActionType.SET_TITLE, this.getProtocolVersion());
+      titlePkt.setComponent(serializer.serialize(title.title()/*translateMessage(title.title())*/));
       connection.delayedWrite(titlePkt);
 
       GenericTitlePacket subtitlePkt = GenericTitlePacket.constructTitlePacket(
-              GenericTitlePacket.ActionType.SET_SUBTITLE, this.getProtocolVersion());
-      subtitlePkt.setComponent(serializer.serialize(translateMessage(title.subtitle())));
+          GenericTitlePacket.ActionType.SET_SUBTITLE, this.getProtocolVersion());
+      subtitlePkt.setComponent(serializer.serialize(title.title()/*translateMessage(title.subtitle())*/));
       connection.delayedWrite(subtitlePkt);
 
       GenericTitlePacket timesPkt = GenericTitlePacket.constructTitlePacket(
-              GenericTitlePacket.ActionType.SET_TIMES, this.getProtocolVersion());
+          GenericTitlePacket.ActionType.SET_TIMES, this.getProtocolVersion());
       net.kyori.adventure.title.Title.Times times = title.times();
       if (times != null) {
         timesPkt.setFadeIn((int) DurationUtils.toTicks(times.fadeIn()));
@@ -384,7 +386,7 @@ public class ConnectedPlayer implements MinecraftConnectionAssociation, Player {
   public void clearTitle() {
     if (this.getProtocolVersion().compareTo(ProtocolVersion.MINECRAFT_1_8) >= 0) {
       connection.write(GenericTitlePacket.constructTitlePacket(
-              GenericTitlePacket.ActionType.HIDE, this.getProtocolVersion()));
+          GenericTitlePacket.ActionType.HIDE, this.getProtocolVersion()));
     }
   }
 
@@ -392,7 +394,7 @@ public class ConnectedPlayer implements MinecraftConnectionAssociation, Player {
   public void resetTitle() {
     if (this.getProtocolVersion().compareTo(ProtocolVersion.MINECRAFT_1_8) >= 0) {
       connection.write(GenericTitlePacket.constructTitlePacket(
-                      GenericTitlePacket.ActionType.RESET, this.getProtocolVersion()));
+          GenericTitlePacket.ActionType.RESET, this.getProtocolVersion()));
     }
   }
 
@@ -446,16 +448,17 @@ public class ConnectedPlayer implements MinecraftConnectionAssociation, Player {
 
   /**
    * Disconnects the player from the proxy.
-   * @param reason the reason for disconnecting the player
+   * @param reason      the reason for disconnecting the player
    * @param duringLogin whether the disconnect happened during login
    */
   public void disconnect0(Component reason, boolean duringLogin) {
-    Component translated = this.translateMessage(reason);
+    //Component translated = this.translateMessage(reason);
 
     logger.info("{} has disconnected: {}", this,
-        LegacyComponentSerializer.legacySection().serialize(translated));
-    connection.closeWith(Disconnect.create(translated, this.getProtocolVersion()));
+        LegacyComponentSerializer.legacySection().serialize(reason/*translated*/));
+    connection.closeWith(Disconnect.create(reason/*translated*/, this.getProtocolVersion()));
   }
+  // ElytraProxy End
 
   public @Nullable VelocityServerConnection getConnectedServer() {
     return connectedServer;
@@ -471,9 +474,9 @@ public class ConnectedPlayer implements MinecraftConnectionAssociation, Player {
 
   /**
    * Handles unexpected disconnects.
-   * @param server the server we disconnected from
+   * @param server    the server we disconnected from
    * @param throwable the exception
-   * @param safe whether or not we can safely reconnect to a new server
+   * @param safe      whether or not we can safely reconnect to a new server
    */
   public void handleConnectionException(RegisteredServer server, Throwable throwable,
       boolean safe) {
@@ -496,32 +499,34 @@ public class ConnectedPlayer implements MinecraftConnectionAssociation, Player {
 
     Component friendlyError;
     if (connectedServer != null && connectedServer.getServerInfo().equals(server.getServerInfo())) {
-      friendlyError = LegacyComponentSerializer
+      // ElytraProxy Start
+      friendlyError = /*Component.translatable("velocity.error.connected-server-error",
+          Component.text(server.getServerInfo().getName()));*/
+      LegacyComponentSerializer
           .legacyAmpersand()
           .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.CONNECTED_SERVER_ERROR
-              .replace("{NL}", "\n")
-              .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
               .replace("{0}", server.getServerInfo().getName())
           );
     } else {
       logger.error("{}: unable to connect to server {}", this, server.getServerInfo().getName(),
           wrapped);
-      friendlyError = LegacyComponentSerializer
+      friendlyError = /*Component.translatable("velocity.error.connecting-server-error",
+          Component.text(server.getServerInfo().getName()));*/
+      LegacyComponentSerializer
           .legacyAmpersand()
           .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.CONNECTING_SERVER_ERROR
-              .replace("{NL}", "\n")
-              .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
               .replace("{0}", server.getServerInfo().getName())
           );
+      // ElytraProxy Start
     }
     handleConnectionException(server, null, friendlyError, safe);
   }
 
   /**
    * Handles unexpected disconnects.
-   * @param server the server we disconnected from
+   * @param server     the server we disconnected from
    * @param disconnect the disconnect packet
-   * @param safe whether or not we can safely reconnect to a new server
+   * @param safe       whether or not we can safely reconnect to a new server
    */
   public void handleConnectionException(RegisteredServer server, Disconnect disconnect,
       boolean safe) {
@@ -531,40 +536,38 @@ public class ConnectedPlayer implements MinecraftConnectionAssociation, Player {
     }
 
     Component disconnectReason = GsonComponentSerializer.gson().deserialize(disconnect.getReason());
+    // ElytraProxy Start
+    //String plainTextReason = PASS_THRU_TRANSLATE.serialize(disconnectReason);
     if (connectedServer != null && connectedServer.getServerInfo().equals(server.getServerInfo())) {
       logger.info("{}: kicked from server {}: {}", this, server.getServerInfo().getName(),
+          /*plainTextReason);*/
           LegacyComponentSerializer
               .legacySection()
               .serialize(disconnectReason));
-      // TODO: rewrite this shit
       handleConnectionException(server, disconnectReason,
           LegacyComponentSerializer
               .legacyAmpersand()
               .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.MOVED_TO_NEW_SERVER
-                  .replace("{NL}", "\n")
-                  .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
                   .replace("{0}", server.getServerInfo().getName())
-                  .replace("{1}", LegacyComponentSerializer
-                      .legacySection()
-                      .serialize(disconnectReason))
+                  .replace("{1}", LegacyComponentSerializer.legacySection().serialize(disconnectReason))
               ), safe);
     } else {
       logger.error("{}: disconnected while connecting to {}: {}", this,
-          server.getServerInfo().getName(),
-              LegacyComponentSerializer
-                  .legacySection()
-                  .serialize(disconnectReason));
+          server.getServerInfo().getName(), /*plainTextReason);*/
+          LegacyComponentSerializer
+              .legacySection()
+              .serialize(disconnectReason));
       handleConnectionException(server, disconnectReason,
+          /*Component.translatable("velocity.error.cant-connect", NamedTextColor.RED,
+              Component.text(server.getServerInfo().getName()),
+              disconnectReason),*/
           LegacyComponentSerializer
               .legacyAmpersand()
               .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.CANT_CONNECT
-                  .replace("{NL}", "\n")
-                  .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
                   .replace("{0}", server.getServerInfo().getName())
-                  .replace("{1}", LegacyComponentSerializer
-                      .legacySection()
-                      .serialize(disconnectReason))
+                  .replace("{1}", LegacyComponentSerializer.legacySection().serialize(disconnectReason))
               ), safe);
+      // ElytraProxy End
     }
   }
 
@@ -637,7 +640,7 @@ public class ConnectedPlayer implements MinecraftConnectionAssociation, Player {
                     // Impossible/nonsensical cases
                     case ALREADY_CONNECTED:
                     case CONNECTION_IN_PROGRESS:
-                    // Fatal case
+                      // Fatal case
                     case CONNECTION_CANCELLED:
                       Component fallbackMsg = res.getMessageComponent();
                       if (fallbackMsg == null) {
@@ -652,19 +655,22 @@ public class ConnectedPlayer implements MinecraftConnectionAssociation, Player {
                           getProtocolVersion()), ((Impl) status).isSafe());
                       break;
                     case SUCCESS:
-                      // ElytraProxy
-                      sendMessage(Identity.nil(),
-                          LegacyComponentSerializer
-                              .legacyAmpersand()
-                              .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.MOVED_TO_NEW_SERVER
-                                  .replace("{NL}", "\n")
-                                  .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                                  .replace("{0}", originalEvent
-                                      .getServer().getServerInfo().getName())
-                                  .replace("{1}", LegacyComponentSerializer
-                                      .legacySection()
-                                      .serialize(friendlyReason))
-                              ));
+                      Component requestedMessage = res.getMessageComponent();
+                      if (requestedMessage == null) {
+                        // ElytraProxy Start
+                        requestedMessage = /*Component.translatable("velocity.error.moved-to-new-server",
+                            NamedTextColor.RED,
+                            Component.text(originalEvent.getServer().getServerInfo().getName()),
+                            friendlyReason);*/
+                            LegacyComponentSerializer
+                                .legacyAmpersand()
+                                .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.MOVED_TO_NEW_SERVER
+                                    .replace("{0}", originalEvent.getServer().getServerInfo().getName())
+                                    .replace("{1}", LegacyComponentSerializer.legacySection().serialize(friendlyReason))
+                                );
+                        // ElytraProxy End
+                      }
+                      sendMessage(requestedMessage);
                       break;
                     default:
                       // The only remaining value is successful (no need to do anything!)
@@ -882,7 +888,7 @@ public class ConnectedPlayer implements MinecraftConnectionAssociation, Player {
         while (!outstandingResourcePacks.isEmpty()) {
           queued = outstandingResourcePacks.peek();
           if (queued.getShouldForce() && getProtocolVersion()
-                  .compareTo(ProtocolVersion.MINECRAFT_1_17) >= 0) {
+              .compareTo(ProtocolVersion.MINECRAFT_1_17) >= 0) {
             break;
           }
           onResourcePackResponse(PlayerResourcePackStatusEvent.Status.DECLINED);
@@ -924,19 +930,19 @@ public class ConnectedPlayer implements MinecraftConnectionAssociation, Player {
   public boolean onResourcePackResponse(PlayerResourcePackStatusEvent.Status status) {
     final boolean peek = status == PlayerResourcePackStatusEvent.Status.ACCEPTED;
     final ResourcePackInfo queued = peek
-            ? outstandingResourcePacks.peek() : outstandingResourcePacks.poll();
+        ? outstandingResourcePacks.peek() : outstandingResourcePacks.poll();
 
     server.getEventManager().fire(new PlayerResourcePackStatusEvent(this, status, queued))
-            .thenAcceptAsync(event -> {
-              if (event.getStatus() == PlayerResourcePackStatusEvent.Status.DECLINED
-                      && event.getPackInfo() != null && event.getPackInfo().getShouldForce()
-                      && (!event.isOverwriteKick() || event.getPlayer()
-                              .getProtocolVersion().compareTo(ProtocolVersion.MINECRAFT_1_17) >= 0)
-              ) {
-                event.getPlayer().disconnect(Component
-                        .translatable("multiplayer.requiredTexturePrompt.disconnect"));
-              }
-            });
+        .thenAcceptAsync(event -> {
+          if (event.getStatus() == PlayerResourcePackStatusEvent.Status.DECLINED
+              && event.getPackInfo() != null && event.getPackInfo().getShouldForce()
+              && (!event.isOverwriteKick() || event.getPlayer()
+              .getProtocolVersion().compareTo(ProtocolVersion.MINECRAFT_1_17) >= 0)
+          ) {
+            event.getPlayer().disconnect(Component
+                .translatable("multiplayer.requiredTexturePrompt.disconnect"));
+          }
+        });
 
     switch (status) {
       case ACCEPTED:
@@ -1033,7 +1039,7 @@ public class ConnectedPlayer implements MinecraftConnectionAssociation, Player {
         return Optional.of(ConnectionRequestBuilder.Status.CONNECTION_IN_PROGRESS);
       }
       if (connectedServer != null
-              && connectedServer.getServer().getServerInfo().equals(server.getServerInfo())) {
+          && connectedServer.getServer().getServerInfo().equals(server.getServerInfo())) {
         return Optional.of(ALREADY_CONNECTED);
       }
       return Optional.empty();
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/HandshakeSessionHandler.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/HandshakeSessionHandler.java
index 0f398877..b14d7298 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/HandshakeSessionHandler.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/HandshakeSessionHandler.java
@@ -69,15 +69,15 @@ public class HandshakeSessionHandler implements MinecraftSessionHandler {
 
   @Override
   public boolean handle(LegacyHandshake packet) {
-    // ElytraProxy
-    connection.closeWith(LegacyDisconnect
-        .from(
-            LegacyComponentSerializer
-                .legacyAmpersand()
-                .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.EXTREMELY_OLD_CLIENT
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                )));
+    // ElytraProxy Start
+    connection.closeWith(LegacyDisconnect.from(/*Component.text(
+        "Your client is extremely old. Please update to a newer version of Minecraft.",
+        NamedTextColor.RED)
+    ));*/
+        LegacyComponentSerializer
+            .legacyAmpersand()
+            .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.EXTREMELY_OLD_CLIENT)));
+    // ElytraProxy End
     return true;
   }
 
@@ -87,7 +87,8 @@ public class HandshakeSessionHandler implements MinecraftSessionHandler {
         cleanVhost(handshake.getServerAddress()), handshake);
     StateRegistry nextState = getStateForProtocol(handshake.getNextStatus());
     if (nextState == null) {
-      LOGGER.error("{} provided invalid protocol {}", ic, handshake.getNextStatus());
+      // ElytraProxy - really spams to console :(
+      // LOGGER.error("{} provided invalid protocol {}", ic, handshake.getNextStatus());
       connection.close(true);
     } else {
       connection.setState(nextState);
@@ -128,21 +129,18 @@ public class HandshakeSessionHandler implements MinecraftSessionHandler {
       return;
     }
 
-    // BotFilter backport start: global rate limiter
+    // BotFilter BackPort Start: Global rate limiter
     /*
     InetAddress address = ((InetSocketAddress) connection.getRemoteAddress()).getAddress();
     if (!server.getIpAttemptLimiter().attempt(address)) {
-      ic.disconnectQuietly(
+      ic.disconnectQuietly(//Component.translatable("velocity.error.logging-in-too-fast"));
           LegacyComponentSerializer
               .legacyAmpersand()
-              .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.LOGGING_IN_TOO_FAST
-                  .replace("{NL}", "\n")
-                  .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-              ));
+              .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.LOGGING_IN_TOO_FAST));
       return;
     }
     */
-    // BotFilter backport end - global rate limiter
+    // BotFilter BackPort End
 
     connection.setType(getHandshakeConnectionType(handshake));
 
@@ -150,14 +148,13 @@ public class HandshakeSessionHandler implements MinecraftSessionHandler {
     // and lower, otherwise IP information will never get forwarded.
     if (server.getConfiguration().getPlayerInfoForwardingMode() == PlayerInfoForwarding.MODERN
         && handshake.getProtocolVersion().compareTo(ProtocolVersion.MINECRAFT_1_13) < 0) {
-      // ElytraProxy
-      ic.disconnectQuietly(
+      // ElytraProxy Start
+      ic.disconnectQuietly(/*Component.translatable(
+          "velocity.error.modern-forwarding-needs-new-client"));*/
           LegacyComponentSerializer
               .legacyAmpersand()
-              .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.MODERN_FORWARDING_NEEDS_NEW_CLIENT
-                  .replace("{NL}", "\n")
-                  .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-              ));
+              .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.MODERN_FORWARDING_NEEDS_NEW_CLIENT));
+      // ElytraProxy End
       return;
     }
 
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/InitialInboundConnection.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/InitialInboundConnection.java
index c094cc90..00624abc 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/InitialInboundConnection.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/InitialInboundConnection.java
@@ -79,12 +79,15 @@ public final class InitialInboundConnection implements InboundConnection,
    * @param reason the reason for disconnecting
    */
   public void disconnect(Component reason) {
+    // ElytraProxy Start: Removed as unnecessary
+    /*
     Component translated = GlobalTranslator.render(reason, ClosestLocaleMatcher.INSTANCE
         .lookupClosest(Locale.getDefault()));
+    */
 
     logger.info("{} has disconnected: {}", this,
-        LegacyComponentSerializer.legacySection().serialize(translated));
-    connection.closeWith(Disconnect.create(translated, getProtocolVersion()));
+        LegacyComponentSerializer.legacySection().serialize(reason/*translated*/));
+    connection.closeWith(Disconnect.create(reason/*translated*/, getProtocolVersion()));
   }
 
   /**
@@ -92,8 +95,11 @@ public final class InitialInboundConnection implements InboundConnection,
    * @param reason the reason for disconnecting
    */
   public void disconnectQuietly(Component reason) {
+    /*
     Component translated = GlobalTranslator.render(reason, ClosestLocaleMatcher.INSTANCE
         .lookupClosest(Locale.getDefault()));
-    connection.closeWith(Disconnect.create(translated, getProtocolVersion()));
+    */
+    connection.closeWith(Disconnect.create(reason/*translated*/, getProtocolVersion()));
   }
+  // ElytraProxy End
 }
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/LoginSessionHandler.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/LoginSessionHandler.java
index 942c9911..acf75461 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/LoginSessionHandler.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/LoginSessionHandler.java
@@ -44,7 +44,6 @@ import com.velocitypowered.proxy.config.VelocityConfiguration;
 import com.velocitypowered.proxy.connection.MinecraftConnection;
 import com.velocitypowered.proxy.connection.MinecraftSessionHandler;
 import com.velocitypowered.proxy.protocol.StateRegistry;
-import com.velocitypowered.proxy.protocol.packet.Disconnect;
 import com.velocitypowered.proxy.protocol.packet.EncryptionRequest;
 import com.velocitypowered.proxy.protocol.packet.EncryptionResponse;
 import com.velocitypowered.proxy.protocol.packet.ServerLogin;
@@ -61,10 +60,9 @@ import java.util.UUID;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.ThreadLocalRandom;
+import net.elytrium.elytraproxy.ElytraProxy;
 import net.elytrium.elytraproxy.config.Settings;
 import net.kyori.adventure.text.Component;
-import net.kyori.adventure.text.format.NamedTextColor;
-import net.kyori.adventure.translation.GlobalTranslator;
 import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -86,7 +84,7 @@ public class LoginSessionHandler implements MinecraftSessionHandler {
   private @MonotonicNonNull ConnectedPlayer connectedPlayer;
 
   LoginSessionHandler(VelocityServer server, MinecraftConnection mcConnection,
-      InitialInboundConnection inbound) {
+                      InitialInboundConnection inbound) {
     this.server = Preconditions.checkNotNull(server, "server");
     this.mcConnection = Preconditions.checkNotNull(mcConnection, "mcConnection");
     this.inbound = Preconditions.checkNotNull(inbound, "inbound");
@@ -96,6 +94,8 @@ public class LoginSessionHandler implements MinecraftSessionHandler {
   public boolean handle(ServerLogin packet) {
     this.login = packet;
     beginPreLogin();
+    // ElytraProxy
+    server.getElytraProxy().getStatistics().addTotalConnectionPerSecond();
     return true;
   }
 
@@ -152,14 +152,13 @@ public class LoginSessionHandler implements MinecraftSessionHandler {
                 GameProfile.class), true);
           } else if (profileResponse.getStatusCode() == 204) {
             // Apparently an offline-mode user logged onto this online-mode proxy.
-            // ElytraProxy
-            inbound.disconnect(
+            // ElytraProxy Start
+            inbound.disconnect(/*Component.translatable("velocity.error.online-mode-only",
+                NamedTextColor.RED));*/
                 LegacyComponentSerializer
                     .legacyAmpersand()
-                    .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.ONLINE_MODE_ONLY
-                        .replace("{NL}", "\n")
-                        .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                    ));
+                    .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.ONLINE_MODE_ONLY));
+            // ElytraProxy End
           } else {
             // Something else went wrong
             logger.error(
@@ -183,8 +182,6 @@ public class LoginSessionHandler implements MinecraftSessionHandler {
   }
 
   private void beginPreLogin() {
-    // ElytraProxy
-    server.getElytraProxy().getStatistics().addTotalConnectionPerSecond();
     ServerLogin login = this.login;
     if (login == null) {
       throw new IllegalStateException("No ServerLogin packet received yet.");
@@ -205,14 +202,32 @@ public class LoginSessionHandler implements MinecraftSessionHandler {
             return;
           }
 
-          if (!result.isForceOfflineMode() && (server.getConfiguration().isOnlineMode() || result
-              .isOnlineModeAllowed())) {
-            // Request encryption.
-            EncryptionRequest request = generateEncryptionRequest();
-            this.verify = Arrays.copyOf(request.getVerifyToken(), 4);
-            mcConnection.write(request);
+          InetSocketAddress adr = inbound.getRemoteAddress();
+          if (!result.isForceOfflineMode()
+              && (server.getConfiguration().isOnlineMode() || result.isOnlineModeAllowed())
+              // Reduce amount of Mojang API when player is not checked
+              && !server.getElytraProxy().shouldCheck(login.getUsername(), adr.getAddress())) {
+            if (Settings.IMP.AUTH.ENABLE) {
+              ListenableFuture<Response> isPremiumResponse = server.getElytraProxy()
+                  .isPremiumRequest(login.getUsername()).execute();
+
+              isPremiumResponse.addListener(() -> {
+                try {
+                  if (isPremiumResponse.get().getStatusCode() == 200) {
+                    requestEncryption();
+                  } else {
+                    initializeOfflineMode();
+                  }
+                } catch (InterruptedException | ExecutionException e) {
+                  logger.error("Unable to authenticate with Mojang", e);
+                  mcConnection.close(true);
+                }
+              }, mcConnection.eventLoop());
+            } else {
+              requestEncryption();
+            }
           } else {
-            initializePlayer(GameProfile.forOfflinePlayer(login.getUsername()), false);
+            initializeOfflineMode();
           }
         }, mcConnection.eventLoop())
         .exceptionally((ex) -> {
@@ -221,6 +236,16 @@ public class LoginSessionHandler implements MinecraftSessionHandler {
         });
   }
 
+  private void requestEncryption() {
+    EncryptionRequest request = generateEncryptionRequest();
+    this.verify = Arrays.copyOf(request.getVerifyToken(), 4);
+    mcConnection.write(request);
+  }
+
+  private void initializeOfflineMode() {
+    initializePlayer(GameProfile.forOfflinePlayer(login.getUsername()), false);
+  }
+
   private EncryptionRequest generateEncryptionRequest() {
     byte[] verify = new byte[4];
     ThreadLocalRandom.current().nextBytes(verify);
@@ -239,69 +264,80 @@ public class LoginSessionHandler implements MinecraftSessionHandler {
         onlineMode);
     final GameProfile finalProfile = profile;
 
-    // BotFilter backport
-    server.getEventManager().fire(profileRequestEvent).thenAcceptAsync(profileEvent -> {
+    // BotFilter BackPort Start
+    server.getEventManager().fire(profileRequestEvent)./*thenComposeAsync*/thenAcceptAsync(profileEvent -> {
       if (mcConnection.isClosed()) {
         // The player disconnected while event execution
-        return;
+        return/* CompletableFuture.completedFuture(null)*/;
       }
+      // BotFilter BackPort End
 
       // Initiate a regular connection and move over to it.
       ConnectedPlayer player = new ConnectedPlayer(server, profileEvent.getGameProfile(),
           mcConnection, inbound.getVirtualHost().orElse(null), onlineMode);
       this.connectedPlayer = player;
-      // ElytraProxy Start: BotFilter and other
       if (!server.canRegisterConnection(player)) {
+        // ElytraProxy Start
         player.disconnect0(
             LegacyComponentSerializer
                 .legacyAmpersand()
-                .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.ALREADY_CONNECTED_PROXY
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                ), true);
-        return;
+                .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.ALREADY_CONNECTED_PROXY), true);
+        // BotFilter BackPort
+        return/* CompletableFuture.completedFuture(null)*/;
       }
+
+      logger.info("{} has connected", player);
+
+      // BotFilter BackPort Start
       /*
-      SkinSetup setup = server.getElytraProxy()
-          .getDatabase()
-          .getItem("skins", ImmutableMap.of("uuid", player.getUniqueId()), SkinSetup.class);
-      if (setup != null) {
-        List<GameProfile.Property> playerProfile = player.getGameProfileProperties();
-        playerProfile.add(new GameProfile.Property("textures", setup.texture, setup.signature));
-        player.setGameProfileProperties(playerProfile);
-      }
+      return server.getEventManager()
+          .fire(new PermissionsSetupEvent(player, ConnectedPlayer.DEFAULT_PERMISSIONS))
+          .thenAcceptAsync(event -> {
+            if (!mcConnection.isClosed()) {
+              // wait for permissions to load, then set the players permission function
+              final PermissionFunction function = event.createFunction(player);
+              if (function == null) {
+                logger.error(
+                    "A plugin permission provider {} provided an invalid permission function"
+                        + " for player {}. This is a bug in the plugin, not in Velocity. Falling"
+                        + " back to the default permission function.",
+                    event.getProvider().getClass().getName(),
+                    player.getUsername());
+              } else {
+                player.setPermissionFunction(function);
+              }
+              completeLoginProtocolPhaseAndInitialize(player);
+            }
+          }, mcConnection.eventLoop());
       */
-      logger.info("{} has connected", player);
+      // BotFilter BackPort End
+
       server.getElytraProxy().getStatistics().addConnectionPerSecond();
       if (Settings.IMP.MAIN_SETTINGS.MAINTENANCE.ENABLED
-          && !Settings.IMP.MAIN_SETTINGS.MAINTENANCE
-              .IGNORED_PLAYERS.contains(player.getUsername())) {
+          && !Settings.IMP.MAIN_SETTINGS.MAINTENANCE.IGNORED_PLAYERS.contains(player.getUsername())) {
         player.disconnect0(
             LegacyComponentSerializer
                 .legacyAmpersand()
-                .deserialize(Settings.IMP.MAIN_SETTINGS.MAINTENANCE.DISCONNECT_REASON
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                ), true);
+                .deserialize(Settings.IMP.MAIN_SETTINGS.MAINTENANCE.DISCONNECT_REASON), true);
         return;
       }
-      if (Settings.IMP.MAIN_SETTINGS.BANNED_PROTOCOLS
-          .contains(mcConnection.getProtocolVersion().getProtocol())) {
+      if (Settings.IMP.MAIN_SETTINGS.BANNED_PROTOCOLS.contains(mcConnection.getProtocolVersion().getProtocol())) {
         player.disconnect0(
             LegacyComponentSerializer
                 .legacyAmpersand()
-                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK.PROTOCOL_BLOCKED
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                ), true);
+                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK.PROTOCOL_BLOCKED), true);
         return;
       }
+      if (Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.ENABLE_CHECK_ON_CONNECTION) {
+        server.getElytraProxy().checkHostname(player, null, ElytraProxy.HostnameCheckType.LOGIN);
+      }
       if (Settings.IMP.ANTIBOT.ENABLE) {
         preLoginCheck(player);
       } else {
         completeLoginProtocol(player, true);
-        initialize(player);
+        authOrInitialize(player);
       }
+      // ElytraProxy End
     }, mcConnection.eventLoop()).exceptionally((ex) -> {
       logger.error("Exception during connection of {}", finalProfile, ex);
       return null;
@@ -310,39 +346,87 @@ public class LoginSessionHandler implements MinecraftSessionHandler {
 
   private void preLoginCheck(ConnectedPlayer player) {
     String formattedNickname = player.getUsername().toLowerCase();
-    if (Settings.IMP.ANTIBOT.BANNED_NICK_PATTERNS
-        .stream().anyMatch(formattedNickname::contains)) {
+    if (Settings.IMP.ANTIBOT.BANNED_NICK_PATTERNS.stream().anyMatch(formattedNickname::contains)) {
       player.disconnect0(
           LegacyComponentSerializer
               .legacyAmpersand()
-              .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK.NICK_BLOCKED
-                  .replace("{NL}", "\n")
-                  .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-              ), true);
+              .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK.NICK_BLOCKED), true);
       server.getElytraProxy().getStatistics().addBlockedConnection();
       server.getElytraProxy().getStatistics().addBlockedBots();
       return;
     }
-    // injectBotFilterOrFinishLogin(player);
-
-    // temp
-    completeLoginProtocol(player, true);
-    initialize(player);
+    injectBotFilterOrFinishLogin(player);
   }
 
+  // BotFilter BackPort Start
   private void injectBotFilterOrFinishLogin(ConnectedPlayer player) {
     if (server.getElytraProxy().shouldCheck(player)) {
       server.getElytraProxy().setupPipelineAndStartCheck(player, this);
     } else {
       completeLoginProtocol(player, true);
-      initialize(player);
+      authOrInitialize(player);
+    }
+  }
+
+  /*
+  private void completeLoginProtocolPhaseAndInitialize(ConnectedPlayer player) {
+    int threshold = server.getConfiguration().getCompressionThreshold();
+    if (threshold >= 0 && mcConnection.getProtocolVersion().compareTo(MINECRAFT_1_8) >= 0) {
+      mcConnection.write(new SetCompression(threshold));
+      mcConnection.setCompressionThreshold(threshold);
     }
+    VelocityConfiguration configuration = server.getConfiguration();
+    UUID playerUniqueId = player.getUniqueId();
+    if (configuration.getPlayerInfoForwardingMode() == PlayerInfoForwarding.NONE) {
+      playerUniqueId = UuidUtils.generateOfflinePlayerUuid(player.getUsername());
+    }
+    ServerLoginSuccess success = new ServerLoginSuccess();
+    success.setUsername(player.getUsername());
+    success.setUuid(playerUniqueId);
+    mcConnection.write(success);
+
+    mcConnection.setAssociation(player);
+    mcConnection.setState(StateRegistry.PLAY);
+
+    server.getEventManager().fire(new LoginEvent(player))
+        .thenAcceptAsync(event -> {
+          if (mcConnection.isClosed()) {
+            // The player was disconnected
+            server.getEventManager().fireAndForget(new DisconnectEvent(player,
+                LoginStatus.CANCELLED_BY_USER_BEFORE_COMPLETE));
+            return;
+          }
+
+          Optional<Component> reason = event.getResult().getReasonComponent();
+          if (reason.isPresent()) {
+            player.disconnect0(reason.get(), true);
+          } else {
+            if (!server.registerConnection(player)) {
+              player.disconnect0(Component.translatable("velocity.error.already-connected-proxy"),
+                  true);
+              return;
+            }
+
+            mcConnection.setSessionHandler(new InitialConnectSessionHandler(player));
+            server.getEventManager().fire(new PostLoginEvent(player))
+                .thenCompose((ignored) -> connectToInitialServer(player))
+                .exceptionally((ex) -> {
+                  logger.error("Exception while connecting {} to initial server", player, ex);
+                  return null;
+                });
+          }
+        }, mcConnection.eventLoop())
+        .exceptionally((ex) -> {
+          logger.error("Exception while completing login initialisation phase for {}", player, ex);
+          return null;
+        });
   }
+  */
 
   public void completeLoginProtocol(ConnectedPlayer player, boolean flush) {
     int threshold = server.getConfiguration().getCompressionThreshold();
     if (threshold >= 0 && mcConnection.getProtocolVersion().compareTo(MINECRAFT_1_8) >= 0) {
-      mcConnection.delayedWrite(new SetCompression(threshold));
+      mcConnection./*write*/delayedWrite(new SetCompression(threshold));
       mcConnection.setCompressionThreshold(threshold);
     }
     VelocityConfiguration configuration = server.getConfiguration();
@@ -353,22 +437,39 @@ public class LoginSessionHandler implements MinecraftSessionHandler {
     ServerLoginSuccess success = new ServerLoginSuccess();
     success.setUsername(player.getUsername());
     success.setUuid(playerUniqueId);
-    mcConnection.delayedWrite(success);
+    mcConnection./*write*/delayedWrite(success);
+
     if (flush) {
       mcConnection.flush();
     }
   }
 
+  // ElytraProxy Start
+  public void authOrInitialize(ConnectedPlayer player) {
+    if (Settings.IMP.AUTH.ENABLE && server.getElytraProxy().shouldAuth(player)) {
+      if (Settings.IMP.AUTH.ONLINE_MODE_NEED_AUTH || !player.isOnlineMode()) {
+        server.getElytraProxy().auth(player, this);
+        return;
+      }
+    }
+
+    player.getConnection().setSessionHandler(this);
+    initialize(player);
+  }
+  // ElytraProxy End
 
   public void initialize(ConnectedPlayer player) {
     mcConnection.setAssociation(player);
     mcConnection.setState(StateRegistry.PLAY);
+
     server.getEventManager()
         .fire(new PermissionsSetupEvent(player, ConnectedPlayer.DEFAULT_PERMISSIONS))
         .thenComposeAsync(premissionEvent -> {
+
           if (mcConnection.isClosed()) {
             return CompletableFuture.completedFuture(null);
           }
+
           // wait for permissions to load, then set the players permission function
           final PermissionFunction function = premissionEvent.createFunction(player);
           if (function == null) {
@@ -381,46 +482,44 @@ public class LoginSessionHandler implements MinecraftSessionHandler {
           } else {
             player.setPermissionFunction(function);
           }
-          return server.getEventManager().fire(new LoginEvent(player))
-        .thenAcceptAsync(event -> {
-          if (mcConnection.isClosed()) {
-            // The player was disconnected
-            server.getEventManager().fireAndForget(new DisconnectEvent(player,
-                LoginStatus.CANCELLED_BY_USER_BEFORE_COMPLETE));
-            return;
-          }
-
-          Optional<Component> reason = event.getResult().getReasonComponent();
-          if (reason.isPresent()) {
-            player.disconnect0(reason.get(), true);
-          } else {
-            if (!server.registerConnection(player)) {
-              player.disconnect0(
-                  LegacyComponentSerializer
-                      .legacyAmpersand()
-                      .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.ALREADY_CONNECTED_PROXY
-                          .replace("{NL}", "\n")
-                          .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                      ), true);
-              return;
-            }
 
-            mcConnection.setSessionHandler(new InitialConnectSessionHandler(player));
-            server.getEventManager().fire(new PostLoginEvent(player))
-                .thenCompose((ignored) -> connectToInitialServer(player))
-                .exceptionally((ex) -> {
-                  logger.error("Exception while connecting {} to initial server", player, ex);
-                  return null;
-                });
-          }
-        }, mcConnection.eventLoop());
+          return server.getEventManager().fire(new LoginEvent(player))
+              .thenAcceptAsync(event -> {
+                if (mcConnection.isClosed()) {
+                  // The player was disconnected
+                  server.getEventManager().fireAndForget(new DisconnectEvent(player,
+                      LoginStatus.CANCELLED_BY_USER_BEFORE_COMPLETE));
+                  return;
+                }
+
+                Optional<Component> reason = event.getResult().getReasonComponent();
+                if (reason.isPresent()) {
+                  player.disconnect0(reason.get(), true);
+                } else {
+                  if (!server.registerConnection(player)) {
+                    player.disconnect0(/*Component.translatable("velocity.error.already-connected-proxy"),*/
+                        LegacyComponentSerializer
+                            .legacyAmpersand()
+                            .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.ALREADY_CONNECTED_PROXY), true);
+                    return;
+                  }
+
+                  mcConnection.setSessionHandler(new InitialConnectSessionHandler(player));
+                  server.getEventManager().fire(new PostLoginEvent(player))
+                      .thenCompose((ignored) -> connectToInitialServer(player))
+                      .exceptionally((ex) -> {
+                        logger.error("Exception while connecting {} to initial server", player, ex);
+                        return null;
+                      });
+                }
+              }, mcConnection.eventLoop());
         }, mcConnection.eventLoop())
         .exceptionally((ex) -> {
           logger.error("Exception while completing login initialisation phase for {}", player, ex);
           return null;
         });
   }
-  // ElytraProxy End
+  // BotFilter BackPort End
 
   private CompletableFuture<Void> connectToInitialServer(ConnectedPlayer player) {
     Optional<RegisteredServer> initialFromConfig = player.getNextServerToTry();
@@ -430,17 +529,17 @@ public class LoginSessionHandler implements MinecraftSessionHandler {
     return server.getEventManager().fire(event)
         .thenRunAsync(() -> {
           Optional<RegisteredServer> toTry = event.getInitialServer();
-          if (!toTry.isPresent()) {
-            player.disconnect0(
+          if (toTry.isEmpty()) {
+            // ElytraProxy Start
+            player.disconnect0(/*Component.translatable("velocity.error.no-available-servers",
+                NamedTextColor.RED), true);*/
                 LegacyComponentSerializer
                     .legacyAmpersand()
-                    .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.NO_AVAILABLE_SERVERS
-                        .replace("{NL}", "\n")
-                        .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                    ), true);
+                    .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.NO_AVAILABLE_SERVERS), true);
+            // ElytraProxy End
             return;
           }
-          player.createConnectionRequest(toTry.get()).fireAndForget();
+          player.createConnectionRequest(toTry.get()).connect();
         }, mcConnection.eventLoop());
   }
 
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/StatusSessionHandler.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/StatusSessionHandler.java
index e5ea219d..7022c8e9 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/StatusSessionHandler.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/StatusSessionHandler.java
@@ -44,6 +44,7 @@ import java.util.List;
 import java.util.Locale;
 import java.util.Optional;
 import java.util.concurrent.CompletableFuture;
+import net.elytrium.elytraproxy.ElytraProxy;
 import net.elytrium.elytraproxy.config.Settings;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -79,24 +80,27 @@ public class StatusSessionHandler implements MinecraftSessionHandler {
   private ServerPing constructLocalPing(ProtocolVersion version) {
     VelocityConfiguration configuration = server.getConfiguration();
     return new ServerPing(
-        // ElytraProxy
+        // ElytraProxy Start
         new ServerPing.Version(version.getProtocol(),
+            /*"Velocity " + ProtocolVersion.SUPPORTED_VERSION_STRING),*/
             (Settings.IMP.MAIN_SETTINGS.MAINTENANCE.ENABLED
                 ? Settings.IMP.MAIN_SETTINGS.MAINTENANCE.PING_VERSION
                 : Settings.IMP.MAIN_SETTINGS.PING_VERSION)
-                    .replace('&', '§')
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)),
-        new ServerPing.Players(Settings.IMP.MAIN_SETTINGS.MAINTENANCE.ENABLED
-            ? 0
-            : server.getPlayerCount(),
+                    .replace('&', '§')),
+        new ServerPing.Players(/*server.getPlayerCount(), configuration.getShowMaxPlayers(),
+            ImmutableList.of()),*/
+            Settings.IMP.MAIN_SETTINGS.MAINTENANCE.ENABLED
+                ? 0
+                : server.getPlayerCount(),
             Settings.IMP.MAIN_SETTINGS.MAINTENANCE.ENABLED
-            ? 0
-            : configuration.getShowMaxPlayers(),
+                ? 0
+                : configuration.getShowMaxPlayers(),
             ImmutableList.of()),
+        /*configuration.getMotd(),*/
         Settings.IMP.MAIN_SETTINGS.MAINTENANCE.ENABLED
             ? server.getMaintenanceMotd()
             : configuration.getMotd(),
+        // ElytraProxy End
         configuration.getFavicon().orElse(null),
         configuration.isAnnounceForge() ? ModInfo.DEFAULT : null
     );
@@ -176,14 +180,17 @@ public class StatusSessionHandler implements MinecraftSessionHandler {
 
   private CompletableFuture<ServerPing> getInitialPing() {
     VelocityConfiguration configuration = server.getConfiguration();
-    ProtocolVersion shownVersion;
-    // ElytraProxy
+    ProtocolVersion shownVersion/* = ProtocolVersion.isSupported(connection.getProtocolVersion())
+        ? connection.getProtocolVersion() : ProtocolVersion.MAXIMUM_VERSION*/;
+    // ElytraProxy Start
     if (Settings.IMP.MAIN_SETTINGS.MAINTENANCE.ENABLED) {
       shownVersion = ProtocolVersion.MAINTENANCE;
     } else {
       shownVersion = ProtocolVersion.isSupported(connection.getProtocolVersion())
-        ? connection.getProtocolVersion() : ProtocolVersion.MAXIMUM_VERSION;
+          ? connection.getProtocolVersion()
+          : ProtocolVersion.MAXIMUM_VERSION;
     }
+    // ElytraProxy End
     PingPassthroughMode passthrough = configuration.getPingPassthrough();
 
     if (passthrough == PingPassthroughMode.DISABLED) {
@@ -206,8 +213,14 @@ public class StatusSessionHandler implements MinecraftSessionHandler {
     this.pingReceived = true;
     getInitialPing()
         .thenCompose(ping -> server.getEventManager().fire(new ProxyPingEvent(inbound, ping)))
-        .thenAcceptAsync(event -> connection.closeWith(
-            LegacyDisconnect.fromServerPing(event.getPing(), packet.getVersion())),
+        .thenAcceptAsync(/*event -> connection.closeWith(
+            LegacyDisconnect.fromServerPing(event.getPing(), packet.getVersion())),*/
+            (event) -> {
+              connection.closeWith(LegacyDisconnect.fromServerPing(event.getPing(), packet.getVersion()));
+              if (Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.ENABLE_CHECK_ON_PING) {
+                server.getElytraProxy().checkHostname(null, inbound, ElytraProxy.HostnameCheckType.PING);
+              }
+            },
             connection.eventLoop())
         .exceptionally((ex) -> {
           logger.error("Exception while handling legacy ping {}", packet, ex);
@@ -231,18 +244,26 @@ public class StatusSessionHandler implements MinecraftSessionHandler {
 
     getInitialPing()
         // ElytraProxy
-        .thenCompose(Settings.IMP.MAIN_SETTINGS.MAINTENANCE.ENABLED
-            ? ping -> CompletableFuture.completedFuture(new ProxyPingEvent(inbound, ping))
-            : ping -> server.getEventManager().fire(new ProxyPingEvent(inbound, ping)))
+        .thenCompose(/*ping -> server.getEventManager().fire(new ProxyPingEvent(inbound, ping)))*/
+            Settings.IMP.MAIN_SETTINGS.MAINTENANCE.ENABLED
+                ? ping -> CompletableFuture.completedFuture(new ProxyPingEvent(inbound, ping))
+                : ping -> server.getEventManager().fire(new ProxyPingEvent(inbound, ping)))
         .thenAcceptAsync(
             (event) -> {
               StringBuilder json = new StringBuilder();
               VelocityServer.getPingGsonInstance(connection.getProtocolVersion())
                   .toJson(event.getPing(), json);
               connection.write(new StatusResponse(json));
+              // BotFilter BackPort Start: Global rate limiter
               server.getIpAttemptLimiter()
-                  //BotFilter - global rate limiter
-                  .unthrottle(((InetSocketAddress)connection.getRemoteAddress()).getAddress());
+                  .unthrottle(((InetSocketAddress) connection.getRemoteAddress()).getAddress());
+              // BotFilter BackPort End
+              // ElytraProxy Start
+              // TODO: FIX
+              if (Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.ENABLE_CHECK_ON_PING) {
+                server.getElytraProxy().checkHostname(null, inbound, ElytraProxy.HostnameCheckType.PING);
+              }
+              // ElytraProxy End
             },
             connection.eventLoop())
         .exceptionally((ex) -> {
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/forge/legacy/LegacyForgeConnectionType.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/forge/legacy/LegacyForgeConnectionType.java
index 5e063b28..836548e7 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/forge/legacy/LegacyForgeConnectionType.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/forge/legacy/LegacyForgeConnectionType.java
@@ -36,8 +36,7 @@ public class LegacyForgeConnectionType extends ConnectionTypeImpl {
   }
 
   @Override
-  public GameProfile addGameProfileTokensIfRequired(GameProfile original,
-      PlayerInfoForwarding forwardingType) {
+  public GameProfile addGameProfileTokensIfRequired(GameProfile original, PlayerInfoForwarding forwardingType) {
     // We can't forward the FML token to the server when we are running in legacy forwarding mode,
     // since both use the "hostname" field in the handshake. We add a special property to the
     // profile instead, which will be ignored by non-Forge servers and can be intercepted by a
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/forge/legacy/LegacyForgeConstants.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/forge/legacy/LegacyForgeConstants.java
index 7dff8855..3c526c60 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/forge/legacy/LegacyForgeConstants.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/forge/legacy/LegacyForgeConstants.java
@@ -67,7 +67,7 @@ public class LegacyForgeConstants {
   /**
    * The payload for the reset packet.
    */
-  static final byte[] FORGE_LEGACY_HANDSHAKE_RESET_DATA = new byte[]{RESET_DATA_DISCRIMINATOR, 0};
+  static final byte[] FORGE_LEGACY_HANDSHAKE_RESET_DATA = new byte[] {RESET_DATA_DISCRIMINATOR, 0};
 
   private LegacyForgeConstants() {
     throw new AssertionError();
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/forge/legacy/LegacyForgeHandshakeBackendPhase.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/forge/legacy/LegacyForgeHandshakeBackendPhase.java
index ed435011..8c3ff28b 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/forge/legacy/LegacyForgeHandshakeBackendPhase.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/forge/legacy/LegacyForgeHandshakeBackendPhase.java
@@ -106,7 +106,8 @@ public enum LegacyForgeHandshakeBackendPhase implements BackendConnectionPhase {
     }
   };
 
-  @Nullable private final Integer packetToAdvanceOn;
+  @Nullable
+  private final Integer packetToAdvanceOn;
 
   /**
    * Creates an instance of the {@link LegacyForgeHandshakeBackendPhase}.
@@ -123,8 +124,7 @@ public enum LegacyForgeHandshakeBackendPhase implements BackendConnectionPhase {
 
   @Override
   public final boolean handle(VelocityServerConnection serverConnection,
-                              ConnectedPlayer player,
-                              PluginMessage message) {
+      ConnectedPlayer player, PluginMessage message) {
     if (message.getChannel().equals(LegacyForgeConstants.FORGE_LEGACY_HANDSHAKE_CHANNEL)) {
       // Get the phase and check if we need to start the next phase.
       LegacyForgeHandshakeBackendPhase newPhase = getNewPhase(serverConnection, message);
@@ -147,8 +147,7 @@ public enum LegacyForgeHandshakeBackendPhase implements BackendConnectionPhase {
   }
 
   @Override
-  public void onDepartForNewServer(VelocityServerConnection serverConnection,
-                                   ConnectedPlayer player) {
+  public void onDepartForNewServer(VelocityServerConnection serverConnection, ConnectedPlayer player) {
     // If the server we are departing is modded, we must always reset the client's handshake.
     player.getPhase().resetConnectionPhase(player);
   }
@@ -175,11 +174,11 @@ public enum LegacyForgeHandshakeBackendPhase implements BackendConnectionPhase {
    * Get the phase to act on, depending on the packet that has been sent.
    *
    * @param serverConnection The server Velocity is connecting to
-   * @param packet The packet
+   * @param packet           The packet
    * @return The phase to transition to, which may be the same as before.
    */
   private LegacyForgeHandshakeBackendPhase getNewPhase(VelocityServerConnection serverConnection,
-                                                       PluginMessage packet) {
+      PluginMessage packet) {
     if (packetToAdvanceOn != null
         && LegacyForgeUtil.getHandshakePacketDiscriminator(packet) == packetToAdvanceOn) {
       LegacyForgeHandshakeBackendPhase phaseToTransitionTo = nextPhase();
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/forge/legacy/LegacyForgeHandshakeClientPhase.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/forge/legacy/LegacyForgeHandshakeClientPhase.java
index 3bb1510f..333a6330 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/forge/legacy/LegacyForgeHandshakeClientPhase.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/forge/legacy/LegacyForgeHandshakeClientPhase.java
@@ -55,9 +55,7 @@ public enum LegacyForgeHandshakeClientPhase implements ClientConnectionPhase {
     }
 
     @Override
-    boolean onHandle(ConnectedPlayer player,
-        PluginMessage message,
-        MinecraftConnection backendConn) {
+    boolean onHandle(ConnectedPlayer player, PluginMessage message, MinecraftConnection backendConn) {
       // If we stay in this phase, we do nothing because it means the packet wasn't handled.
       // Returning false indicates this
       return false;
@@ -76,7 +74,6 @@ public enum LegacyForgeHandshakeClientPhase implements ClientConnectionPhase {
   },
 
 
-
   /**
    * The Mod list is sent to the server, captured by Velocity.
    * Transition to {@link #WAITING_SERVER_DATA} when an ACK is sent, which
@@ -89,9 +86,7 @@ public enum LegacyForgeHandshakeClientPhase implements ClientConnectionPhase {
     }
 
     @Override
-    boolean onHandle(ConnectedPlayer player,
-        PluginMessage message,
-        MinecraftConnection backendConn) {
+    boolean onHandle(ConnectedPlayer player, PluginMessage message, MinecraftConnection backendConn) {
       // Read the mod list if we haven't already.
       if (!player.getModInfo().isPresent()) {
         List<ModInfo.Mod> mods = LegacyForgeUtil.readModList(message);
@@ -163,9 +158,7 @@ public enum LegacyForgeHandshakeClientPhase implements ClientConnectionPhase {
     }
 
     @Override
-    boolean onHandle(ConnectedPlayer player,
-        PluginMessage message,
-        MinecraftConnection backendConn) {
+    boolean onHandle(ConnectedPlayer player, PluginMessage message, MinecraftConnection backendConn) {
       super.onHandle(player, message, backendConn);
 
       // just in case the timing is awful
@@ -180,7 +173,8 @@ public enum LegacyForgeHandshakeClientPhase implements ClientConnectionPhase {
     }
   };
 
-  @Nullable private final Integer packetToAdvanceOn;
+  @Nullable
+  private final Integer packetToAdvanceOn;
 
   /**
    * Creates an instance of the {@link LegacyForgeHandshakeClientPhase}.
@@ -196,9 +190,7 @@ public enum LegacyForgeHandshakeClientPhase implements ClientConnectionPhase {
   }
 
   @Override
-  public final boolean handle(ConnectedPlayer player,
-      PluginMessage message,
-      VelocityServerConnection server) {
+  public final boolean handle(ConnectedPlayer player, PluginMessage message, VelocityServerConnection server) {
     if (server != null) {
       MinecraftConnection backendConn = server.getConnection();
       if (backendConn != null
@@ -221,15 +213,12 @@ public enum LegacyForgeHandshakeClientPhase implements ClientConnectionPhase {
   /**
    * Handles the phase tasks.
    *
-   * @param player The player
-   * @param message The message to handle
+   * @param player      The player
+   * @param message     The message to handle
    * @param backendConn The backend connection to write to, if required.
-   *
    * @return true if handled, false otherwise.
    */
-  boolean onHandle(ConnectedPlayer player,
-      PluginMessage message,
-      MinecraftConnection backendConn) {
+  boolean onHandle(ConnectedPlayer player, PluginMessage message, MinecraftConnection backendConn) {
     // Send the packet on to the server.
     backendConn.write(message.retain());
 
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/forge/legacy/LegacyForgeUtil.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/forge/legacy/LegacyForgeUtil.java
index f541c789..8b0bd4b9 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/forge/legacy/LegacyForgeUtil.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/forge/legacy/LegacyForgeUtil.java
@@ -57,7 +57,7 @@ class LegacyForgeUtil {
   static List<ModInfo.Mod> readModList(PluginMessage message) {
     Preconditions.checkNotNull(message, "message");
     Preconditions.checkArgument(message.getChannel().equals(FORGE_LEGACY_HANDSHAKE_CHANNEL),
-            "message is not a FML HS plugin message");
+        "message is not a FML HS plugin message");
 
     ByteBuf contents = message.content().slice();
     byte discriminator = contents.readByte();
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/player/VelocityResourcePackInfo.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/player/VelocityResourcePackInfo.java
index 250e9b3a..e6b8330a 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/player/VelocityResourcePackInfo.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/player/VelocityResourcePackInfo.java
@@ -23,6 +23,7 @@ import net.kyori.adventure.text.Component;
 import org.checkerframework.checker.nullness.qual.Nullable;
 
 public final class VelocityResourcePackInfo implements ResourcePackInfo {
+
   private final String url;
   private final @Nullable byte[] hash;
   private final boolean shouldForce;
@@ -30,7 +31,7 @@ public final class VelocityResourcePackInfo implements ResourcePackInfo {
   private final Origin origin;
 
   private VelocityResourcePackInfo(String url, @Nullable byte[] hash, boolean shouldForce,
-                                  @Nullable Component prompt, Origin origin) {
+      @Nullable Component prompt, Origin origin) {
     this.url = url;
     this.hash = hash;
     this.shouldForce = shouldForce;
@@ -106,5 +107,4 @@ public final class VelocityResourcePackInfo implements ResourcePackInfo {
       this.origin = origin;
     }
   }
-
 }
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionData.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionData.java
index 07b69bae..5872e978 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionData.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionData.java
@@ -23,6 +23,7 @@ import net.kyori.adventure.nbt.CompoundBinaryTag;
 import org.checkerframework.checker.nullness.qual.Nullable;
 
 public final class DimensionData {
+
   private static final String UNKNOWN_DIMENSION_ID = "velocity:unknown_dimension";
 
   private final String registryIdentifier;
@@ -48,26 +49,27 @@ public final class DimensionData {
 
   /**
    * Initializes a new {@link DimensionData} instance.
-   * @param registryIdentifier the identifier for the dimension from the registry.
-   * @param dimensionId the dimension ID contained in the registry (the "id" tag)
-   * @param isNatural indicates if the dimension use natural world generation (e.g. overworld)
-   * @param ambientLight the light level the client sees without external lighting
-   * @param isShrunk indicates if the world is shrunk, aka not the full 256 blocks (e.g. nether)
-   * @param isUltrawarm internal dimension warmth flag
-   * @param hasCeiling indicates if the dimension has a ceiling layer
-   * @param hasSkylight indicates if the dimension should display the sun
-   * @param isPiglinSafe indicates if piglins should naturally zombify in this dimension
-   * @param doBedsWork indicates if players should be able to sleep in beds in this dimension
-   * @param doRespawnAnchorsWork indicates if player respawn points can be used in this dimension
-   * @param hasRaids indicates if raids can be spawned in the dimension
-   * @param logicalHeight the natural max height for the given dimension
+   *
+   * @param registryIdentifier         the identifier for the dimension from the registry.
+   * @param dimensionId                the dimension ID contained in the registry (the "id" tag)
+   * @param isNatural                  indicates if the dimension use natural world generation (e.g. overworld)
+   * @param ambientLight               the light level the client sees without external lighting
+   * @param isShrunk                   indicates if the world is shrunk, aka not the full 256 blocks (e.g. nether)
+   * @param isUltrawarm                internal dimension warmth flag
+   * @param hasCeiling                 indicates if the dimension has a ceiling layer
+   * @param hasSkylight                indicates if the dimension should display the sun
+   * @param isPiglinSafe               indicates if piglins should naturally zombify in this dimension
+   * @param doBedsWork                 indicates if players should be able to sleep in beds in this dimension
+   * @param doRespawnAnchorsWork       indicates if player respawn points can be used in this dimension
+   * @param hasRaids                   indicates if raids can be spawned in the dimension
+   * @param logicalHeight              the natural max height for the given dimension
    * @param burningBehaviourIdentifier the identifier for how burning blocks work in the dimension
-   * @param fixedTime optional. If set to any game daytime value will deactivate time cycle
-   * @param createDragonFight optional. Internal flag used in the end dimension
-   * @param coordinateScale optional, unknown purpose
-   * @param effects optional, unknown purpose
-   * @param minY the world effective lowest build-level
-   * @param height the world height above zero
+   * @param fixedTime                  optional. If set to any game daytime value will deactivate time cycle
+   * @param createDragonFight          optional. Internal flag used in the end dimension
+   * @param coordinateScale            optional, unknown purpose
+   * @param effects                    optional, unknown purpose
+   * @param minY                       the world effective lowest build-level
+   * @param height                     the world height above zero
    */
   public DimensionData(String registryIdentifier,
       @Nullable Integer dimensionId,
@@ -193,11 +195,10 @@ public final class DimensionData {
    * and {@code dimensionId}.
    *
    * @param registryIdentifier the identifier for the dimension from the registry
-   * @param dimensionId optional, dimension ID
+   * @param dimensionId        optional, dimension ID
    * @return a new {@link DimensionData}
    */
-  public DimensionData annotateWith(String registryIdentifier,
-      @Nullable Integer dimensionId) {
+  public DimensionData annotateWith(String registryIdentifier, @Nullable Integer dimensionId) {
     return new DimensionData(registryIdentifier, dimensionId, isNatural, ambientLight, isShrunk,
         isUltrawarm, hasCeiling, hasSkylight, isPiglinSafe, doBedsWork, doRespawnAnchorsWork,
         hasRaids, logicalHeight, burningBehaviourIdentifier, fixedTime, createDragonFight,
@@ -216,8 +217,7 @@ public final class DimensionData {
    * @param version the protocol version
    * @return game dimension data
    */
-  public static DimensionData decodeBaseCompoundTag(CompoundBinaryTag details,
-      ProtocolVersion version) {
+  public static DimensionData decodeBaseCompoundTag(CompoundBinaryTag details, ProtocolVersion version) {
     boolean isNatural = details.getBoolean("natural");
     float ambientLight = details.getFloat("ambient_light");
     boolean isShrunk = details.getBoolean("shrunk");
@@ -241,10 +241,8 @@ public final class DimensionData {
     Integer minY = details.keySet().contains("min_y") ? details.getInt("min_y") : null;
     Integer height = details.keySet().contains("height") ? details.getInt("height") : null;
     if (version.compareTo(ProtocolVersion.MINECRAFT_1_17) >= 0) {
-      Preconditions.checkNotNull(height,
-              "DimensionData requires 'height' to be present for this version");
-      Preconditions.checkNotNull(minY,
-              "DimensionData requires 'minY' to be present for this version");
+      Preconditions.checkNotNull(height, "DimensionData requires 'height' to be present for this version");
+      Preconditions.checkNotNull(minY, "DimensionData requires 'minY' to be present for this version");
     }
     return new DimensionData(
         UNKNOWN_DIMENSION_ID, null, isNatural, ambientLight, isShrunk,
@@ -256,12 +254,12 @@ public final class DimensionData {
   /**
    * Parses a given CompoundTag to a DimensionData instance. Assumes the data is part of a
    * dimension registry.
-   * @param dimTag the compound from the registry to read
+   *
+   * @param dimTag  the compound from the registry to read
    * @param version the protocol version
    * @return game dimension data
    */
-  public static DimensionData decodeRegistryEntry(CompoundBinaryTag dimTag,
-      ProtocolVersion version) {
+  public static DimensionData decodeRegistryEntry(CompoundBinaryTag dimTag, ProtocolVersion version) {
     String registryIdentifier = dimTag.getString("name");
     CompoundBinaryTag details;
     Integer dimensionId = null;
@@ -278,6 +276,7 @@ public final class DimensionData {
 
   /**
    * Encodes the Dimension data as CompoundTag.
+   *
    * @param version the version to serialize as
    * @return compound containing the dimension data
    */
@@ -301,6 +300,7 @@ public final class DimensionData {
 
   /**
    * Serializes details of this dimension.
+   *
    * @return serialized details of this dimension
    */
   public CompoundBinaryTag serializeDimensionDetails() {
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionInfo.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionInfo.java
index 8c7abd8c..bdb2a5e0 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionInfo.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionInfo.java
@@ -29,13 +29,13 @@ public final class DimensionInfo {
 
   /**
    * Initializes a new {@link DimensionInfo} instance.
+   *
    * @param registryIdentifier the identifier for the dimension from the registry
-   * @param levelName the level name as displayed in the F3 menu and logs
-   * @param isFlat if true will set world lighting below surface-level to not display fog
-   * @param isDebugType if true constrains the world to the very limited debug-type world
+   * @param levelName          the level name as displayed in the F3 menu and logs
+   * @param isFlat             if true will set world lighting below surface-level to not display fog
+   * @param isDebugType        if true constrains the world to the very limited debug-type world
    */
-  public DimensionInfo(String registryIdentifier, @Nullable String levelName,
-      boolean isFlat, boolean isDebugType) {
+  public DimensionInfo(String registryIdentifier, @Nullable String levelName, boolean isFlat, boolean isDebugType) {
     this.registryIdentifier = Preconditions.checkNotNull(
         registryIdentifier, "registryIdentifier cannot be null");
     Preconditions.checkArgument(registryIdentifier.length() > 0,
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java
index 4e7fb52a..224d8d56 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java
@@ -20,11 +20,9 @@ package com.velocitypowered.proxy.connection.registry;
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Maps;
-
 import com.velocitypowered.api.network.ProtocolVersion;
 import java.util.Map;
 import java.util.Set;
-
 import net.kyori.adventure.nbt.BinaryTag;
 import net.kyori.adventure.nbt.BinaryTagTypes;
 import net.kyori.adventure.nbt.CompoundBinaryTag;
@@ -44,11 +42,11 @@ public final class DimensionRegistry {
    * This WILL raise an IllegalArgumentException if the following is not met:
    * - At least one valid DimensionData instance is provided
    * - At least one valid world name is provided
+   *
    * @param registeredDimensions a populated {@link ImmutableSet} containing dimension data types
-   * @param levelNames a populated {@link ImmutableSet} of the level (world) names the server offers
+   * @param levelNames           a populated {@link ImmutableSet} of the level (world) names the server offers
    */
-  public DimensionRegistry(ImmutableSet<DimensionData> registeredDimensions,
-      ImmutableSet<String> levelNames) {
+  public DimensionRegistry(ImmutableSet<DimensionData> registeredDimensions, ImmutableSet<String> levelNames) {
     Preconditions.checkNotNull(registeredDimensions,
         "registeredDimensions cannot be null");
     Preconditions.checkNotNull(levelNames,
@@ -72,6 +70,7 @@ public final class DimensionRegistry {
 
   /**
    * Returns the internal dimension data type as used by the game.
+   *
    * @param dimensionIdentifier how the dimension is identified by the connection
    * @return game dimension data or null if not registered
    */
@@ -81,6 +80,7 @@ public final class DimensionRegistry {
 
   /**
    * Checks a {@link DimensionInfo} against this registry.
+   *
    * @param toValidate the {@link DimensionInfo} to validate
    * @return true: the dimension information is valid for this registry
    */
@@ -94,6 +94,7 @@ public final class DimensionRegistry {
 
   /**
    * Encodes the stored Dimension registry as CompoundTag.
+   *
    * @return the CompoundTag containing identifier:type mappings
    */
   public ListBinaryTag encodeRegistry(ProtocolVersion version) {
@@ -107,10 +108,10 @@ public final class DimensionRegistry {
 
   /**
    * Decodes a CompoundTag storing a dimension registry.
+   *
    * @param toParse CompoundTag containing a dimension registry
    */
-  public static ImmutableSet<DimensionData> fromGameData(ListBinaryTag toParse,
-      ProtocolVersion version) {
+  public static ImmutableSet<DimensionData> fromGameData(ListBinaryTag toParse, ProtocolVersion version) {
     Preconditions.checkNotNull(toParse, "ListTag cannot be null");
     ImmutableSet.Builder<DimensionData> mappings = ImmutableSet.builder();
     for (BinaryTag iter : toParse) {
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/util/ConnectionMessages.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/util/ConnectionMessages.java
index 0ff0dc89..b16d750f 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/util/ConnectionMessages.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/util/ConnectionMessages.java
@@ -25,22 +25,15 @@ public class ConnectionMessages {
 
   public static final Component ALREADY_CONNECTED = LegacyComponentSerializer
       .legacyAmpersand()
-      .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.ALREADY_CONNECTED
-          .replace("{NL}", "\n")
-          .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-      );
+      .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.ALREADY_CONNECTED);
+
   public static final Component IN_PROGRESS = LegacyComponentSerializer
       .legacyAmpersand()
-      .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.ALREADY_CONNECTING
-          .replace("{NL}", "\n")
-          .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-      );
+      .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.ALREADY_CONNECTING);
+
   public static final Component INTERNAL_SERVER_CONNECTION_ERROR = LegacyComponentSerializer
       .legacyAmpersand()
-      .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.INTERNAL_SERVER_CONNECTION_ERROR
-          .replace("{NL}", "\n")
-          .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-      );
+      .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.INTERNAL_SERVER_CONNECTION_ERROR);
 
   private ConnectionMessages() {
     throw new AssertionError();
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/util/ConnectionRequestResults.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/util/ConnectionRequestResults.java
index 9c8dbd5c..be09a7f6 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/util/ConnectionRequestResults.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/util/ConnectionRequestResults.java
@@ -38,20 +38,20 @@ public class ConnectionRequestResults {
 
   /**
    * Returns a plain result (one with a status but no reason).
+   *
    * @param status the status to use
    * @param server the server to use
    * @return the result
    */
-  public static Impl plainResult(
-      ConnectionRequestBuilder.Status status,
-      RegisteredServer server) {
+  public static Impl plainResult(ConnectionRequestBuilder.Status status, RegisteredServer server) {
     return new Impl(status, null, server, true);
   }
 
   /**
    * Returns a disconnect result with a reason.
+   *
    * @param component the reason for disconnecting from the server
-   * @param server the server to use
+   * @param server    the server to use
    * @return the result
    */
   public static Impl forDisconnect(Component component, RegisteredServer server) {
@@ -75,8 +75,7 @@ public class ConnectionRequestResults {
     private final RegisteredServer attemptedConnection;
     private final boolean safe;
 
-    Impl(Status status, @Nullable Component component,
-        RegisteredServer attemptedConnection, boolean safe) {
+    Impl(Status status, @Nullable Component component, RegisteredServer attemptedConnection, boolean safe) {
       this.status = status;
       this.component = component;
       this.attemptedConnection = attemptedConnection;
@@ -100,6 +99,7 @@ public class ConnectionRequestResults {
 
     /**
      * Returns whether or not it is safe to attempt a reconnect.
+     *
      * @return whether we can try to reconnect
      */
     public boolean isSafe() {
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/util/ConnectionTypeImpl.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/util/ConnectionTypeImpl.java
index 38735283..cb28695a 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/util/ConnectionTypeImpl.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/util/ConnectionTypeImpl.java
@@ -31,8 +31,7 @@ public class ConnectionTypeImpl implements ConnectionType {
   private final ClientConnectionPhase initialClientPhase;
   private final BackendConnectionPhase initialBackendPhase;
 
-  public ConnectionTypeImpl(ClientConnectionPhase initialClientPhase,
-                            BackendConnectionPhase initialBackendPhase) {
+  public ConnectionTypeImpl(ClientConnectionPhase initialClientPhase, BackendConnectionPhase initialBackendPhase) {
     this.initialClientPhase = initialClientPhase;
     this.initialBackendPhase = initialBackendPhase;
   }
@@ -48,8 +47,7 @@ public class ConnectionTypeImpl implements ConnectionType {
   }
 
   @Override
-  public GameProfile addGameProfileTokensIfRequired(GameProfile original,
-                                                    PlayerInfoForwarding forwardingType) {
+  public GameProfile addGameProfileTokensIfRequired(GameProfile original, PlayerInfoForwarding forwardingType) {
     return original;
   }
 }
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/console/VelocityConsole.java b/proxy/src/main/java/com/velocitypowered/proxy/console/VelocityConsole.java
index 0a59858a..2962473b 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/console/VelocityConsole.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/console/VelocityConsole.java
@@ -24,20 +24,13 @@ import com.velocitypowered.api.permission.PermissionFunction;
 import com.velocitypowered.api.permission.Tristate;
 import com.velocitypowered.api.proxy.ConsoleCommandSource;
 import com.velocitypowered.proxy.VelocityServer;
-import com.velocitypowered.proxy.util.ClosestLocaleMatcher;
 import java.util.List;
 import net.elytrium.elytraproxy.config.Settings;
-import java.util.Locale;
 import net.kyori.adventure.identity.Identity;
 import net.kyori.adventure.permission.PermissionChecker;
 import net.kyori.adventure.pointer.Pointers;
 import net.kyori.adventure.text.Component;
 import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
-import net.kyori.text.TextComponent;
-import net.kyori.text.format.TextColor;
-import net.kyori.adventure.text.format.NamedTextColor;
-import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
-import net.kyori.adventure.translation.GlobalTranslator;
 import net.minecrell.terminalconsole.SimpleTerminalConsole;
 import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.LogManager;
@@ -56,7 +49,7 @@ public final class VelocityConsole extends SimpleTerminalConsole implements Cons
   private final VelocityServer server;
   private PermissionFunction permissionFunction = ALWAYS_TRUE;
   private final @NotNull Pointers pointers = ConsoleCommandSource.super.pointers().toBuilder()
-          .withDynamic(PermissionChecker.POINTER, this::getPermissionChecker).build();
+      .withDynamic(PermissionChecker.POINTER, this::getPermissionChecker).build();
 
   public VelocityConsole(VelocityServer server) {
     this.server = server;
@@ -64,10 +57,14 @@ public final class VelocityConsole extends SimpleTerminalConsole implements Cons
 
   @Override
   public void sendMessage(@NonNull Identity identity, @NonNull Component message) {
+    // ElytraProxy Start: Removed as unnecessary
+    /*
     Component translated = GlobalTranslator.render(message, ClosestLocaleMatcher.INSTANCE
         .lookupClosest(Locale.getDefault()));
-    logger.info(LegacyComponentSerializer.legacySection().serialize(translated));
+    */
+    logger.info(LegacyComponentSerializer.legacySection().serialize(message/*translated*/));
   }
+  // ElytraProxy End
 
   @Override
   public @NonNull Tristate getPermissionValue(@NonNull String permission) {
@@ -130,10 +127,7 @@ public final class VelocityConsole extends SimpleTerminalConsole implements Cons
         sendMessage(
             LegacyComponentSerializer
                 .legacyAmpersand()
-                .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.COMMAND_DOES_NOT_EXIST
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                ));
+                .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.COMMAND_DOES_NOT_EXIST));
       }
     } catch (Exception e) {
       logger.error("An error occurred while running this command.", e);
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/event/VelocityEventManager.java b/proxy/src/main/java/com/velocitypowered/proxy/event/VelocityEventManager.java
index ac337aa5..ed870027 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/event/VelocityEventManager.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/event/VelocityEventManager.java
@@ -249,8 +249,7 @@ public class VelocityEventManager implements EventManager {
     }
   }
 
-  private void collectMethods(final Class<?> targetClass,
-      final Map<String, MethodHandlerInfo> collected) {
+  private void collectMethods(final Class<?> targetClass, final Map<String, MethodHandlerInfo> collected) {
     for (final Method method : targetClass.getDeclaredMethods()) {
       final Subscribe subscribe = method.getAnnotation(Subscribe.class);
       if (subscribe == null) {
@@ -368,7 +367,7 @@ public class VelocityEventManager implements EventManager {
    * Registers the listener for a given plugin.
    *
    * @param pluginContainer registering plugin
-   * @param listener listener to register
+   * @param listener        listener to register
    */
   public void registerInternally(final PluginContainer pluginContainer, final Object listener) {
     final Class<?> targetClass = listener.getClass();
@@ -462,8 +461,7 @@ public class VelocityEventManager implements EventManager {
     return future;
   }
 
-  private <E> void fire(final @Nullable CompletableFuture<E> future,
-      final E event, final HandlersCache handlersCache) {
+  private <E> void fire(final @Nullable CompletableFuture<E> future, final E event, final HandlersCache handlersCache) {
     // In Velocity 1.1.0, all events were fired asynchronously. As Velocity 3.0.0 is intended to be
     // largely (albeit not 100%) compatible with 1.1.x, we also fire events async. This behavior
     // will go away in Velocity Polymer.
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/network/ConnectionManager.java b/proxy/src/main/java/com/velocitypowered/proxy/network/ConnectionManager.java
index 9bf9e78b..11cbc2db 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/network/ConnectionManager.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/network/ConnectionManager.java
@@ -51,8 +51,7 @@ import org.checkerframework.checker.nullness.qual.Nullable;
 
 public final class ConnectionManager {
 
-  private static final WriteBufferWaterMark SERVER_WRITE_MARK = new WriteBufferWaterMark(1 << 20,
-      1 << 21);
+  private static final WriteBufferWaterMark SERVER_WRITE_MARK = new WriteBufferWaterMark(1 << 20, 1 << 21);
   private static final Logger LOGGER = LogManager.getLogger(ConnectionManager.class);
   private final Map<InetSocketAddress, Endpoint> endpoints = new HashMap<>();
   private final TransportType transportType;
@@ -144,7 +143,7 @@ public final class ConnectionManager {
    * Binds a GS4 listener to the specified {@code hostname} and {@code port}.
    *
    * @param hostname the hostname to bind to
-   * @param port the port to bind to
+   * @param port     the port to bind to
    */
   public void queryBind(final String hostname, final int port) {
     InetSocketAddress address = new InetSocketAddress(hostname, port);
@@ -173,7 +172,6 @@ public final class ConnectionManager {
    * Creates a TCP {@link Bootstrap} using Velocity's event loops.
    *
    * @param group the event loop group to use. Use {@code null} for the default worker group.
-   *
    * @return a new {@link Bootstrap}
    */
   public Bootstrap createWorker(@Nullable EventLoopGroup group) {
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/network/Endpoint.java b/proxy/src/main/java/com/velocitypowered/proxy/network/Endpoint.java
index af453e63..dbfd8128 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/network/Endpoint.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/network/Endpoint.java
@@ -25,6 +25,7 @@ import io.netty.channel.Channel;
  * Represents a listener endpoint.
  */
 public final class Endpoint {
+
   private final Channel channel;
   private final ListenerType type;
 
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/network/ServerChannelInitializer.java b/proxy/src/main/java/com/velocitypowered/proxy/network/ServerChannelInitializer.java
index ca1c8619..ed7a6520 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/network/ServerChannelInitializer.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/network/ServerChannelInitializer.java
@@ -39,7 +39,6 @@ import io.netty.channel.Channel;
 import io.netty.channel.ChannelInitializer;
 import io.netty.handler.codec.haproxy.HAProxyMessageDecoder;
 import io.netty.handler.timeout.ReadTimeoutHandler;
-
 import java.net.InetSocketAddress;
 import java.util.concurrent.TimeUnit;
 
@@ -58,15 +57,15 @@ public class ServerChannelInitializer extends ChannelInitializer<Channel> {
     if (server.getElytraProxy() == null) {
       return;
     }
-    //BotFilter start - global rate limiter
+    // BotFilter backport Start: Global rate limiter
     boolean isProxyProtocol = this.server.getConfiguration().isProxyProtocol();
     if (!isProxyProtocol && !server.getIpAttemptLimiter()
-        .attempt(((InetSocketAddress)ch.remoteAddress()).getAddress())) {
+        .attempt(((InetSocketAddress) ch.remoteAddress()).getAddress())) {
       ch.close();
       server.getElytraProxy().getStatistics().addBlockedConnection();
       return;
     }
-    //BotFilter end
+    // BotFilter backport End
 
     ch.pipeline()
         .addLast(LEGACY_PING_DECODER, new LegacyPingDecoder())
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/network/ServerChannelInitializerHolder.java b/proxy/src/main/java/com/velocitypowered/proxy/network/ServerChannelInitializerHolder.java
index ab125cc8..87819a03 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/network/ServerChannelInitializerHolder.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/network/ServerChannelInitializerHolder.java
@@ -39,6 +39,7 @@ public class ServerChannelInitializerHolder implements Supplier<ChannelInitializ
 
   /**
    * Sets the channel initializer.
+   *
    * @param initializer the new initializer to use
    * @deprecated Internal implementation detail
    */
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/network/TransportType.java b/proxy/src/main/java/com/velocitypowered/proxy/network/TransportType.java
index 1082d1e9..91d5dedf 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/network/TransportType.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/network/TransportType.java
@@ -36,6 +36,7 @@ import java.util.concurrent.ThreadFactory;
 import java.util.function.BiFunction;
 
 enum TransportType {
+
   NIO("NIO", NioServerSocketChannel::new,
       NioSocketChannel::new,
       NioDatagramChannel::new,
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/plugin/VelocityPluginManager.java b/proxy/src/main/java/com/velocitypowered/proxy/plugin/VelocityPluginManager.java
index 682d5bc7..96cfae57 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/plugin/VelocityPluginManager.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/plugin/VelocityPluginManager.java
@@ -43,7 +43,6 @@ import java.nio.file.Path;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
-import java.util.HashMap;
 import java.util.HashSet;
 import java.util.IdentityHashMap;
 import java.util.LinkedHashMap;
@@ -74,6 +73,7 @@ public class VelocityPluginManager implements PluginManager {
 
   /**
    * Loads all plugins from the specified {@code directory}.
+   *
    * @param directory the directory to load from
    * @throws IOException if we could not open the directory
    */
@@ -138,8 +138,8 @@ public class VelocityPluginManager implements PluginManager {
         bind(CommandManager.class).toInstance(server.getCommandManager());
         for (PluginContainer container : pluginContainers.keySet()) {
           bind(PluginContainer.class)
-            .annotatedWith(Names.named(container.getDescription().getId()))
-            .toInstance(container);
+              .annotatedWith(Names.named(container.getDescription().getId()))
+              .toInstance(container);
         }
       }
     };
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/plugin/loader/VelocityPluginDescription.java b/proxy/src/main/java/com/velocitypowered/proxy/plugin/loader/VelocityPluginDescription.java
index b799dbbf..8b06ab8f 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/plugin/loader/VelocityPluginDescription.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/plugin/loader/VelocityPluginDescription.java
@@ -44,14 +44,15 @@ public class VelocityPluginDescription implements PluginDescription {
 
   /**
    * Creates a new plugin description.
-   * @param id the ID
-   * @param name the name of the plugin
-   * @param version the plugin version
-   * @param description a description of the plugin
-   * @param url the website for the plugin
-   * @param authors the authors of this plugin
+   *
+   * @param id           the ID
+   * @param name         the name of the plugin
+   * @param version      the plugin version
+   * @param description  a description of the plugin
+   * @param url          the website for the plugin
+   * @param authors      the authors of this plugin
    * @param dependencies the dependencies for this plugin
-   * @param source the original source for the plugin
+   * @param source       the original source for the plugin
    */
   public VelocityPluginDescription(String id, @Nullable String name, @Nullable String version,
       @Nullable String description, @Nullable String url,
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/plugin/loader/java/JavaPluginLoader.java b/proxy/src/main/java/com/velocitypowered/proxy/plugin/loader/java/JavaPluginLoader.java
index a3043a93..4b91799f 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/plugin/loader/java/JavaPluginLoader.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/plugin/loader/java/JavaPluginLoader.java
@@ -80,7 +80,7 @@ public class JavaPluginLoader implements PluginLoader {
 
     URL pluginJarUrl = source.getSource().get().toUri().toURL();
     PluginClassLoader loader = AccessController.doPrivileged(
-        (PrivilegedAction<PluginClassLoader>) () -> new PluginClassLoader(new URL[]{pluginJarUrl}));
+        (PrivilegedAction<PluginClassLoader>) () -> new PluginClassLoader(new URL[] {pluginJarUrl}));
     loader.addToClassloaders();
 
     JavaVelocityPluginDescriptionCandidate candidate =
@@ -122,7 +122,7 @@ public class JavaPluginLoader implements PluginLoader {
 
     if (instance == null) {
       throw new IllegalStateException(
-        "Got nothing from injector for plugin " + description.getId());
+          "Got nothing from injector for plugin " + description.getId());
     }
 
     ((VelocityPluginContainer) container).setInstance(instance);
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/plugin/loader/java/JavaVelocityPluginDescriptionCandidate.java b/proxy/src/main/java/com/velocitypowered/proxy/plugin/loader/java/JavaVelocityPluginDescriptionCandidate.java
index 4e4aa306..e78ef806 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/plugin/loader/java/JavaVelocityPluginDescriptionCandidate.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/plugin/loader/java/JavaVelocityPluginDescriptionCandidate.java
@@ -32,8 +32,8 @@ class JavaVelocityPluginDescriptionCandidate extends VelocityPluginDescription {
 
   JavaVelocityPluginDescriptionCandidate(String id, @Nullable String name, @Nullable String version,
       @Nullable String description, @Nullable String url,
-      @Nullable List<String> authors, Collection<PluginDependency> dependencies, Path source,
-      String mainClass) {
+      @Nullable List<String> authors, Collection<PluginDependency> dependencies,
+      Path source, String mainClass) {
     super(id, name, version, description, url, authors, dependencies, source);
     this.mainClass = checkNotNull(mainClass);
   }
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/plugin/loader/java/VelocityPluginModule.java b/proxy/src/main/java/com/velocitypowered/proxy/plugin/loader/java/VelocityPluginModule.java
index 2e8bd6eb..46521c76 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/plugin/loader/java/VelocityPluginModule.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/plugin/loader/java/VelocityPluginModule.java
@@ -36,7 +36,7 @@ class VelocityPluginModule implements Module {
   private final Path basePluginPath;
 
   VelocityPluginModule(ProxyServer server, JavaVelocityPluginDescription description,
-                       PluginContainer pluginContainer, Path basePluginPath) {
+      PluginContainer pluginContainer, Path basePluginPath) {
     this.server = server;
     this.description = description;
     this.pluginContainer = pluginContainer;
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/MinecraftPacket.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/MinecraftPacket.java
index 7b2184d9..15b0120a 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/MinecraftPacket.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/MinecraftPacket.java
@@ -24,7 +24,7 @@ import io.netty.buffer.ByteBuf;
 
 public interface MinecraftPacket {
 
-  //BotFilter start - add default to methods
+  // BotFilter backport Start: Add default to methods
   default void decode(ByteBuf buf, Direction direction, ProtocolVersion protocolVersion) {
     throw new UnsupportedOperationException();
   }
@@ -36,15 +36,13 @@ public interface MinecraftPacket {
   default boolean handle(MinecraftSessionHandler handler) {
     throw new UnsupportedOperationException();
   }
-  //BotFilter end
+  // BotFilter backport End
 
-  default int expectedMaxLength(ByteBuf buf, ProtocolUtils.Direction direction,
-      ProtocolVersion version) {
+  default int expectedMaxLength(ByteBuf buf, ProtocolUtils.Direction direction, ProtocolVersion version) {
     return -1;
   }
 
-  default int expectedMinLength(ByteBuf buf, ProtocolUtils.Direction direction,
-      ProtocolVersion version) {
+  default int expectedMinLength(ByteBuf buf, ProtocolUtils.Direction direction, ProtocolVersion version) {
     return 0;
   }
 }
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java
index 53daae29..bb4b3506 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java
@@ -32,7 +32,6 @@ import io.netty.buffer.ByteBufUtil;
 import io.netty.handler.codec.CorruptedFrameException;
 import io.netty.handler.codec.DecoderException;
 import io.netty.handler.codec.EncoderException;
-
 import java.io.DataInput;
 import java.io.DataOutput;
 import java.io.IOException;
@@ -40,7 +39,6 @@ import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.UUID;
-
 import net.kyori.adventure.nbt.BinaryTagIO;
 import net.kyori.adventure.nbt.CompoundBinaryTag;
 import net.kyori.adventure.text.serializer.gson.GsonComponentSerializer;
@@ -73,13 +71,15 @@ public enum ProtocolUtils {
 
   /**
    * Reads a Minecraft-style VarInt from the specified {@code buf}.
+   *
    * @param buf the buffer to read from
    * @return the decoded VarInt
    */
   public static int readVarInt(ByteBuf buf) {
     int read = readVarIntSafely(buf);
     if (read == Integer.MIN_VALUE) {
-      throw MinecraftDecoder.DEBUG ? new CorruptedFrameException("Bad VarInt decoded")
+      throw MinecraftDecoder.DEBUG
+          ? new CorruptedFrameException("Bad VarInt decoded")
           : BAD_VARINT_CACHED;
     }
     return read;
@@ -89,6 +89,7 @@ public enum ProtocolUtils {
    * Reads a Minecraft-style VarInt from the specified {@code buf}. The difference between this
    * method and {@link #readVarInt(ByteBuf)} is that this function returns a sentinel value if the
    * varint is invalid.
+   *
    * @param buf the buffer to read from
    * @return the decoded VarInt, or {@code Integer.MIN_VALUE} if the varint is invalid
    */
@@ -107,6 +108,7 @@ public enum ProtocolUtils {
 
   /**
    * Returns the exact byte size of {@code value} if it were encoded as a VarInt.
+   *
    * @param value the value to encode
    * @return the byte size of {@code value} if encoded as a VarInt
    */
@@ -116,7 +118,8 @@ public enum ProtocolUtils {
 
   /**
    * Writes a Minecraft-style VarInt to the specified {@code buf}.
-   * @param buf the buffer to read from
+   *
+   * @param buf   the buffer to read from
    * @param value the integer to write
    */
   public static void writeVarInt(ByteBuf buf, int value) {
@@ -157,7 +160,8 @@ public enum ProtocolUtils {
   /**
    * Writes the specified {@code value} as a 21-bit Minecraft VarInt to the specified {@code buf}.
    * The upper 11 bits will be discarded.
-   * @param buf the buffer to read from
+   *
+   * @param buf   the buffer to read from
    * @param value the integer to write
    */
   public static void write21BitVarInt(ByteBuf buf, int value) {
@@ -173,6 +177,7 @@ public enum ProtocolUtils {
   /**
    * Reads a VarInt length-prefixed UTF-8 string from the {@code buf}, making sure to not go over
    * {@code cap} size.
+   *
    * @param buf the buffer to read from
    * @param cap the maximum size of the string, in UTF-8 character length
    * @return the decoded string
@@ -200,6 +205,7 @@ public enum ProtocolUtils {
 
   /**
    * Writes the specified {@code str} to the {@code buf} with a VarInt prefix.
+   *
    * @param buf the buffer to write to
    * @param str the string to write
    */
@@ -216,6 +222,7 @@ public enum ProtocolUtils {
   /**
    * Reads a VarInt length-prefixed byte array from the {@code buf}, making sure to not go over
    * {@code cap} size.
+   *
    * @param buf the buffer to read from
    * @param cap the maximum size of the string, in UTF-8 character length
    * @return the byte array
@@ -239,6 +246,7 @@ public enum ProtocolUtils {
 
   /**
    * Reads an VarInt-prefixed array of VarInt integers from the {@code buf}.
+   *
    * @param buf the buffer to read from
    * @return an array of integers
    */
@@ -254,6 +262,7 @@ public enum ProtocolUtils {
 
   /**
    * Reads an UUID from the {@code buf}.
+   *
    * @param buf the buffer to read from
    * @return the UUID from the buffer
    */
@@ -270,6 +279,7 @@ public enum ProtocolUtils {
 
   /**
    * Reads an UUID stored as an Integer Array from the {@code buf}.
+   *
    * @param buf the buffer to read from
    * @return the UUID from the buffer
    */
@@ -285,7 +295,8 @@ public enum ProtocolUtils {
 
   /**
    * Writes an UUID as an Integer Array to the {@code buf}.
-   * @param buf the buffer to write to
+   *
+   * @param buf  the buffer to write to
    * @param uuid the UUID to write
    */
   public static void writeUuidIntArray(ByteBuf buf, UUID uuid) {
@@ -297,7 +308,8 @@ public enum ProtocolUtils {
 
   /**
    * Reads a {@link net.kyori.adventure.nbt.CompoundBinaryTag} from the {@code buf}.
-   * @param buf the buffer to read from
+   *
+   * @param buf    the buffer to read from
    * @param reader the NBT reader to use
    * @return {@link net.kyori.adventure.nbt.CompoundBinaryTag} the CompoundTag from the buffer
    */
@@ -306,13 +318,14 @@ public enum ProtocolUtils {
       return reader.read((DataInput) new ByteBufInputStream(buf));
     } catch (IOException thrown) {
       throw new DecoderException(
-              "Unable to parse NBT CompoundTag, full error: " + thrown.getMessage());
+          "Unable to parse NBT CompoundTag, full error: " + thrown.getMessage());
     }
   }
 
   /**
    * Writes a CompoundTag to the {@code buf}.
-   * @param buf the buffer to write to
+   *
+   * @param buf         the buffer to write to
    * @param compoundTag the CompoundTag to write
    */
   public static void writeCompoundTag(ByteBuf buf, CompoundBinaryTag compoundTag) {
@@ -325,6 +338,7 @@ public enum ProtocolUtils {
 
   /**
    * Reads a String array from the {@code buf}.
+   *
    * @param buf the buffer to read from
    * @return the String array from the buffer
    */
@@ -339,7 +353,8 @@ public enum ProtocolUtils {
 
   /**
    * Writes a String Array to the {@code buf}.
-   * @param buf the buffer to write to
+   *
+   * @param buf         the buffer to write to
    * @param stringArray the array to write
    */
   public static void writeStringArray(ByteBuf buf, String[] stringArray) {
@@ -351,7 +366,8 @@ public enum ProtocolUtils {
 
   /**
    * Writes a list of {@link com.velocitypowered.api.util.GameProfile.Property} to the buffer.
-   * @param buf the buffer to write to
+   *
+   * @param buf        the buffer to write to
    * @param properties the properties to serialize
    */
   public static void writeProperties(ByteBuf buf, List<GameProfile.Property> properties) {
@@ -371,6 +387,7 @@ public enum ProtocolUtils {
 
   /**
    * Reads a list of {@link com.velocitypowered.api.util.GameProfile.Property} from the buffer.
+   *
    * @param buf the buffer to read from
    * @return the read properties
    */
@@ -433,8 +450,8 @@ public enum ProtocolUtils {
   /**
    * Writes an byte array for legacy version 1.7 to the specified {@code buf}
    *
-   * @param b array
-   * @param buf buf
+   * @param b             array
+   * @param buf           buf
    * @param allowExtended forge
    */
   public static void writeByteArray17(byte[] b, ByteBuf buf, boolean allowExtended) {
@@ -457,8 +474,8 @@ public enum ProtocolUtils {
   /**
    * Writes an {@link ByteBuf} for legacy version 1.7 to the specified {@code buf}
    *
-   * @param b array
-   * @param buf buf
+   * @param b             array
+   * @param buf           buf
    * @param allowExtended forge
    */
   public static void writeByteBuf17(ByteBuf b, ByteBuf buf, boolean allowExtended) {
@@ -497,7 +514,7 @@ public enum ProtocolUtils {
   /**
    * Writes a Minecraft-style extended short to the specified {@code buf}.
    *
-   * @param buf buf to write
+   * @param buf     buf to write
    * @param toWrite the extended short to write
    */
   public static void writeExtendedForgeShort(ByteBuf buf, int toWrite) {
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/StateRegistry.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/StateRegistry.java
index 1d786691..b8600c51 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/StateRegistry.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/StateRegistry.java
@@ -18,21 +18,6 @@
 package com.velocitypowered.proxy.protocol;
 
 import static com.google.common.collect.Iterables.getLast;
-import static com.velocitypowered.api.network.ProtocolVersion.MINECRAFT_1_12;
-import static com.velocitypowered.api.network.ProtocolVersion.MINECRAFT_1_12_1;
-import static com.velocitypowered.api.network.ProtocolVersion.MINECRAFT_1_13;
-import static com.velocitypowered.api.network.ProtocolVersion.MINECRAFT_1_14;
-import static com.velocitypowered.api.network.ProtocolVersion.MINECRAFT_1_15;
-import static com.velocitypowered.api.network.ProtocolVersion.MINECRAFT_1_16;
-import static com.velocitypowered.api.network.ProtocolVersion.MINECRAFT_1_16_2;
-import static com.velocitypowered.api.network.ProtocolVersion.MINECRAFT_1_16_4;
-import static com.velocitypowered.api.network.ProtocolVersion.MINECRAFT_1_17;
-import static com.velocitypowered.api.network.ProtocolVersion.MINECRAFT_1_7_2;
-import static com.velocitypowered.api.network.ProtocolVersion.MINECRAFT_1_8;
-import static com.velocitypowered.api.network.ProtocolVersion.MINECRAFT_1_9;
-import static com.velocitypowered.api.network.ProtocolVersion.MINECRAFT_1_9_4;
-import static com.velocitypowered.api.network.ProtocolVersion.MINIMUM_VERSION;
-import static com.velocitypowered.api.network.ProtocolVersion.SUPPORTED_VERSIONS;
 import static com.velocitypowered.proxy.protocol.ProtocolUtils.Direction;
 
 import com.velocitypowered.api.network.ProtocolVersion;
@@ -73,9 +58,11 @@ import io.netty.util.collection.IntObjectHashMap;
 import io.netty.util.collection.IntObjectMap;
 import it.unimi.dsi.fastutil.objects.Object2IntMap;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
+import java.util.ArrayList;
 import java.util.Collections;
 import java.util.EnumMap;
 import java.util.EnumSet;
+import java.util.List;
 import java.util.Map;
 import java.util.Objects;
 import java.util.function.Supplier;
@@ -86,20 +73,20 @@ public enum StateRegistry {
   HANDSHAKE {
     {
       serverbound.register(Handshake.class, Handshake::new,
-          map(0x00, MINECRAFT_1_7_2, false));
+          map(0x00, ProtocolVersion.MINECRAFT_1_7_2, false));
     }
   },
   STATUS {
     {
       serverbound.register(StatusRequest.class, () -> StatusRequest.INSTANCE,
-          map(0x00, MINECRAFT_1_7_2, false));
+          map(0x00, ProtocolVersion.MINECRAFT_1_7_2, false));
       serverbound.register(StatusPing.class, StatusPing::new,
-          map(0x01, MINECRAFT_1_7_2, false));
+          map(0x01, ProtocolVersion.MINECRAFT_1_7_2, false));
 
       clientbound.register(StatusResponse.class, StatusResponse::new,
-          map(0x00, MINECRAFT_1_7_2, false));
+          map(0x00, ProtocolVersion.MINECRAFT_1_7_2, false));
       clientbound.register(StatusPing.class, StatusPing::new,
-          map(0x01, MINECRAFT_1_7_2, false));
+          map(0x01, ProtocolVersion.MINECRAFT_1_7_2, false));
     }
   },
   PLAY {
@@ -108,196 +95,196 @@ public enum StateRegistry {
       clientbound.fallback = false;
 
       serverbound.register(TabCompleteRequest.class, TabCompleteRequest::new,
-          map(0x14, MINECRAFT_1_7_2, false),
-          map(0x01, MINECRAFT_1_9, false),
-          map(0x02, MINECRAFT_1_12, false),
-          map(0x01, MINECRAFT_1_12_1, false),
-          map(0x05, MINECRAFT_1_13, false),
-          map(0x06, MINECRAFT_1_14, false));
+          map(0x14, ProtocolVersion.MINECRAFT_1_7_2, false),
+          map(0x01, ProtocolVersion.MINECRAFT_1_9, false),
+          map(0x02, ProtocolVersion.MINECRAFT_1_12, false),
+          map(0x01, ProtocolVersion.MINECRAFT_1_12_1, false),
+          map(0x05, ProtocolVersion.MINECRAFT_1_13, false),
+          map(0x06, ProtocolVersion.MINECRAFT_1_14, false));
       serverbound.register(Chat.class, Chat::new,
-          map(0x01, MINECRAFT_1_7_2, false),
-          map(0x02, MINECRAFT_1_9, false),
-          map(0x03, MINECRAFT_1_12, false),
-          map(0x02, MINECRAFT_1_12_1, false),
-          map(0x03, MINECRAFT_1_14, false));
+          map(0x01, ProtocolVersion.MINECRAFT_1_7_2, false),
+          map(0x02, ProtocolVersion.MINECRAFT_1_9, false),
+          map(0x03, ProtocolVersion.MINECRAFT_1_12, false),
+          map(0x02, ProtocolVersion.MINECRAFT_1_12_1, false),
+          map(0x03, ProtocolVersion.MINECRAFT_1_14, false));
       serverbound.register(ClientSettings.class, ClientSettings::new,
-          map(0x15, MINECRAFT_1_7_2, false),
-          map(0x04, MINECRAFT_1_9, false),
-          map(0x05, MINECRAFT_1_12, false),
-          map(0x04, MINECRAFT_1_12_1, false),
-          map(0x05, MINECRAFT_1_14, false));
+          map(0x15, ProtocolVersion.MINECRAFT_1_7_2, false),
+          map(0x04, ProtocolVersion.MINECRAFT_1_9, false),
+          map(0x05, ProtocolVersion.MINECRAFT_1_12, false),
+          map(0x04, ProtocolVersion.MINECRAFT_1_12_1, false),
+          map(0x05, ProtocolVersion.MINECRAFT_1_14, false));
       serverbound.register(PluginMessage.class, PluginMessage::new,
-          map(0x17, MINECRAFT_1_7_2, false),
-          map(0x09, MINECRAFT_1_9, false),
-          map(0x0A, MINECRAFT_1_12, false),
-          map(0x09, MINECRAFT_1_12_1, false),
-          map(0x0A, MINECRAFT_1_13, false),
-          map(0x0B, MINECRAFT_1_14, false),
-          map(0x0A, MINECRAFT_1_17, false));
+          map(0x17, ProtocolVersion.MINECRAFT_1_7_2, false),
+          map(0x09, ProtocolVersion.MINECRAFT_1_9, false),
+          map(0x0A, ProtocolVersion.MINECRAFT_1_12, false),
+          map(0x09, ProtocolVersion.MINECRAFT_1_12_1, false),
+          map(0x0A, ProtocolVersion.MINECRAFT_1_13, false),
+          map(0x0B, ProtocolVersion.MINECRAFT_1_14, false),
+          map(0x0A, ProtocolVersion.MINECRAFT_1_17, false));
       serverbound.register(KeepAlive.class, KeepAlive::new,
-          map(0x00, MINECRAFT_1_7_2, false),
-          map(0x0B, MINECRAFT_1_9, false),
-          map(0x0C, MINECRAFT_1_12, false),
-          map(0x0B, MINECRAFT_1_12_1, false),
-          map(0x0E, MINECRAFT_1_13, false),
-          map(0x0F, MINECRAFT_1_14, false),
-          map(0x10, MINECRAFT_1_16, false),
-          map(0x0F, MINECRAFT_1_17, false));
+          map(0x00, ProtocolVersion.MINECRAFT_1_7_2, false),
+          map(0x0B, ProtocolVersion.MINECRAFT_1_9, false),
+          map(0x0C, ProtocolVersion.MINECRAFT_1_12, false),
+          map(0x0B, ProtocolVersion.MINECRAFT_1_12_1, false),
+          map(0x0E, ProtocolVersion.MINECRAFT_1_13, false),
+          map(0x0F, ProtocolVersion.MINECRAFT_1_14, false),
+          map(0x10, ProtocolVersion.MINECRAFT_1_16, false),
+          map(0x0F, ProtocolVersion.MINECRAFT_1_17, false));
       serverbound.register(ResourcePackResponse.class, ResourcePackResponse::new,
-          map(0x19, MINECRAFT_1_8, false),
-          map(0x16, MINECRAFT_1_9, false),
-          map(0x18, MINECRAFT_1_12, false),
-          map(0x1D, MINECRAFT_1_13, false),
-          map(0x1F, MINECRAFT_1_14, false),
-          map(0x20, MINECRAFT_1_16, false),
-          map(0x21, MINECRAFT_1_16_2, false));
-
+          map(0x19, ProtocolVersion.MINECRAFT_1_8, false),
+          map(0x16, ProtocolVersion.MINECRAFT_1_9, false),
+          map(0x18, ProtocolVersion.MINECRAFT_1_12, false),
+          map(0x1D, ProtocolVersion.MINECRAFT_1_13, false),
+          map(0x1F, ProtocolVersion.MINECRAFT_1_14, false),
+          map(0x20, ProtocolVersion.MINECRAFT_1_16, false),
+          map(0x21, ProtocolVersion.MINECRAFT_1_16_2, false));
       clientbound.register(BossBar.class, BossBar::new,
-          map(0x0C, MINECRAFT_1_9, false),
-          map(0x0D, MINECRAFT_1_15, false),
-          map(0x0C, MINECRAFT_1_16, false),
-          map(0x0D, MINECRAFT_1_17, false));
+          map(0x0C, ProtocolVersion.MINECRAFT_1_9, false),
+          map(0x0D, ProtocolVersion.MINECRAFT_1_15, false),
+          map(0x0C, ProtocolVersion.MINECRAFT_1_16, false),
+          map(0x0D, ProtocolVersion.MINECRAFT_1_17, false));
       clientbound.register(Chat.class, Chat::new,
-          map(0x02, MINECRAFT_1_7_2, true),
-          map(0x0F, MINECRAFT_1_9, true),
-          map(0x0E, MINECRAFT_1_13, true),
-          map(0x0F, MINECRAFT_1_15, true),
-          map(0x0E, MINECRAFT_1_16, true),
-          map(0x0F, MINECRAFT_1_17, true));
+          map(0x02, ProtocolVersion.MINECRAFT_1_7_2, true),
+          map(0x0F, ProtocolVersion.MINECRAFT_1_9, true),
+          map(0x0E, ProtocolVersion.MINECRAFT_1_13, true),
+          map(0x0F, ProtocolVersion.MINECRAFT_1_15, true),
+          map(0x0E, ProtocolVersion.MINECRAFT_1_16, true),
+          map(0x0F, ProtocolVersion.MINECRAFT_1_17, true));
       clientbound.register(TabCompleteResponse.class, TabCompleteResponse::new,
-          map(0x3A, MINECRAFT_1_7_2, false),
-          map(0x0E, MINECRAFT_1_9, false),
-          map(0x10, MINECRAFT_1_13, false),
-          map(0x11, MINECRAFT_1_15, false),
-          map(0x10, MINECRAFT_1_16, false),
-          map(0x0F, MINECRAFT_1_16_2, false),
-          map(0x11, MINECRAFT_1_17, false));
+          map(0x3A, ProtocolVersion.MINECRAFT_1_7_2, false),
+          map(0x0E, ProtocolVersion.MINECRAFT_1_9, false),
+          map(0x10, ProtocolVersion.MINECRAFT_1_13, false),
+          map(0x11, ProtocolVersion.MINECRAFT_1_15, false),
+          map(0x10, ProtocolVersion.MINECRAFT_1_16, false),
+          map(0x0F, ProtocolVersion.MINECRAFT_1_16_2, false),
+          map(0x11, ProtocolVersion.MINECRAFT_1_17, false));
       clientbound.register(AvailableCommands.class, AvailableCommands::new,
-          map(0x11, MINECRAFT_1_13, false),
-          map(0x12, MINECRAFT_1_15, false),
-          map(0x11, MINECRAFT_1_16, false),
-          map(0x10, MINECRAFT_1_16_2, false),
-          map(0x12, MINECRAFT_1_17, false));
+          map(0x11, ProtocolVersion.MINECRAFT_1_13, false),
+          map(0x12, ProtocolVersion.MINECRAFT_1_15, false),
+          map(0x11, ProtocolVersion.MINECRAFT_1_16, false),
+          map(0x10, ProtocolVersion.MINECRAFT_1_16_2, false),
+          map(0x12, ProtocolVersion.MINECRAFT_1_17, false));
       clientbound.register(PluginMessage.class, PluginMessage::new,
-          map(0x3F, MINECRAFT_1_7_2, false),
-          map(0x18, MINECRAFT_1_9, false),
-          map(0x19, MINECRAFT_1_13, false),
-          map(0x18, MINECRAFT_1_14, false),
-          map(0x19, MINECRAFT_1_15, false),
-          map(0x18, MINECRAFT_1_16, false),
-          map(0x17, MINECRAFT_1_16_2, false),
-          map(0x18, MINECRAFT_1_17, false));
+          map(0x3F, ProtocolVersion.MINECRAFT_1_7_2, false),
+          map(0x18, ProtocolVersion.MINECRAFT_1_9, false),
+          map(0x19, ProtocolVersion.MINECRAFT_1_13, false),
+          map(0x18, ProtocolVersion.MINECRAFT_1_14, false),
+          map(0x19, ProtocolVersion.MINECRAFT_1_15, false),
+          map(0x18, ProtocolVersion.MINECRAFT_1_16, false),
+          map(0x17, ProtocolVersion.MINECRAFT_1_16_2, false),
+          map(0x18, ProtocolVersion.MINECRAFT_1_17, false));
       clientbound.register(Disconnect.class, Disconnect::new,
-          map(0x40, MINECRAFT_1_7_2, false),
-          map(0x1A, MINECRAFT_1_9, false),
-          map(0x1B, MINECRAFT_1_13, false),
-          map(0x1A, MINECRAFT_1_14, false),
-          map(0x1B, MINECRAFT_1_15, false),
-          map(0x1A, MINECRAFT_1_16, false),
-          map(0x19, MINECRAFT_1_16_2, false),
-          map(0x1A, MINECRAFT_1_17, false));
+          map(0x40, ProtocolVersion.MINECRAFT_1_7_2, false),
+          map(0x1A, ProtocolVersion.MINECRAFT_1_9, false),
+          map(0x1B, ProtocolVersion.MINECRAFT_1_13, false),
+          map(0x1A, ProtocolVersion.MINECRAFT_1_14, false),
+          map(0x1B, ProtocolVersion.MINECRAFT_1_15, false),
+          map(0x1A, ProtocolVersion.MINECRAFT_1_16, false),
+          map(0x19, ProtocolVersion.MINECRAFT_1_16_2, false),
+          map(0x1A, ProtocolVersion.MINECRAFT_1_17, false));
       clientbound.register(KeepAlive.class, KeepAlive::new,
-          map(0x00, MINECRAFT_1_7_2, false),
-          map(0x1F, MINECRAFT_1_9, false),
-          map(0x21, MINECRAFT_1_13, false),
-          map(0x20, MINECRAFT_1_14, false),
-          map(0x21, MINECRAFT_1_15, false),
-          map(0x20, MINECRAFT_1_16, false),
-          map(0x1F, MINECRAFT_1_16_2, false),
-          map(0x21, MINECRAFT_1_17, false));
+          map(0x00, ProtocolVersion.MINECRAFT_1_7_2, false),
+          map(0x1F, ProtocolVersion.MINECRAFT_1_9, false),
+          map(0x21, ProtocolVersion.MINECRAFT_1_13, false),
+          map(0x20, ProtocolVersion.MINECRAFT_1_14, false),
+          map(0x21, ProtocolVersion.MINECRAFT_1_15, false),
+          map(0x20, ProtocolVersion.MINECRAFT_1_16, false),
+          map(0x1F, ProtocolVersion.MINECRAFT_1_16_2, false),
+          map(0x21, ProtocolVersion.MINECRAFT_1_17, false));
       clientbound.register(JoinGame.class, JoinGame::new,
-          map(0x01, MINECRAFT_1_7_2, false),
-          map(0x23, MINECRAFT_1_9, false),
-          map(0x25, MINECRAFT_1_13, false),
-          map(0x25, MINECRAFT_1_14, false),
-          map(0x26, MINECRAFT_1_15, false),
-          map(0x25, MINECRAFT_1_16, false),
-          map(0x24, MINECRAFT_1_16_2, false),
-          map(0x26, MINECRAFT_1_17, false));
+          map(0x01, ProtocolVersion.MINECRAFT_1_7_2, false),
+          map(0x23, ProtocolVersion.MINECRAFT_1_9, false),
+          map(0x25, ProtocolVersion.MINECRAFT_1_13, false),
+          map(0x25, ProtocolVersion.MINECRAFT_1_14, false),
+          map(0x26, ProtocolVersion.MINECRAFT_1_15, false),
+          map(0x25, ProtocolVersion.MINECRAFT_1_16, false),
+          map(0x24, ProtocolVersion.MINECRAFT_1_16_2, false),
+          map(0x26, ProtocolVersion.MINECRAFT_1_17, false));
       clientbound.register(Respawn.class, Respawn::new,
-          map(0x07, MINECRAFT_1_7_2, true),
-          map(0x33, MINECRAFT_1_9, true),
-          map(0x34, MINECRAFT_1_12, true),
-          map(0x35, MINECRAFT_1_12_1, true),
-          map(0x38, MINECRAFT_1_13, true),
-          map(0x3A, MINECRAFT_1_14, true),
-          map(0x3B, MINECRAFT_1_15, true),
-          map(0x3A, MINECRAFT_1_16, true),
-          map(0x39, MINECRAFT_1_16_2, true),
-          map(0x3D, MINECRAFT_1_17, true));
+          map(0x07, ProtocolVersion.MINECRAFT_1_7_2, true),
+          map(0x33, ProtocolVersion.MINECRAFT_1_9, true),
+          map(0x34, ProtocolVersion.MINECRAFT_1_12, true),
+          map(0x35, ProtocolVersion.MINECRAFT_1_12_1, true),
+          map(0x38, ProtocolVersion.MINECRAFT_1_13, true),
+          map(0x3A, ProtocolVersion.MINECRAFT_1_14, true),
+          map(0x3B, ProtocolVersion.MINECRAFT_1_15, true),
+          map(0x3A, ProtocolVersion.MINECRAFT_1_16, true),
+          map(0x39, ProtocolVersion.MINECRAFT_1_16_2, true),
+          map(0x3D, ProtocolVersion.MINECRAFT_1_17, true));
       clientbound.register(ResourcePackRequest.class, ResourcePackRequest::new,
-          map(0x48, MINECRAFT_1_8, false),
-          map(0x32, MINECRAFT_1_9, false),
-          map(0x33, MINECRAFT_1_12, false),
-          map(0x34, MINECRAFT_1_12_1, false),
-          map(0x37, MINECRAFT_1_13, false),
-          map(0x39, MINECRAFT_1_14, false),
-          map(0x3A, MINECRAFT_1_15, false),
-          map(0x39, MINECRAFT_1_16, false),
-          map(0x38, MINECRAFT_1_16_2, false),
-          map(0x3C, MINECRAFT_1_17, false));
+          map(0x48, ProtocolVersion.MINECRAFT_1_8, false),
+          map(0x32, ProtocolVersion.MINECRAFT_1_9, false),
+          map(0x33, ProtocolVersion.MINECRAFT_1_12, false),
+          map(0x34, ProtocolVersion.MINECRAFT_1_12_1, false),
+          map(0x37, ProtocolVersion.MINECRAFT_1_13, false),
+          map(0x39, ProtocolVersion.MINECRAFT_1_14, false),
+          map(0x3A, ProtocolVersion.MINECRAFT_1_15, false),
+          map(0x39, ProtocolVersion.MINECRAFT_1_16, false),
+          map(0x38, ProtocolVersion.MINECRAFT_1_16_2, false),
+          map(0x3C, ProtocolVersion.MINECRAFT_1_17, false));
       clientbound.register(HeaderAndFooter.class, HeaderAndFooter::new,
-          map(0x47, MINECRAFT_1_8, true),
-          map(0x48, MINECRAFT_1_9, true),
-          map(0x47, MINECRAFT_1_9_4, true),
-          map(0x49, MINECRAFT_1_12, true),
-          map(0x4A, MINECRAFT_1_12_1, true),
-          map(0x4E, MINECRAFT_1_13, true),
-          map(0x53, MINECRAFT_1_14, true),
-          map(0x54, MINECRAFT_1_15, true),
-          map(0x53, MINECRAFT_1_16, true),
-          map(0x5E, MINECRAFT_1_17, true));
+          map(0x47, ProtocolVersion.MINECRAFT_1_8, true),
+          map(0x48, ProtocolVersion.MINECRAFT_1_9, true),
+          map(0x47, ProtocolVersion.MINECRAFT_1_9_4, true),
+          map(0x49, ProtocolVersion.MINECRAFT_1_12, true),
+          map(0x4A, ProtocolVersion.MINECRAFT_1_12_1, true),
+          map(0x4E, ProtocolVersion.MINECRAFT_1_13, true),
+          map(0x53, ProtocolVersion.MINECRAFT_1_14, true),
+          map(0x54, ProtocolVersion.MINECRAFT_1_15, true),
+          map(0x53, ProtocolVersion.MINECRAFT_1_16, true),
+          map(0x5E, ProtocolVersion.MINECRAFT_1_17, true));
       clientbound.register(LegacyTitlePacket.class, LegacyTitlePacket::new,
-          map(0x45, MINECRAFT_1_8, true),
-          map(0x45, MINECRAFT_1_9, true),
-          map(0x47, MINECRAFT_1_12, true),
-          map(0x48, MINECRAFT_1_12_1, true),
-          map(0x4B, MINECRAFT_1_13, true),
-          map(0x4F, MINECRAFT_1_14, true),
-          map(0x50, MINECRAFT_1_15, true),
-          map(0x4F, MINECRAFT_1_16, MINECRAFT_1_16_4, true));
+          map(0x45, ProtocolVersion.MINECRAFT_1_8, true),
+          map(0x45, ProtocolVersion.MINECRAFT_1_9, true),
+          map(0x47, ProtocolVersion.MINECRAFT_1_12, true),
+          map(0x48, ProtocolVersion.MINECRAFT_1_12_1, true),
+          map(0x4B, ProtocolVersion.MINECRAFT_1_13, true),
+          map(0x4F, ProtocolVersion.MINECRAFT_1_14, true),
+          map(0x50, ProtocolVersion.MINECRAFT_1_15, true),
+          map(0x4F, ProtocolVersion.MINECRAFT_1_16, ProtocolVersion.MINECRAFT_1_16_4, true));
       clientbound.register(TitleSubtitlePacket.class, TitleSubtitlePacket::new,
-          map(0x57, MINECRAFT_1_17, true));
+          map(0x57, ProtocolVersion.MINECRAFT_1_17, true));
       clientbound.register(TitleTextPacket.class, TitleTextPacket::new,
-          map(0x59, MINECRAFT_1_17, true));
+          map(0x59, ProtocolVersion.MINECRAFT_1_17, true));
       clientbound.register(TitleActionbarPacket.class, TitleActionbarPacket::new,
-          map(0x41, MINECRAFT_1_17, true));
+          map(0x41, ProtocolVersion.MINECRAFT_1_17, true));
       clientbound.register(TitleTimesPacket.class, TitleTimesPacket::new,
-          map(0x5A, MINECRAFT_1_17, true));
+          map(0x5A, ProtocolVersion.MINECRAFT_1_17, true));
       clientbound.register(TitleClearPacket.class, TitleClearPacket::new,
-          map(0x10, MINECRAFT_1_17, true));
+          map(0x10, ProtocolVersion.MINECRAFT_1_17, true));
       clientbound.register(PlayerListItem.class, PlayerListItem::new,
-          map(0x38, MINECRAFT_1_7_2, false),
-          map(0x2D, MINECRAFT_1_9, false),
-          map(0x2E, MINECRAFT_1_12_1, false),
-          map(0x30, MINECRAFT_1_13, false),
-          map(0x33, MINECRAFT_1_14, false),
-          map(0x34, MINECRAFT_1_15, false),
-          map(0x33, MINECRAFT_1_16, false),
-          map(0x32, MINECRAFT_1_16_2, false),
-          map(0x36, MINECRAFT_1_17, false));
+          map(0x38, ProtocolVersion.MINECRAFT_1_7_2, false),
+          map(0x2D, ProtocolVersion.MINECRAFT_1_9, false),
+          map(0x2E, ProtocolVersion.MINECRAFT_1_12_1, false),
+          map(0x30, ProtocolVersion.MINECRAFT_1_13, false),
+          map(0x33, ProtocolVersion.MINECRAFT_1_14, false),
+          map(0x34, ProtocolVersion.MINECRAFT_1_15, false),
+          map(0x33, ProtocolVersion.MINECRAFT_1_16, false),
+          map(0x32, ProtocolVersion.MINECRAFT_1_16_2, false),
+          map(0x36, ProtocolVersion.MINECRAFT_1_17, false));
     }
   },
   LOGIN {
     {
       serverbound.register(ServerLogin.class, ServerLogin::new,
-          map(0x00, MINECRAFT_1_7_2, false));
+          map(0x00, ProtocolVersion.MINECRAFT_1_7_2, false));
       serverbound.register(EncryptionResponse.class, EncryptionResponse::new,
-          map(0x01, MINECRAFT_1_7_2, false));
+          map(0x01, ProtocolVersion.MINECRAFT_1_7_2, false));
       serverbound.register(LoginPluginResponse.class, LoginPluginResponse::new,
-          map(0x02, MINECRAFT_1_13, false));
+          map(0x02, ProtocolVersion.MINECRAFT_1_13, false));
       clientbound.register(Disconnect.class, Disconnect::new,
-          map(0x00, MINECRAFT_1_7_2, false));
+          map(0x00, ProtocolVersion.MINECRAFT_1_7_2, false));
       clientbound.register(EncryptionRequest.class, EncryptionRequest::new,
-          map(0x01, MINECRAFT_1_7_2, false));
+          map(0x01, ProtocolVersion.MINECRAFT_1_7_2, false));
       clientbound.register(ServerLoginSuccess.class, ServerLoginSuccess::new,
-          map(0x02, MINECRAFT_1_7_2, false));
+          map(0x02, ProtocolVersion.MINECRAFT_1_7_2, false));
       clientbound.register(SetCompression.class, SetCompression::new,
-          map(0x03, MINECRAFT_1_8, false));
+          map(0x03, ProtocolVersion.MINECRAFT_1_8, false));
       clientbound.register(LoginPluginMessage.class, LoginPluginMessage::new,
-          map(0x04, MINECRAFT_1_13, false));
+          map(0x04, ProtocolVersion.MINECRAFT_1_13, false));
     }
-  }, BotFilter{};
+  },
+  VIRTUAL {};
 
   public static final int STATUS_ID = 1;
   public static final int LOGIN_ID = 2;
@@ -323,21 +310,21 @@ public enum StateRegistry {
       this.versions = Collections.unmodifiableMap(mutableVersions);
     }
 
-    //BotFilter public
+    // BotFilter backport: Make public
     public ProtocolRegistry getProtocolRegistry(final ProtocolVersion version) {
       ProtocolRegistry registry = versions.get(version);
       if (registry == null) {
         if (fallback) {
-          return getProtocolRegistry(MINIMUM_VERSION);
+          return getProtocolRegistry(ProtocolVersion.MINIMUM_VERSION);
         }
         throw new IllegalArgumentException("Could not find data for protocol version " + version);
       }
       return registry;
     }
 
-    //BotFilter public
+    // BotFilter backport: Make public
     public <P extends MinecraftPacket> void register(Class<P> clazz, Supplier<P> packetSupplier,
-        PacketMapping... mappings) {
+                                                     PacketMapping... mappings) {
       if (mappings.length == 0) {
         throw new IllegalArgumentException("At least one mapping must be provided.");
       }
@@ -354,13 +341,14 @@ public enum StateRegistry {
           }
           if (from.compareTo(lastValid) > 0) {
             throw new IllegalArgumentException(
-                    "Last mapping version cannot be higher than highest mapping version");
+                "Last mapping version cannot be higher than highest mapping version");
           }
         }
         ProtocolVersion to = current == next ? lastValid != null
-                ? lastValid : getLast(SUPPORTED_VERSIONS) : next.protocolVersion;
+            ? lastValid
+            : getLast(ProtocolVersion.SUPPORTED_VERSIONS) : next.protocolVersion;
 
-        if (from.compareTo(to) >= 0 && from != getLast(SUPPORTED_VERSIONS)) {
+        if (from.compareTo(to) >= 0 && from != getLast(ProtocolVersion.SUPPORTED_VERSIONS)) {
           throw new IllegalArgumentException(String.format(
               "Next mapping version (%s) should be lower then current (%s)", to, from));
         }
@@ -394,6 +382,17 @@ public enum StateRegistry {
       }
     }
 
+    public PacketMapping[] getMappingsForPacket(Class<? extends MinecraftPacket> packet, boolean encodeOnly) {
+      ProtocolVersion from = ProtocolVersion.MINIMUM_VERSION;
+      ProtocolVersion to = ProtocolVersion.MAXIMUM_VERSION;
+      List<PacketMapping> mappings = new ArrayList<>();
+      for (ProtocolVersion protocol : EnumSet.range(from, to)) {
+        int id = getProtocolRegistry(protocol).getPacketId(packet);
+        mappings.add(new PacketMapping(id, protocol, null, encodeOnly));
+      }
+      return mappings.toArray(new PacketMapping[0]);
+    }
+
     public class ProtocolRegistry {
 
       public final ProtocolVersion version;
@@ -450,8 +449,8 @@ public enum StateRegistry {
         final int id = this.packetClassToId.getInt(clazz);
         if (id == Integer.MIN_VALUE) {
           throw new IllegalArgumentException(String.format(
-                  "Unable to find id for packet of type %s in %s protocol %s",
-                  clazz.getName(), PacketRegistry.this.direction, this.version
+              "Unable to find id for packet of type %s in %s protocol %s",
+              clazz.getName(), PacketRegistry.this.direction, this.version
           ));
         }
         return id;
@@ -512,7 +511,7 @@ public enum StateRegistry {
    * @return PacketMapping with the provided arguments
    */
   @SuppressFBWarnings({"UPM_UNCALLED_PRIVATE_METHOD"})
-  //BotFilter public
+  // BotFilter backport: Make public
   public static PacketMapping map(int id, ProtocolVersion version, boolean encodeOnly) {
     return map(id, version, null, encodeOnly);
   }
@@ -520,16 +519,15 @@ public enum StateRegistry {
   /**
    * Creates a PacketMapping using the provided arguments.
    *
-   * @param id         Packet Id
-   * @param version    Protocol version
-   * @param encodeOnly When true packet decoding will be disabled
+   * @param id                       Packet Id
+   * @param version                  Protocol version
+   * @param encodeOnly               When true packet decoding will be disabled
    * @param lastValidProtocolVersion Last version this Mapping is valid at
    * @return PacketMapping with the provided arguments
    */
-  //BotFilter public
+  // BotFilter backport: Make public
   public static PacketMapping map(int id, ProtocolVersion version,
-          ProtocolVersion lastValidProtocolVersion, boolean encodeOnly) {
+                                  ProtocolVersion lastValidProtocolVersion, boolean encodeOnly) {
     return new PacketMapping(id, version, lastValidProtocolVersion, encodeOnly);
   }
-
 }
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/VelocityConnectionEvent.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/VelocityConnectionEvent.java
index 6d4fe06b..4de63cf0 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/VelocityConnectionEvent.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/VelocityConnectionEvent.java
@@ -21,6 +21,7 @@ package com.velocitypowered.proxy.protocol;
  * Describes various events fired during the course of a connection.
  */
 public enum VelocityConnectionEvent {
+
   COMPRESSION_ENABLED,
   COMPRESSION_DISABLED,
   ENCRYPTION_ENABLED,
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/netty/GS4QueryHandler.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/netty/GS4QueryHandler.java
index 8a711ae6..ba38d065 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/netty/GS4QueryHandler.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/netty/GS4QueryHandler.java
@@ -54,9 +54,9 @@ public class GS4QueryHandler extends SimpleChannelInboundHandler<DatagramPacket>
   private static final short QUERY_MAGIC_SECOND = 0xFD;
   private static final byte QUERY_TYPE_HANDSHAKE = 0x09;
   private static final byte QUERY_TYPE_STAT = 0x00;
-  private static final byte[] QUERY_RESPONSE_FULL_PADDING = new byte[]{0x73, 0x70, 0x6C, 0x69, 0x74,
+  private static final byte[] QUERY_RESPONSE_FULL_PADDING = new byte[] {0x73, 0x70, 0x6C, 0x69, 0x74,
       0x6E, 0x75, 0x6D, 0x00, (byte) 0x80, 0x00};
-  private static final byte[] QUERY_RESPONSE_FULL_PADDING2 = new byte[]{0x01, 0x70, 0x6C, 0x61,
+  private static final byte[] QUERY_RESPONSE_FULL_PADDING2 = new byte[] {0x01, 0x70, 0x6C, 0x61,
       0x79, 0x65, 0x72, 0x5F, 0x00, 0x00};
 
   // Contents to add into basic stat response. See ResponseWriter class below
@@ -85,16 +85,18 @@ public class GS4QueryHandler extends SimpleChannelInboundHandler<DatagramPacket>
     return QueryResponse.builder()
         .hostname(PlainComponentSerializer.plain().serialize(
             Settings.IMP.MAIN_SETTINGS.MAINTENANCE.ENABLED
-            ? server.getMaintenanceMotd()
-            : server.getConfiguration().getMotd()))
+                ? server.getMaintenanceMotd()
+                : server.getConfiguration().getMotd()))
         .gameVersion("")
         .map(server.getConfiguration().getQueryMap())
-        .currentPlayers(Settings.IMP.MAIN_SETTINGS.MAINTENANCE.ENABLED
-            ? 0
-            : server.getPlayerCount())
-        .maxPlayers(Settings.IMP.MAIN_SETTINGS.MAINTENANCE.ENABLED
-            ? 0
-            : server.getConfiguration().getShowMaxPlayers())
+        .currentPlayers(
+            Settings.IMP.MAIN_SETTINGS.MAINTENANCE.ENABLED
+                ? 0
+                : server.getPlayerCount())
+        .maxPlayers(
+            Settings.IMP.MAIN_SETTINGS.MAINTENANCE.ENABLED
+                ? 0
+                : server.getConfiguration().getShowMaxPlayers())
         .proxyPort(server.getConfiguration().getBind().getPort())
         .proxyHost(server.getConfiguration().getBind().getHostString())
         .players(server.getAllPlayers().stream().filter(p -> p.getCurrentServer()
@@ -103,14 +105,14 @@ public class GS4QueryHandler extends SimpleChannelInboundHandler<DatagramPacket>
                 .contains(p.getCurrentServer().get().getServerInfo().getName()))
             .map(Player::getUsername)
             .collect(Collectors.toList()))
-        .proxyVersion((Settings.IMP.MAIN_SETTINGS.MAINTENANCE.ENABLED
-            ? Settings.IMP.MAIN_SETTINGS.MAINTENANCE.PING_VERSION
-            : Settings.IMP.MAIN_SETTINGS.PING_VERSION)
-                .replace('&', '§')
-                .replace("{NL}", "\n")
-                .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX))
+        .proxyVersion((
+            Settings.IMP.MAIN_SETTINGS.MAINTENANCE.ENABLED
+                ? Settings.IMP.MAIN_SETTINGS.MAINTENANCE.PING_VERSION
+                : Settings.IMP.MAIN_SETTINGS.PING_VERSION)
+                    .replace('&', '§'))
         .plugins(
-            server.getConfiguration().shouldQueryShowPlugins() ? getRealPluginInformation()
+            server.getConfiguration().shouldQueryShowPlugins()
+                ? getRealPluginInformation()
                 : Collections.emptyList())
         .build();
   }
@@ -282,7 +284,7 @@ public class GS4QueryHandler extends SimpleChannelInboundHandler<DatagramPacket>
       if (isBasic) {
         return;
       }
-      
+
       StringBuilder pluginsString = new StringBuilder();
       pluginsString.append(serverVersion).append(':').append(' ');
       Iterator<QueryResponse.PluginInformation> iterator = plugins.iterator();
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/netty/MinecraftCompressDecoder.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/netty/MinecraftCompressDecoder.java
index 82fb4c15..cdc6799e 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/netty/MinecraftCompressDecoder.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/netty/MinecraftCompressDecoder.java
@@ -35,7 +35,8 @@ public class MinecraftCompressDecoder extends MessageToMessageDecoder<ByteBuf> {
 
   private static final int UNCOMPRESSED_CAP =
       Boolean.getBoolean("velocity.increased-compression-cap")
-          ? HARD_MAXIMUM_UNCOMPRESSED_SIZE : VANILLA_MAXIMUM_UNCOMPRESSED_SIZE;
+          ? HARD_MAXIMUM_UNCOMPRESSED_SIZE
+          : VANILLA_MAXIMUM_UNCOMPRESSED_SIZE;
 
   private int threshold;
   private final VelocityCompressor compressor;
@@ -55,10 +56,9 @@ public class MinecraftCompressDecoder extends MessageToMessageDecoder<ByteBuf> {
     }
 
     checkFrame(claimedUncompressedSize >= threshold, "Uncompressed size %s is less than"
-            + " threshold %s", claimedUncompressedSize, threshold);
+        + " threshold %s", claimedUncompressedSize, threshold);
     checkFrame(claimedUncompressedSize <= UNCOMPRESSED_CAP,
-        "Uncompressed size %s exceeds hard threshold of %s", claimedUncompressedSize,
-        UNCOMPRESSED_CAP);
+        "Uncompressed size %s exceeds hard threshold of %s", claimedUncompressedSize, UNCOMPRESSED_CAP);
 
     ByteBuf compatibleIn = ensureCompatible(ctx.alloc(), compressor, in);
     ByteBuf uncompressed = preferredBuffer(ctx.alloc(), compressor, claimedUncompressedSize);
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/netty/MinecraftDecoder.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/netty/MinecraftDecoder.java
index 5243a679..7cfc90a5 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/netty/MinecraftDecoder.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/netty/MinecraftDecoder.java
@@ -46,8 +46,7 @@ public class MinecraftDecoder extends ChannelInboundHandlerAdapter {
    */
   public MinecraftDecoder(ProtocolUtils.Direction direction) {
     this.direction = Preconditions.checkNotNull(direction, "direction");
-    this.registry = direction.getProtocolRegistry(StateRegistry.HANDSHAKE,
-        ProtocolVersion.MINIMUM_VERSION);
+    this.registry = direction.getProtocolRegistry(StateRegistry.HANDSHAKE, ProtocolVersion.MINIMUM_VERSION);
     this.state = StateRegistry.HANDSHAKE;
   }
 
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/netty/MinecraftEncoder.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/netty/MinecraftEncoder.java
index 7ed59202..72f91ac2 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/netty/MinecraftEncoder.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/netty/MinecraftEncoder.java
@@ -39,8 +39,7 @@ public class MinecraftEncoder extends MessageToByteEncoder<MinecraftPacket> {
    */
   public MinecraftEncoder(ProtocolUtils.Direction direction) {
     this.direction = Preconditions.checkNotNull(direction, "direction");
-    this.registry = direction
-        .getProtocolRegistry(StateRegistry.HANDSHAKE, ProtocolVersion.MINIMUM_VERSION);
+    this.registry = direction.getProtocolRegistry(StateRegistry.HANDSHAKE, ProtocolVersion.MINIMUM_VERSION);
     this.state = StateRegistry.HANDSHAKE;
   }
 
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/AvailableCommands.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/AvailableCommands.java
index 50424f5e..a682863e 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/AvailableCommands.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/AvailableCommands.java
@@ -54,6 +54,7 @@ import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 import org.checkerframework.checker.nullness.qual.Nullable;
 
 public class AvailableCommands implements MinecraftPacket {
+
   private static final Command<CommandSource> PLACEHOLDER_COMMAND = source -> 0;
 
   private static final byte NODE_TYPE_ROOT = 0x00;
@@ -69,6 +70,7 @@ public class AvailableCommands implements MinecraftPacket {
 
   /**
    * Returns the root node.
+   *
    * @return the root node
    */
   public RootCommandNode<CommandSource> getRootNode() {
@@ -164,12 +166,11 @@ public class AvailableCommands implements MinecraftPacket {
 
     if (node instanceof ArgumentCommandNode<?, ?>) {
       ProtocolUtils.writeString(buf, node.getName());
-      ArgumentPropertyRegistry.serialize(buf,
-              ((ArgumentCommandNode<CommandSource, ?>) node).getType());
+      ArgumentPropertyRegistry.serialize(buf, ((ArgumentCommandNode<CommandSource, ?>) node).getType());
 
       if (((ArgumentCommandNode<CommandSource, ?>) node).getCustomSuggestions() != null) {
         SuggestionProvider<CommandSource> provider = ((ArgumentCommandNode<CommandSource, ?>) node)
-                .getCustomSuggestions();
+            .getCustomSuggestions();
         String name = "minecraft:ask_server";
         if (provider instanceof ProtocolSuggestionProvider) {
           name = ((ProtocolSuggestionProvider) provider).name;
@@ -316,11 +317,9 @@ public class AvailableCommands implements MinecraftPacket {
 
       if (args != null) {
         if (args instanceof LiteralArgumentBuilder) {
-          helper.add("argsLabel",
-                  ((LiteralArgumentBuilder<CommandSource>) args).getLiteral());
+          helper.add("argsLabel", ((LiteralArgumentBuilder<CommandSource>) args).getLiteral());
         } else if (args instanceof RequiredArgumentBuilder) {
-          helper.add("argsName",
-                  ((RequiredArgumentBuilder<CommandSource, ?>) args).getName());
+          helper.add("argsName", ((RequiredArgumentBuilder<CommandSource, ?>) args).getName());
         }
       }
 
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java
index 9899ef0c..31b25644 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java
@@ -75,6 +75,10 @@ public class JoinGame implements MinecraftPacket {
     this.dimension = dimension;
   }
 
+  public void setPartialHashedSeed(long partialHashedSeed) {
+    this.partialHashedSeed = partialHashedSeed;
+  }
+
   public long getPartialHashedSeed() {
     return partialHashedSeed;
   }
@@ -159,6 +163,10 @@ public class JoinGame implements MinecraftPacket {
     this.biomeRegistry = biomeRegistry;
   }
 
+  public void setCurrentDimensionData(DimensionData dimensionData) {
+    this.currentDimensionData = dimensionData;
+  }
+
   public DimensionData getCurrentDimensionData() {
     return currentDimensionData;
   }
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/util/PluginMessageUtil.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/util/PluginMessageUtil.java
index 37d77cf2..c641c510 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/util/PluginMessageUtil.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/util/PluginMessageUtil.java
@@ -129,7 +129,7 @@ public final class PluginMessageUtil {
 
     String currentBrand = readBrandMessage(message.content());
     String rewrittenBrand = Settings.IMP.MAIN_SETTINGS.BRAND
-            .replace("{ServerBrand}", currentBrand).replace("{ProxyBrand}", version.getName());
+        .replace("{ServerBrand}", currentBrand).replace("{ProxyBrand}", version.getName());
 
     ByteBuf rewrittenBuf = Unpooled.buffer();
     if (protocolVersion.compareTo(ProtocolVersion.MINECRAFT_1_8) >= 0) {
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/util/bossbar/AdventureBossBarManager.java b/proxy/src/main/java/com/velocitypowered/proxy/util/bossbar/AdventureBossBarManager.java
index 3dc8ea13..e0a09962 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/util/bossbar/AdventureBossBarManager.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/util/bossbar/AdventureBossBarManager.java
@@ -117,16 +117,15 @@ public class AdventureBossBarManager implements BossBar.Listener {
   }
 
   @Override
-  public void bossBarNameChanged(@NonNull BossBar bar, @NonNull Component oldName,
-      @NonNull Component newName) {
+  public void bossBarNameChanged(@NonNull BossBar bar, @NonNull Component oldName, @NonNull Component newName) {
     BossBarHolder holder = this.getHandler(bar);
     if (holder == null) {
       return;
     }
     for (ConnectedPlayer player : holder.subscribers) {
-      Component translated = player.translateMessage(newName);
+      //Component translated = player.translateMessage(newName);
       com.velocitypowered.proxy.protocol.packet.BossBar packet = holder.createTitleUpdate(
-          translated, player.getProtocolVersion());
+          newName/*translated*/, player.getProtocolVersion());
       player.getConnection().write(packet);
     }
   }
@@ -208,8 +207,9 @@ public class AdventureBossBarManager implements BossBar.Listener {
           .proxy.protocol.packet.BossBar();
       packet.setUuid(this.id);
       packet.setAction(com.velocitypowered.proxy.protocol.packet.BossBar.ADD);
+      // ElytraProxy: Removed as unnecessary
       packet.setName(ProtocolUtils.getJsonChatSerializer(player.getProtocolVersion())
-          .serialize(player.translateMessage(bar.name())));
+          .serialize(bar.name()/*player.translateMessage(bar.name())*/));
       packet.setColor(COLORS_TO_PROTOCOL.get(bar.color()));
       packet.setOverlay(OVERLAY_TO_PROTOCOL.get(bar.overlay()));
       packet.setPercent(bar.progress());
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/ElytraProxy.java b/proxy/src/main/java/net/elytrium/elytraproxy/ElytraProxy.java
index a2dc13bf..d3b12ecf 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/ElytraProxy.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/ElytraProxy.java
@@ -19,91 +19,110 @@ package net.elytrium.elytraproxy;
 
 import com.velocitypowered.api.command.CommandManager;
 import com.velocitypowered.api.command.CommandSource;
+import com.velocitypowered.api.proxy.InboundConnection;
 import com.velocitypowered.proxy.VelocityServer;
-import com.velocitypowered.proxy.connection.MinecraftConnection;
 import com.velocitypowered.proxy.connection.client.ConnectedPlayer;
 import com.velocitypowered.proxy.connection.client.LoginSessionHandler;
-import com.velocitypowered.proxy.network.Connections;
+import com.velocitypowered.proxy.protocol.StateRegistry;
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
-import io.netty.channel.ChannelPipeline;
 import java.io.BufferedReader;
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStreamReader;
+import java.net.InetAddress;
+import java.net.InetSocketAddress;
 import java.net.URL;
 import java.net.URLConnection;
+import java.net.http.HttpClient;
 import java.nio.charset.StandardCharsets;
+import java.sql.SQLException;
+import java.util.HashMap;
+import java.util.Locale;
+import java.util.concurrent.ExecutionException;
 import lombok.Getter;
 import lombok.ToString;
-import net.elytrium.elytraproxy.botfilter.protocol.cache.netty.MultiplePreparedPacketsEncoder;
-import net.elytrium.elytraproxy.botfilter.protocol.cache.netty.PreparedPacketEncoder;
-import net.elytrium.elytraproxy.botfilter.server.BotFilterSessionHandler;
-import net.elytrium.elytraproxy.botfilter.server.VirtualServer;
+import net.elytrium.elytraproxy.auth.handler.AuthSessionHandler;
+import net.elytrium.elytraproxy.auth.model.RegisteredPlayer;
+import net.elytrium.elytraproxy.botfilter.CaptchaGeneration;
+import net.elytrium.elytraproxy.botfilter.handler.BotFilterSessionHandler;
 import net.elytrium.elytraproxy.commands.AlertCommand;
+import net.elytrium.elytraproxy.commands.ChangePasswordCommand;
 import net.elytrium.elytraproxy.commands.ElytraProxyCommand;
 import net.elytrium.elytraproxy.commands.FindCommand;
 import net.elytrium.elytraproxy.commands.SendCommand;
+import net.elytrium.elytraproxy.commands.UnregisterCommand;
 import net.elytrium.elytraproxy.config.Settings;
 import net.elytrium.elytraproxy.database.Database;
+import net.elytrium.elytraproxy.database.MySqlDatabase;
 import net.elytrium.elytraproxy.stats.Statistics;
+import net.elytrium.elytraproxy.virtual.protocol.VirtualProtocol;
+import net.elytrium.elytraproxy.virtual.server.VirtualServer;
 import net.kyori.adventure.identity.Identity;
 import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.asynchttpclient.BoundRequestBuilder;
+import org.asynchttpclient.ListenableFuture;
+import org.asynchttpclient.Response;
 
 @Getter
 @ToString
 @SuppressFBWarnings({"RV_RETURN_VALUE_IGNORED",
     "OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE"})
 public class ElytraProxy {
+
   private final Logger logger = LogManager.getLogger("ElytraProxy");
   private Database database;
 
-  // BotFilter start
-  private final Logger bfLogger = LogManager.getLogger("BotFilter");
-
   private final VelocityServer velocityServer;
   private final VirtualServer virtualServer;
   private final Statistics statistics;
-  // BotFilter end
+
+  private final HashMap<String, InetAddress> cachedBotChecks = new HashMap<>();
+  private final HashMap<String, InetAddress> cachedAuthChecks = new HashMap<>();
+  private final HttpClient httpClient = HttpClient.newBuilder()
+      .version(HttpClient.Version.HTTP_2)
+      .build();
+
+  static {
+    VirtualProtocol.init();
+  }
 
   public ElytraProxy(VelocityServer velocityServer) {
+    Settings.IMP.reload(new File("ElytraProxy", "config.yml"));
+    initDatabase(velocityServer);
+    statistics = new Statistics();
+    statistics.startUpdating();
     // BotFilter start
+    CaptchaGeneration.init();
     this.velocityServer = velocityServer;
     this.virtualServer = new VirtualServer(this);
     this.virtualServer.reload();
     // BotFilter end
-    Settings.IMP.reload(new File("ElytraProxy", "config.yml"));
     registerCommand(velocityServer);
-    //initDatabase(velocityServer);
-    statistics = new Statistics();
-    statistics.startUpdating();
     checkForUpdates();
     logger.info("ElytraProxy was loaded.");
   }
 
-  ///**
-  // * Initializes database, creates missing tables.
-  // * Инициализирует базу данных, создает отсутствующие таблицы.
-  // */
-  /*
-  public void initDatabase(VelocityServer server) {
-    try {
-      MysqlConfig config = getConfig().getMySql();
-      database = new MySqlDatabase(config.hostname, config.database, config.user, config.password);
+  /**
+   * Initializes database, creates missing tables.
+   * Инициализирует базу данных, создает отсутствующие таблицы.
+   */
 
-      database.makeTable("skins", ImmutableMap.of(
-              "uuid", "VARCHAR(36)",
-              "texture", "VARCHAR(256)",
-              "signature", "VARCHAR(256)"
-      ));
-    } catch (SQLException e) {
-      logger.error(e);
-      logger.error("больно" getConfig().getMessages().error.mysqlLoadFailed );
-      server.shutdown();
+  public void initDatabase(VelocityServer server) {
+    Settings.DATABASE config = Settings.IMP.DATABASE;
+    if (config.ENABLED) {
+      try {
+        database = new MySqlDatabase(config.HOSTNAME, config.DATABASE, config.USER, config.PASSWORD);
+        database.makeTable(Settings.IMP.AUTH.TABLE, RegisteredPlayer.getDatabaseItem());
+      } catch (SQLException e) {
+        logger.error(e);
+        logger.error(Settings.IMP.MESSAGES.ELYTRAPROXY.DB_FAILURE);
+        server.shutdown();
+      }
     }
   }
-  */
+
   /**
    * Initializes ElytraProxy commands.
    * Инициализирует команды ElytraProxy.
@@ -115,42 +134,189 @@ public class ElytraProxy {
     manager.unregister("alert");
     manager.unregister("find");
     manager.unregister("send");
+    manager.unregister("unregister");
+    manager.unregister("changepass");
 
     manager.register("elytraproxy", new ElytraProxyCommand(server, this));
     manager.register("alert", new AlertCommand(server));
     manager.register("find", new FindCommand(server));
     manager.register("send", new SendCommand(server));
+
+    if (Settings.IMP.AUTH.ENABLE) {
+      manager.register("unregister", new UnregisterCommand(database));
+      manager.register("changepass", new ChangePasswordCommand(database));
+    }
   }
 
   public boolean shouldCheck(ConnectedPlayer player) {
-    return true;
+    InetSocketAddress adr = (InetSocketAddress) player.getConnection().getRemoteAddress();
+    return shouldCheck(player.getUsername(), adr.getAddress());
+  }
+
+  public boolean shouldCheck(String nickname, InetAddress ip) {
+    if (!Settings.IMP.ANTIBOT.ENABLE) {
+      return false;
+    }
+    if (Settings.IMP.ANTIBOT.CACHE_SUCCEED_USERS) {
+      if (cachedBotChecks.containsKey(nickname)) {
+        return !ip.equals(cachedBotChecks.get(nickname));
+      } else {
+        return true;
+      }
+    } else {
+      return true;
+    }
+  }
+
+  public boolean shouldAuth(ConnectedPlayer player) {
+    if (Settings.IMP.AUTH.CACHE_AUTH_USERS) {
+      if (cachedAuthChecks.containsKey(player.getUsername())) {
+        InetSocketAddress adr = (InetSocketAddress) player.getConnection().getRemoteAddress();
+        return !adr.getAddress().equals(cachedAuthChecks.get(player.getUsername()));
+      } else {
+        return true;
+      }
+    } else {
+      return true;
+    }
+  }
+
+  public void cacheSucceedUser(ConnectedPlayer player) {
+    if (Settings.IMP.ANTIBOT.CACHE_SUCCEED_USERS) {
+      cachedBotChecks.remove(player.getUsername());
+      InetSocketAddress adr = (InetSocketAddress) player.getConnection().getRemoteAddress();
+      cachedBotChecks.put(player.getUsername(), adr.getAddress());
+    }
+  }
+
+  public void cacheAuthUser(ConnectedPlayer player) {
+    if (Settings.IMP.AUTH.CACHE_AUTH_USERS) {
+      cachedAuthChecks.remove(player.getUsername());
+      InetSocketAddress adr = (InetSocketAddress) player.getConnection().getRemoteAddress();
+      cachedAuthChecks.put(player.getUsername(), adr.getAddress());
+    }
   }
 
   public void setupPipelineAndStartCheck(ConnectedPlayer player, LoginSessionHandler handler) {
     try {
-      BotFilterSessionHandler sessionHandler = new BotFilterSessionHandler(player, handler,
-          virtualServer);
-      bfLogger.info(sessionHandler.getPlayer().getUsername());
-
-      MinecraftConnection connection = sessionHandler.getPlayer().getConnection();
-      connection.setSessionHandler(sessionHandler);
-
-      ChannelPipeline pipeline = connection.getChannel().pipeline();
-      System.out.println("pre changed");
-      if (sessionHandler.getPlayer().isOnlineMode()) {
-        pipeline.addAfter(Connections.CIPHER_ENCODER, "prepared-encoder",
-            PreparedPacketEncoder.getEncoder(connection.getProtocolVersion(), true));
-      } else {
-        pipeline.addFirst("prepared-encoder",
-            PreparedPacketEncoder.getEncoder(connection.getProtocolVersion(), false));
-        pipeline.addFirst("multipleprepared-encoder",
-            MultiplePreparedPacketsEncoder.getEncoder(connection.getProtocolVersion()));
+      BotFilterSessionHandler botFilterSessionHandler =
+          new BotFilterSessionHandler(player, handler, virtualServer);
+
+      virtualServer.spawnPlayer(botFilterSessionHandler);
+    } catch (Throwable t) {
+      logger.error("Error", t);
+    }
+  }
+
+  public void auth(ConnectedPlayer player, LoginSessionHandler handler) {
+    if (player.getConnection().getState() != StateRegistry.VIRTUAL) {
+      player.getConnection().setState(StateRegistry.PLAY);
+    }
+    String nickname = player.getUsername().toLowerCase(Locale.ROOT);
+    for (char character : nickname.toCharArray()) {
+      if (!Settings.IMP.AUTH.ALLOWED_NICKNAME_CHARS.contains(String.valueOf(character))) {
+        player.getConnection().closeWith(virtualServer.getPackets().getNicknameInvalid());
+        return;
       }
-      System.out.println("changed");
+    }
+
+    if (!Settings.IMP.AUTH.ONLINE_MODE_NEED_AUTH) {
+      ListenableFuture<Response> isPremiumResponse = isPremiumRequest(nickname).execute();
 
-      virtualServer.spawnPlayer(sessionHandler);
+      isPremiumResponse.addListener(() -> {
+        try {
+          if (isPremiumResponse.get().getStatusCode() == 200) {
+            player.getConnection().closeWith(virtualServer.getPackets().getNicknamePremium());
+          } else {
+            sendToAuthServer(player, handler, nickname);
+          }
+        } catch (InterruptedException | ExecutionException e) {
+          logger.error("Unable to authenticate with Mojang", e);
+          player.getConnection().close(true);
+        }
+      }, player.getConnection().eventLoop());
+    }
+  }
+
+  public BoundRequestBuilder isPremiumRequest(String nickname) {
+    return velocityServer.getAsyncHttpClient()
+        .prepareGet("https://api.mojang.com/users/profiles/minecraft/" + nickname);
+  }
+
+  private void sendToAuthServer(ConnectedPlayer player, LoginSessionHandler handler, String nickname) {
+    try {
+      AuthSessionHandler authSessionHandler =
+          new AuthSessionHandler(player, handler, virtualServer, nickname);
+
+      virtualServer.spawnPlayer(authSessionHandler);
     } catch (Throwable t) {
-      bfLogger.error("Error", t);
+      logger.error("Error", t);
+    }
+  }
+
+  public void checkHostname(ConnectedPlayer player, InboundConnection inbound, HostnameCheckType type) {
+    boolean isLogin = (type == HostnameCheckType.LOGIN);
+    if (isLogin) {
+      if (player.getVirtualHost().isEmpty()) {
+        return;
+      }
+      if (inbound.getVirtualHost().isEmpty()) {
+        return;
+      }
+    }
+
+    String playerHostname;
+    String playerAddress;
+    String playerIp;
+    String playerNick = null;
+    String notifymsg = "{} tried to connect using {}";
+    if (isLogin) {
+      playerHostname = (player.getVirtualHost().get()).getHostName();
+      playerAddress = (player.getVirtualHost().get()).getAddress().getHostAddress();
+      playerIp = player.getRemoteAddress().getAddress().getHostAddress();
+      playerNick = player.getUsername();
+    } else {
+      playerHostname = (inbound.getVirtualHost().get()).getHostName();
+      playerAddress = (inbound.getVirtualHost().get()).getAddress().getHostAddress();
+      playerIp = inbound.getRemoteAddress().getAddress().getHostAddress();
+    }
+
+    if (!Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.IGNORED_IPS.contains(playerIp)) {
+      if (Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.WHITELIST) {
+        if (Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.IPS_CHECK) {
+          if (!Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.HOSTNAMES.contains(playerAddress)) {
+            getLogger().info(notifymsg, isLogin ? playerNick : playerIp, playerAddress);
+            getStatistics().addBlockedConnection();
+            getStatistics().addBlockedBots();
+            return;
+          }
+        }
+        if (Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.DOMAINS_CHECK) {
+          if (!Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.HOSTNAMES.contains(playerHostname)) {
+            getLogger().info(notifymsg, isLogin ? playerNick : playerIp, playerHostname);
+            getStatistics().addBlockedConnection();
+            getStatistics().addBlockedBots();
+            return;
+          }
+        }
+      } else {
+        if (Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.IPS_CHECK) {
+          if (Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.HOSTNAMES.contains(playerAddress)) {
+            getLogger().info(notifymsg, isLogin ? playerNick : playerIp, playerAddress);
+            getStatistics().addBlockedConnection();
+            getStatistics().addBlockedBots();
+            return;
+          }
+        }
+        if (Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.DOMAINS_CHECK) {
+          if (Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.HOSTNAMES.contains(playerHostname)) {
+            getLogger().info(notifymsg, isLogin ? playerNick : playerIp, playerHostname);
+            getStatistics().addBlockedConnection();
+            getStatistics().addBlockedBots();
+            return;
+          }
+        }
+      }
     }
   }
 
@@ -160,19 +326,13 @@ public class ElytraProxy {
       source.sendMessage(Identity.nil(),
           LegacyComponentSerializer
               .legacyAmpersand()
-              .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.RELOAD_SUCCESS
-                  .replace("{NL}", "\n")
-                  .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-              ));
+              .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.RELOAD_SUCCESS));
     } catch (Exception e) {
       logger.error("Unable to reload configuration", e);
       source.sendMessage(Identity.nil(),
           LegacyComponentSerializer
               .legacyAmpersand()
-              .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.RELOAD_FAILURE
-                  .replace("{NL}", "\n")
-                  .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-              ));
+              .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.RELOAD_FAILURE));
     }
   }
 
@@ -197,4 +357,9 @@ public class ElytraProxy {
       logger.warn("Unable to check for updates.", ex);
     }
   }
+
+  public enum HostnameCheckType {
+    LOGIN,
+    PING
+  }
 }
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/auth/handler/AuthSessionHandler.java b/proxy/src/main/java/net/elytrium/elytraproxy/auth/handler/AuthSessionHandler.java
new file mode 100644
index 00000000..07febb2a
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/auth/handler/AuthSessionHandler.java
@@ -0,0 +1,190 @@
+/*
+ * Copyright (C) 2021 Elytrium
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.auth.handler;
+
+import at.favre.lib.crypto.bcrypt.BCrypt;
+import com.google.common.collect.ImmutableMap;
+import com.velocitypowered.proxy.connection.MinecraftConnection;
+import com.velocitypowered.proxy.connection.MinecraftSessionHandler;
+import com.velocitypowered.proxy.connection.client.ConnectedPlayer;
+import com.velocitypowered.proxy.protocol.packet.Chat;
+import java.net.InetSocketAddress;
+import java.nio.charset.StandardCharsets;
+import java.util.List;
+import java.util.Map;
+import java.util.concurrent.atomic.AtomicInteger;
+import net.elytrium.elytraproxy.auth.model.RegisteredPlayer;
+import net.elytrium.elytraproxy.config.Settings;
+import net.elytrium.elytraproxy.database.Database;
+import net.elytrium.elytraproxy.virtual.server.ServerPackets;
+import net.elytrium.elytraproxy.virtual.server.VirtualServer;
+import net.elytrium.elytraproxy.virtual.server.VirtualSessionHandler;
+
+public class AuthSessionHandler extends VirtualSessionHandler {
+  private final Database database;
+  private final RegisteredPlayer playerInfo;
+  private final ServerPackets packets;
+  private final MinecraftConnection connection;
+  private final String ip;
+
+  private int attempts = Settings.IMP.AUTH.LOGIN_ATTEMPTS;
+
+  public AuthSessionHandler(
+      ConnectedPlayer player, MinecraftSessionHandler originalHandler, VirtualServer virtualServer, String nickname) {
+    super(player, originalHandler, virtualServer);
+    this.database = virtualServer.getElytraProxy().getDatabase();
+    this.packets = virtualServer.getPackets();
+    this.connection = player.getConnection();
+    this.playerInfo = fetchInfo(nickname);
+    this.ip = ((InetSocketAddress) connection.getRemoteAddress()).getAddress().getHostAddress();
+  }
+
+
+  @Override
+  public boolean handle(Chat chat) {
+    String[] args = chat.getMessage().split(" ");
+    if (args.length != 0) {
+      switch (args[0]) {
+        case "/reg":
+        case "/register":
+        case "/r":
+          if (args.length >= 3 && args[1].equals(args[2])) {
+            register(args[1]);
+            finish();
+          } else {
+            sendMessage();
+          }
+          break;
+        case "/log":
+        case "/login":
+        case "/l":
+          if (args.length >= 2) {
+            if (checkPassword(args[1])) {
+              finish();
+            } else if (attempts-- != 0) {
+              connection.write(packets.getWrongPasswordChat());
+            } else {
+              connection.closeWith(packets.getWrongPassword());
+            }
+          }
+          break;
+        default:
+          sendMessage();
+          break;
+      }
+    }
+    return true;
+  }
+
+  @Override
+  public void onSpawn() {
+    virtualServer.loginComplete(this);
+    connection.write(packets.getAuthPosAndLook());
+    packets.getStaticWorldPacket().forEach(connection::write);
+    connection.write(packets.getNoAbilities());
+    if (playerInfo == null) {
+      checkIp();
+    }
+    sendMessage();
+    connection.flush();
+  }
+
+  private RegisteredPlayer fetchInfo(String nickname) {
+    return database.getItem(
+        Settings.IMP.AUTH.TABLE,
+        ImmutableMap.of("nickname", nickname),
+        RegisteredPlayer.class);
+  }
+
+  private boolean checkPassword(String password) {
+    return BCrypt.verifyer().verify(
+        password.getBytes(StandardCharsets.UTF_8),
+        playerInfo.getHash().getBytes(StandardCharsets.UTF_8)
+    ).verified;
+  }
+
+  private void checkIp() {
+    List<RegisteredPlayer> alreadyRegistered = database.getItems(
+        Settings.IMP.AUTH.TABLE,
+        ImmutableMap.of("ip", ip),
+        RegisteredPlayer.class
+    );
+
+    AtomicInteger sizeOfValid = new AtomicInteger(alreadyRegistered.size());
+    long checkDate = System.currentTimeMillis() - Settings.IMP.AUTH.IP_LIMIT_VALID_TIME;
+    Map<String, Object> clearIpMap = ImmutableMap.of("ip", "");
+
+    alreadyRegistered.stream()
+        .filter(e -> e.getRegdate() < checkDate)
+        .map(e -> ImmutableMap.of("nickname", (Object) e.getNickname()))
+        .forEach(e -> {
+          database.updateMap(
+              Settings.IMP.AUTH.TABLE, e, clearIpMap
+          );
+          sizeOfValid.decrementAndGet();
+        });
+
+    if (sizeOfValid.get() >= Settings.IMP.AUTH.IP_LIMIT_REGISTRATIONS) {
+      connection.closeWith(packets.getIpLimit());
+    }
+  }
+
+  private void register(String password) {
+    String hash = genHash(password);
+
+    RegisteredPlayer registeredPlayer = new RegisteredPlayer(
+        nickname,
+        hash,
+        ip,
+        System.currentTimeMillis()
+    );
+
+    database.insert(
+        Settings.IMP.AUTH.TABLE,
+        registeredPlayer,
+        RegisteredPlayer.class,
+        false
+    );
+  }
+
+  private void finish() {
+    disconnected();
+    connection.closeWith(packets.getSuccessfulAuth());
+    // TODO: Fix connection to real server
+    // VirtualServer -> Real Server causes infinite "Loading terrain"
+    // I think it's because Velocity doesn't send Respawn packet on "first" join
+    // connection.setSessionHandler(originalHandler);
+    // ((LoginSessionHandler) originalHandler).initialize(player);
+    virtualServer.getElytraProxy().cacheAuthUser(player);
+  }
+
+  private void sendMessage() {
+    if (playerInfo == null) {
+      connection.write(packets.getRegisterChat());
+    } else {
+      connection.write(packets.getLoginChat());
+    }
+  }
+
+  public static String genHash(String password) {
+    return BCrypt.withDefaults().hashToString(
+        Settings.IMP.AUTH.BCRYPT_COST,
+        password.toCharArray()
+    );
+  }
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/auth/model/RegisteredPlayer.java b/proxy/src/main/java/net/elytrium/elytraproxy/auth/model/RegisteredPlayer.java
new file mode 100644
index 00000000..3283c320
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/auth/model/RegisteredPlayer.java
@@ -0,0 +1,46 @@
+/*
+ * Copyright (C) 2021 Elytrium
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.auth.model;
+
+import com.google.common.collect.ImmutableMap;
+import java.util.Map;
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import net.elytrium.elytraproxy.database.DatabaseItem;
+
+@Getter
+@NoArgsConstructor
+@AllArgsConstructor
+public class RegisteredPlayer {
+  public String nickname;
+  public String hash;
+  public String ip;
+  public Long regdate;
+
+  private static final Map<String, String> tableInfo = ImmutableMap.of(
+      "nickname", "VARCHAR(16)",
+      "hash", "VARCHAR(128)",
+      "ip", "VARCHAR(15)",
+      "regdate", "BIGINT UNSIGNED"
+  );
+
+  private static final String primaryKey = "nickname";
+
+  @Getter private static final DatabaseItem databaseItem = new DatabaseItem(tableInfo, primaryKey);
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/CaptchaGeneration.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/CaptchaGeneration.java
new file mode 100644
index 00000000..f989c6fe
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/CaptchaGeneration.java
@@ -0,0 +1,157 @@
+/*
+ * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
+ *
+ * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.botfilter;
+
+import java.awt.Color;
+import java.awt.Font;
+import java.awt.FontFormatException;
+import java.awt.GraphicsEnvironment;
+import java.awt.image.BufferedImage;
+import java.io.File;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.concurrent.Executors;
+import java.util.concurrent.ThreadLocalRandom;
+import java.util.concurrent.ThreadPoolExecutor;
+import java.util.concurrent.atomic.AtomicInteger;
+import javax.imageio.ImageIO;
+import lombok.SneakyThrows;
+import lombok.experimental.UtilityClass;
+import net.elytrium.elytraproxy.botfilter.generator.CaptchaPainter;
+import net.elytrium.elytraproxy.botfilter.generator.map.CraftMapCanvas;
+import net.elytrium.elytraproxy.botfilter.generator.map.MapPalette;
+import net.elytrium.elytraproxy.botfilter.cache.CachedCaptcha;
+import net.elytrium.elytraproxy.virtual.protocol.packet.MapDataPacket;
+import net.elytrium.elytraproxy.config.Settings;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+/**
+ * @author Leymooo
+ * @author hevav
+ */
+@UtilityClass
+public class CaptchaGeneration {
+
+  private static final CraftMapCanvas cachedBackgroundMap = new CraftMapCanvas();
+  private final Logger logger = LogManager.getLogger("ElytraProxy");
+  private final CaptchaPainter painter = new CaptchaPainter();
+  private final List<Font> fonts = new ArrayList<>();
+  private final AtomicInteger fontCounter = new AtomicInteger(0);
+  private final AtomicInteger colorCounter = new AtomicInteger(0);
+
+  public void init() {
+    try {
+      if (!Settings.IMP.ANTIBOT.CAPTCHA_GENERATOR.BACKPLATE_PATH.equals("")) {
+        cachedBackgroundMap.drawImage(0, 0,
+            ImageIO.read(new File(Settings.IMP.ANTIBOT.CAPTCHA_GENERATOR.BACKPLATE_PATH)));
+      }
+    } catch (IOException e) {
+      e.printStackTrace();
+    }
+
+    int fontSize = Settings.IMP.ANTIBOT.CAPTCHA_GENERATOR.FONT_SIZE;
+
+    fonts.clear();
+    if (Settings.IMP.ANTIBOT.CAPTCHA_GENERATOR.USE_STANDARD_FONTS) {
+      fonts.add(new Font(Font.SANS_SERIF, Font.PLAIN, fontSize));
+      fonts.add(new Font(Font.SERIF, Font.PLAIN, fontSize));
+      fonts.add(new Font(Font.MONOSPACED, Font.BOLD, fontSize));
+    }
+
+    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
+
+    if (Settings.IMP.ANTIBOT.CAPTCHA_GENERATOR.FONTS_PATH != null) {
+      Settings.IMP.ANTIBOT.CAPTCHA_GENERATOR.FONTS_PATH.forEach(fontFile -> {
+        try {
+          if (!fontFile.equals("")) {
+            logger.info("Loading font " + fontFile);
+            Font font = Font.createFont(Font.TRUETYPE_FONT, new File(fontFile));
+            ge.registerFont(font);
+            fonts.add(font.deriveFont(Font.PLAIN).deriveFont((float) fontSize));
+          }
+        } catch (FontFormatException | IOException e) {
+          e.printStackTrace();
+        }
+      });
+    }
+
+    new Thread(CaptchaGeneration::generateImages).start();
+  }
+
+  @SneakyThrows
+  @SuppressWarnings("StatementWithEmptyBody")
+  public void generateImages() {
+    ThreadPoolExecutor ex =
+        (ThreadPoolExecutor) Executors.newFixedThreadPool(
+            Runtime.getRuntime().availableProcessors());
+    for (int i = 100; i <= 999; i++) {
+      ex.execute(CaptchaGeneration::genNewPacket);
+    }
+
+    long start = System.currentTimeMillis();
+    while (ex.getActiveCount() != 0) {
+      // Busy wait
+    }
+
+    logger.info("Captcha generated in " + (System.currentTimeMillis() - start) + " ms.");
+    ex.shutdownNow();
+    System.gc();
+  }
+
+  public void genNewPacket() {
+    String answer = randomAnswer();
+    final CraftMapCanvas map = new CraftMapCanvas(cachedBackgroundMap.getCanvas());
+    int fontNumber = fontCounter.getAndIncrement();
+    if (fontNumber >= fonts.size()) {
+      fontNumber = 0;
+      fontCounter.set(0);
+    }
+    BufferedImage image =
+        painter.draw(fonts.get(fontNumber), randomNotWhiteColor(), answer);
+    map.drawImage(0, 0, image);
+    MapDataPacket packet = new MapDataPacket(0, (byte) 0, map.getMapData());
+    CachedCaptcha.createCaptchaPacket(packet, answer);
+  }
+
+  private Color randomNotWhiteColor() {
+    MapPalette.Color[] colors = MapPalette.getColors();
+
+    int index = colorCounter.getAndIncrement();
+    if (index >= colors.length) {
+      index = 0;
+      colorCounter.set(0);
+    }
+
+    return colors[index].toJava();
+  }
+
+  private String randomAnswer() {
+    int length = Settings.IMP.ANTIBOT.CAPTCHA_GENERATOR.LENGTH;
+    String pattern = Settings.IMP.ANTIBOT.CAPTCHA_GENERATOR.PATTERN;
+
+    char[] text = new char[length];
+    for (int i = 0; i < length; i++) {
+      text[i] = pattern.charAt(ThreadLocalRandom.current().nextInt(pattern.length()));
+    }
+    return new String(text);
+  }
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/cache/CachedCaptcha.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/cache/CachedCaptcha.java
new file mode 100644
index 00000000..d6395cd0
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/cache/CachedCaptcha.java
@@ -0,0 +1,48 @@
+/*
+ * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
+ *
+ * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.botfilter.cache;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.concurrent.atomic.AtomicInteger;
+import net.elytrium.elytraproxy.virtual.protocol.packet.MapDataPacket;
+
+/**
+ * @author Leymooo
+ * @author hevav
+ */
+public class CachedCaptcha {
+
+  private static final List<CaptchaHandler> captchas = new ArrayList<>();
+  private static final AtomicInteger counterAtomic = new AtomicInteger(0);
+
+  public static void createCaptchaPacket(MapDataPacket map, String answer) {
+    captchas.add(new CaptchaHandler(map, answer));
+  }
+
+  public static CaptchaHandler randomCaptcha() {
+    int counter = counterAtomic.incrementAndGet();
+    if (counter >= captchas.size()) {
+      counter = 0;
+      counterAtomic.set(0);
+    }
+    return captchas.get(counter);
+  }
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/cache/CaptchaHandler.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/cache/CaptchaHandler.java
new file mode 100644
index 00000000..3fd7ee02
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/cache/CaptchaHandler.java
@@ -0,0 +1,33 @@
+/*
+ * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
+ *
+ * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.botfilter.cache;
+
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import net.elytrium.elytraproxy.virtual.protocol.packet.MapDataPacket;
+
+@NoArgsConstructor
+@AllArgsConstructor
+@Getter
+public class CaptchaHandler {
+  private MapDataPacket map;
+  private String answer;
+}
\ No newline at end of file
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/generator/CaptchaPainter.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/generator/CaptchaPainter.java
new file mode 100644
index 00000000..2af5c118
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/generator/CaptchaPainter.java
@@ -0,0 +1,220 @@
+/*
+ * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
+ *
+ * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.botfilter.generator;
+
+import java.awt.Color;
+import java.awt.Font;
+import java.awt.Graphics;
+import java.awt.Graphics2D;
+import java.awt.Rectangle;
+import java.awt.RenderingHints;
+import java.awt.font.GlyphVector;
+import java.awt.geom.AffineTransform;
+import java.awt.geom.Point2D;
+import java.awt.geom.Rectangle2D;
+import java.awt.image.BufferedImage;
+import java.awt.image.ConvolveOp;
+import java.awt.image.Kernel;
+import java.util.Random;
+import net.elytrium.elytraproxy.config.Settings;
+
+public class CaptchaPainter {
+
+  private static final int width = 128;
+  private static final int height = 128;
+  private final Color background = Color.WHITE;
+  private final Random rnd = new Random();
+
+  public BufferedImage draw(Font font, Color fGround, String text) {
+    if (font == null) {
+      throw new IllegalArgumentException("Font can not be null.");
+    }
+    if (fGround == null) {
+      throw new IllegalArgumentException("Foreground color can not be null.");
+    }
+    if (text == null || text.length() < 1) {
+      throw new IllegalArgumentException("No text given.");
+    }
+
+    BufferedImage img = createImage();
+
+    final Graphics g = img.getGraphics();
+    try {
+      final Graphics2D g2 = configureGraphics(g, font, fGround);
+      draw(g2, text);
+    } finally {
+      g.dispose();
+    }
+
+    img = postProcess(img);
+
+    return img;
+  }
+
+  protected void draw(Graphics2D g, String text) {
+    final GlyphVector vector = g.getFont().createGlyphVector(g.getFontRenderContext(), text);
+
+    transform(g, text, vector);
+
+    final Rectangle bounds = vector.getPixelBounds(null, 0, height);
+    final float bw = (float) bounds.getWidth();
+    final float bh = (float) bounds.getHeight();
+
+    final boolean outlineEnabled = Settings.IMP.ANTIBOT.CAPTCHA_GENERATOR.FONT_OUTLINE;
+
+    final float wr = width / bw
+        * (rnd.nextFloat() / 20 + (outlineEnabled ? 0.89f : 0.92f))
+        * 1;
+    final float hr = height / bh
+        * (rnd.nextFloat() / 20 + (outlineEnabled ? 0.68f : 0.75f))
+        * 1;
+    g.translate((width - bw * wr) / 2, (height - bh * hr) / 2);
+    g.scale(wr, hr);
+
+    final float bx = (float) bounds.getX();
+    final float by = (float) bounds.getY();
+    if (outlineEnabled) {
+      g.draw(vector.getOutline(Math.signum(rnd.nextFloat() - 0.5f) * 1
+          * width / 200 - bx, Math.signum(rnd.nextFloat() - 0.5f) * 1
+          * height / 70 + height - by));
+    }
+    g.drawGlyphVector(vector, -bx, height - by);
+  }
+
+  protected BufferedImage createImage() {
+    return new BufferedImage(width, height, BufferedImage.TYPE_3BYTE_BGR);
+  }
+
+  protected Graphics2D configureGraphics(Graphics g, Font font, Color fGround) {
+    if (!(g instanceof Graphics2D)) {
+      throw new IllegalStateException("Graphics (" + g
+          + ") that is not an instance of Graphics2D.");
+    }
+    final Graphics2D g2 = (Graphics2D) g;
+
+    configureGraphicsQuality(g2);
+
+    g2.setColor(fGround);
+    g2.setBackground(background);
+    g2.setFont(font);
+
+    g2.clearRect(0, 0, width, height);
+
+    return g2;
+  }
+
+  protected void configureGraphicsQuality(Graphics2D g2) {
+    g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,
+        RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
+    g2.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS,
+        RenderingHints.VALUE_FRACTIONALMETRICS_ON);
+    g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
+        RenderingHints.VALUE_ANTIALIAS_ON);
+    g2.setRenderingHint(RenderingHints.KEY_COLOR_RENDERING,
+        RenderingHints.VALUE_COLOR_RENDER_QUALITY);
+    g2.setRenderingHint(RenderingHints.KEY_DITHERING,
+        RenderingHints.VALUE_DITHER_ENABLE);
+    g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION,
+        RenderingHints.VALUE_INTERPOLATION_BICUBIC);
+    g2.setRenderingHint(RenderingHints.KEY_ALPHA_INTERPOLATION,
+        RenderingHints.VALUE_ALPHA_INTERPOLATION_QUALITY);
+    g2.setRenderingHint(RenderingHints.KEY_RENDERING,
+        RenderingHints.VALUE_RENDER_QUALITY);
+
+  }
+
+  protected void transform(Graphics2D g, String text, GlyphVector v) {
+    final int glyphNum = v.getNumGlyphs();
+
+    Point2D prePos = null;
+    Rectangle2D preBounds = null;
+
+    double rotateCur = (rnd.nextDouble() - 0.5) * Math.PI / 8;
+    double rotateStep = Math.signum(rotateCur)
+        * (rnd.nextDouble() * 3 * Math.PI / 8 / glyphNum);
+    final boolean rotateEnabled = Settings.IMP.ANTIBOT.CAPTCHA_GENERATOR.FONT_ROTATE;
+
+    for (int fi = 0; fi < glyphNum; fi++) {
+      if (rotateEnabled) {
+        final AffineTransform tr = AffineTransform
+            .getRotateInstance(rotateCur);
+        if (rnd.nextDouble() < 0.25) {
+          rotateStep *= -1;
+        }
+        rotateCur += rotateStep;
+        v.setGlyphTransform(fi, tr);
+      }
+      final Point2D pos = v.getGlyphPosition(fi);
+      final Rectangle2D bounds = v.getGlyphVisualBounds(fi).getBounds2D();
+      Point2D newPos;
+      if (prePos == null) {
+        newPos = new Point2D.Double(pos.getX() - bounds.getX(),
+            pos.getY());
+      } else {
+        newPos = new Point2D.Double(
+            preBounds.getMaxX()
+                + pos.getX()
+                - bounds.getX()
+                - Math.min(preBounds.getWidth(),
+                bounds.getWidth())
+                * (rnd.nextDouble() / 20 + (rotateEnabled ? 0.27
+                : 0.1)), pos.getY());
+      }
+      v.setGlyphPosition(fi, newPos);
+      prePos = newPos;
+      preBounds = v.getGlyphVisualBounds(fi).getBounds2D();
+    }
+  }
+
+  protected BufferedImage postProcess(BufferedImage img) {
+    if (Settings.IMP.ANTIBOT.CAPTCHA_GENERATOR.FONT_RIPPLE) {
+      final Rippler.AxisConfig vertical = new Rippler.AxisConfig(
+          rnd.nextDouble() * 2 * Math.PI, (1 + rnd.nextDouble() * 2)
+          * Math.PI, img.getHeight() / 10.0);
+      final Rippler.AxisConfig horizontal = new Rippler.AxisConfig(
+          rnd.nextDouble() * 2 * Math.PI, (2 + rnd.nextDouble() * 2)
+          * Math.PI, img.getWidth() / 100.0);
+      final Rippler op = new Rippler(vertical, horizontal);
+
+      img = op.filter(img, createImage());
+    }
+
+    if (Settings.IMP.ANTIBOT.CAPTCHA_GENERATOR.FONT_BLUR) {
+      final float[] blurArray = new float[9];
+      fillBlurArray(blurArray);
+      final ConvolveOp op = new ConvolveOp(new Kernel(3, 3, blurArray),
+          ConvolveOp.EDGE_NO_OP, null);
+
+      img = op.filter(img, createImage());
+    }
+    return img;
+  }
+
+  protected void fillBlurArray(float[] array) {
+    float sum = 0;
+    for (int fi = 0; fi < array.length; fi++) {
+      array[fi] = rnd.nextFloat();
+      sum += array[fi];
+    }
+    for (int fi = 0; fi < array.length; fi++) {
+      array[fi] /= sum;
+    }
+  }
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/generator/Rippler.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/generator/Rippler.java
new file mode 100644
index 00000000..39005a9d
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/generator/Rippler.java
@@ -0,0 +1,175 @@
+/*
+ * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
+ *
+ * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.botfilter.generator;
+
+import java.awt.image.BufferedImage;
+
+/**
+ * A filter to generate ripple (wave) effected images. Uses a transformed sinus
+ * wave for this. This class is thread safe.
+ *
+ * @author akiraly
+ */
+public class Rippler {
+
+  /**
+   * Class to respresent wave tranforming information for an axis.
+   */
+  public static class AxisConfig {
+
+    private final double start;
+
+    private final double length;
+
+    private final double amplitude;
+
+    /**
+     * Constructor.
+     *
+     * @param start     the starting x offset to generate wave values. Should be
+     *                  between 0 and 2 * {@link Math#PI}.
+     * @param length    the length of x to be used to generate wave values.
+     *                  Should be between 0 and 4 * {@link Math#PI}.
+     * @param amplitude the maximum y value, if it is too big, some
+     *                  important parts of the image (like the text) can "wave" out on the
+     *                  top or on the bottom of the image.
+     */
+    public AxisConfig(double start, double length, double amplitude) {
+      this.start = normalize(start, 2);
+      this.length = normalize(length, 4);
+      this.amplitude = amplitude;
+    }
+
+    /**
+     * Normalizes parameter to fall into [0, multi * {@link Math#PI}].
+     *
+     * @param a     to be normalized
+     * @param multi multiplicator used for end value
+     * @return normalized value
+     */
+    protected double normalize(double a, int multi) {
+      final double piMulti = multi * Math.PI;
+
+      a = Math.abs(a);
+      final double d = Math.floor(a / piMulti);
+
+      return a - d * piMulti;
+    }
+
+    /**
+     * @return wave part start value
+     */
+    public double getStart() {
+      return start;
+    }
+
+    /**
+     * @return wave part length
+     */
+    public double getLength() {
+      return length;
+    }
+
+    /**
+     * @return amplitude used to transform the wave part
+     */
+    public double getAmplitude() {
+      return amplitude;
+    }
+  }
+
+  private final AxisConfig vertical;
+
+  private final AxisConfig horizontal;
+
+  /**
+   * Constructor.
+   *
+   * @param vertical   config to calculate waving deltas from x axis (so to
+   *                   modify y values), not null
+   * @param horizontal config to calculate waving deltas from y axis (so to
+   *                   modify x values), not null
+   */
+  public Rippler(AxisConfig vertical, AxisConfig horizontal) {
+    this.vertical = vertical;
+    this.horizontal = horizontal;
+  }
+
+  /**
+   * Draws a rippled (waved) variant of source into destination.
+   *
+   * @param src  to be transformed, not null
+   * @param dest to hold the result, not null
+   * @return dest is returned
+   */
+  public BufferedImage filter(BufferedImage src, BufferedImage dest) {
+    final int width = src.getWidth();
+    final int height = src.getHeight();
+
+    final int[] verticalDelta = calcDeltaArray(vertical, width);
+
+    final int[] horizontalDelta = calcDeltaArray(horizontal, height);
+
+    for (int x = 0; x < width; x++) {
+      for (int y = 0; y < height; y++) {
+        final int ny = (y + verticalDelta[x] + height) % height;
+        final int nx = (x + horizontalDelta[ny] + width) % width;
+        dest.setRGB(nx, ny, src.getRGB(x, y));
+      }
+    }
+
+    return dest;
+  }
+
+  /**
+   * Calculates wave delta array.
+   *
+   * @param axisConfig config object to transform the wave, not null
+   * @param num        number of points needed, positive
+   * @return the calculated num length delta array
+   */
+  protected int[] calcDeltaArray(AxisConfig axisConfig, int num) {
+    final int[] delta = new int[num];
+
+    final double start = axisConfig.getStart();
+    final double period = axisConfig.getLength() / num;
+    final double amplitude = axisConfig.getAmplitude();
+
+    for (int fi = 0; fi < num; fi++) {
+      delta[fi] = (int) Math.round(amplitude * Math.sin(start + fi * period));
+    }
+
+    return delta;
+  }
+
+  /**
+   * @return vertical config, not null
+   */
+  public AxisConfig getVertical() {
+    return vertical;
+  }
+
+  /**
+   * @return horizontal config, not null
+   */
+  public AxisConfig getHorizontal() {
+    return horizontal;
+  }
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/generator/map/CraftMapCanvas.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/generator/map/CraftMapCanvas.java
new file mode 100644
index 00000000..65cc30c6
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/generator/map/CraftMapCanvas.java
@@ -0,0 +1,68 @@
+/*
+ * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
+ *
+ * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.botfilter.generator.map;
+
+import java.awt.image.BufferedImage;
+import java.util.Arrays;
+import lombok.Getter;
+import net.elytrium.elytraproxy.virtual.protocol.packet.MapDataPacket;
+
+@Getter
+public class CraftMapCanvas {
+
+  private final byte[] canvas;
+  private static final int MAP_SIZE = 16384; //128x128
+
+  public CraftMapCanvas() {
+    this.canvas = new byte[MAP_SIZE];
+    Arrays.fill(this.canvas, MapPalette.WHITE);
+  }
+
+  public CraftMapCanvas(byte[] canvas) {
+    final byte[] canvasBuf = new byte[MAP_SIZE];
+    System.arraycopy(canvas, 0, canvasBuf, 0, MAP_SIZE);
+    this.canvas = canvasBuf;
+  }
+
+  public void setPixel(int x, int y, byte color) {
+    if (x >= 0 && y >= 0 && x < 128 && y < 128) {
+      this.canvas[y * 128 + x] = color;
+    }
+  }
+
+  public void drawImage(int x, int y, BufferedImage image) {
+    int[] bytes = MapPalette.imageToBytes(image);
+    int width = image.getWidth(null);
+    int height = image.getHeight(null);
+
+    for (int x2 = 0; x2 < width; ++x2) {
+      for (int y2 = 0; y2 < height; ++y2) {
+        byte color = (byte) bytes[y2 * width + x2];
+        if (color != MapPalette.WHITE) {
+          this.setPixel(x + x2, y + y2, color);
+        }
+      }
+    }
+  }
+
+  public MapDataPacket.MapData getMapData() {
+    return new MapDataPacket.MapData(128, 128, 0, 0, this.canvas);
+  }
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/generator/map/MapPalette.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/generator/map/MapPalette.java
new file mode 100644
index 00000000..e1ca4215
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/generator/map/MapPalette.java
@@ -0,0 +1,183 @@
+/*
+ * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
+ *
+ * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.botfilter.generator.map;
+
+import java.awt.image.BufferedImage;
+import java.util.HashMap;
+import java.util.Map;
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+
+public final class MapPalette {
+
+  @Getter
+  private static final Color[] colors = new Color[] {
+      c(0, 0, 0), c(0, 0, 0), c(0, 0, 0), c(0, 0, 0),
+      c(89, 125, 39), c(109, 153, 48), c(127, 178, 56), c(67, 94, 29),
+      c(174, 164, 115), c(213, 201, 140), c(247, 233, 163), c(130, 123, 86),
+      c(140, 140, 140), c(171, 171, 171), c(199, 199, 199), c(105, 105, 105),
+      c(180, 0, 0), c(220, 0, 0), c(255, 0, 0), c(135, 0, 0),
+      c(112, 112, 180), c(138, 138, 220), c(160, 160, 255), c(84, 84, 135),
+      c(117, 117, 117), c(144, 144, 144), c(167, 167, 167), c(88, 88, 88),
+      c(0, 87, 0), c(0, 106, 0), c(0, 124, 0), c(0, 65, 0),
+      c(180, 180, 180), c(220, 220, 220), c(255, 255, 255), c(135, 135, 135),
+      c(115, 118, 129), c(141, 144, 158), c(164, 168, 184), c(86, 88, 97),
+      c(106, 76, 54), c(130, 94, 66), c(151, 109, 77), c(79, 57, 40),
+      c(79, 79, 79), c(96, 96, 96), c(112, 112, 112), c(59, 59, 59),
+      c(45, 45, 180), c(55, 55, 220), c(64, 64, 255), c(33, 33, 135),
+      c(100, 84, 50), c(123, 102, 62), c(143, 119, 72), c(75, 63, 38),
+      c(180, 177, 172), c(220, 217, 211), c(255, 252, 245), c(135, 133, 129),
+      c(152, 89, 36), c(186, 109, 44), c(216, 127, 51), c(114, 67, 27),
+      c(125, 53, 152), c(153, 65, 186), c(178, 76, 216), c(94, 40, 114),
+      c(72, 108, 152), c(88, 132, 186), c(102, 153, 216), c(54, 81, 114),
+      c(161, 161, 36), c(197, 197, 44), c(229, 229, 51), c(121, 121, 27),
+      c(89, 144, 17), c(109, 176, 21), c(127, 204, 25), c(67, 108, 13),
+      c(170, 89, 116), c(208, 109, 142), c(242, 127, 165), c(128, 67, 87),
+      c(53, 53, 53), c(65, 65, 65), c(76, 76, 76), c(40, 40, 40),
+      c(108, 108, 108), c(132, 132, 132), c(153, 153, 153), c(81, 81, 81),
+      c(53, 89, 108), c(65, 109, 132), c(76, 127, 153), c(40, 67, 81),
+      c(89, 44, 125), c(109, 54, 153), c(127, 63, 178), c(67, 33, 94),
+      c(36, 53, 125), c(44, 65, 153), c(51, 76, 178), c(27, 40, 94),
+      c(72, 53, 36), c(88, 65, 44), c(102, 76, 51), c(54, 40, 27),
+      c(72, 89, 36), c(88, 109, 44), c(102, 127, 51), c(54, 67, 27),
+      c(108, 36, 36), c(132, 44, 44), c(153, 51, 51), c(81, 27, 27),
+      c(17, 17, 17), c(21, 21, 21), c(25, 25, 25), c(13, 13, 13),
+      c(176, 168, 54), c(215, 205, 66), c(250, 238, 77), c(132, 126, 40),
+      c(64, 154, 150), c(79, 188, 183), c(92, 219, 213), c(48, 115, 112),
+      c(52, 90, 180), c(63, 110, 220), c(74, 128, 255), c(39, 67, 135),
+      c(0, 153, 40), c(0, 187, 50), c(0, 217, 58), c(0, 114, 30),
+      c(91, 60, 34), c(111, 74, 42), c(129, 86, 49), c(68, 45, 25),
+      c(79, 1, 0), c(96, 1, 0), c(112, 2, 0), c(59, 1, 0),
+  };
+
+  public static final byte WHITE = 34;
+
+  private static final Map<Color, Byte> colorToIndexMap = new HashMap<>();
+
+  private static Color c(int r, int g, int b) {
+    return new Color(r, g, b);
+  }
+
+  private static double getDistance(Color c1, Color c2) {
+    double rmean = (double) (c1.getRed() + c2.getRed()) / 2.0D;
+    double r = c1.getRed() - c2.getRed();
+    double g = c1.getGreen() - c2.getGreen();
+    int b = c1.getBlue() - c2.getBlue();
+    double weightR = 2.0D + rmean / 256.0D;
+    double weightG = 4.0D;
+    double weightB = 2.0D + (255.0D - rmean) / 256.0D;
+
+    return weightR * r * r + weightG * g * g + weightB * (double) b * (double) b;
+  }
+
+  /**
+   * Convert an Image to a byte[] using the palette.
+   *
+   * @param image The image to convert.
+   * @return A byte[] containing the pixels of the image.
+   */
+  public static int[] imageToBytes(final BufferedImage image) {
+    int[] result = image.getRGB(0, 0, image.getWidth(), image.getHeight(),
+        null, 0, image.getWidth());
+    for (int i = 0; i < result.length; ++i) {
+      result[i] = tryFastMatchColor(result[i]);
+    }
+    return result;
+  }
+
+  public static byte tryFastMatchColor(int rgb) {
+    if (getAlpha(rgb) < 128) {
+      return WHITE;
+    }
+
+    Color color = simplifyRGB(rgb);
+    Byte colorId = colorToIndexMap.get(color);
+    if (colorId != null) {
+      return colorId;
+    } else {
+      return matchColor(color);
+    }
+  }
+
+  /**
+   * Get the index of the closest matching color in the palette to the given
+   * color.
+   *
+   * @param color The Color to match.
+   * @return The index in the palette.
+   */
+  public static byte matchColor(Color color) {
+    int index = 0;
+    double best = -1.0D;
+
+    for (int i = 4; i < colors.length; ++i) {
+      double distance = getDistance(color, colors[i]);
+
+      if (distance < best || best == -1.0D) {
+        best = distance;
+        index = i;
+      }
+    }
+
+    byte matched = (byte) (index < 128 ? index : -129 + (index - 127));
+    colorToIndexMap.put(color, matched);
+
+    return matched;
+  }
+
+  private static Color simplifyRGB(int rgb) {
+    int r = ((rgb & 0xff0000) >>> 16);
+    int g = ((rgb & 0xff00) >>> 8);
+    int b = (rgb & 0xff);
+
+    return new Color(r, g, b);
+  }
+
+  private static int getAlpha(int rgb) {
+    return (rgb & 0xff000000) >>> 24;
+  }
+
+  @AllArgsConstructor
+  @Getter
+  public static class Color {
+    private final int red;
+    private final int green;
+    private final int blue;
+
+    @Override
+    public int hashCode() {
+      return (red << 16) | (green << 8) | (blue);
+    }
+
+    @Override
+    public boolean equals(Object otherColor) {
+      if (otherColor instanceof Color) {
+        Color checkColor = (Color) otherColor;
+        return checkColor.red == red && checkColor.blue == blue && checkColor.green == green;
+      } else {
+        return false;
+      }
+    }
+
+    public java.awt.Color toJava() {
+      return new java.awt.Color(red, green, blue);
+    }
+  }
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/handler/BotFilterSessionHandler.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/handler/BotFilterSessionHandler.java
new file mode 100644
index 00000000..3a4cdf09
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/handler/BotFilterSessionHandler.java
@@ -0,0 +1,345 @@
+/*
+ * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
+ *
+ * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.botfilter.handler;
+
+import com.velocitypowered.proxy.connection.MinecraftConnection;
+import com.velocitypowered.proxy.connection.client.ConnectedPlayer;
+import com.velocitypowered.proxy.connection.client.LoginSessionHandler;
+import com.velocitypowered.proxy.protocol.MinecraftPacket;
+import com.velocitypowered.proxy.protocol.packet.Chat;
+import com.velocitypowered.proxy.protocol.packet.ClientSettings;
+import com.velocitypowered.proxy.protocol.packet.PluginMessage;
+import com.velocitypowered.proxy.protocol.util.PluginMessageUtil;
+import io.netty.buffer.ByteBuf;
+import java.util.Objects;
+import lombok.Getter;
+import lombok.Setter;
+import net.elytrium.elytraproxy.botfilter.cache.CachedCaptcha;
+import net.elytrium.elytraproxy.botfilter.cache.CaptchaHandler;
+import net.elytrium.elytraproxy.config.Settings;
+import net.elytrium.elytraproxy.stats.Statistics;
+import net.elytrium.elytraproxy.virtual.protocol.packet.SetExp;
+import net.elytrium.elytraproxy.virtual.server.ServerPackets;
+import net.elytrium.elytraproxy.virtual.server.VirtualServer;
+import net.elytrium.elytraproxy.virtual.server.world.chunk.SimpleChunk;
+import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
+import org.apache.logging.log4j.Logger;
+
+@Getter
+public class BotFilterSessionHandler extends FallingCheckHandler {
+
+  public static final long TOTAL_TICKS = Settings.IMP.ANTIBOT.FALLING_CHECK_TICKS;
+  private static final long TOTAL_TIME = (TOTAL_TICKS * 50) - 100;
+
+  private final Statistics statistics;
+  private final Logger logger;
+  private final ServerPackets packets;
+  private final MinecraftConnection connection;
+  private final MinecraftPacket fallingCheckPos;
+  private final MinecraftPacket fallingCheckChunk;
+  private final double captchaY = Settings.IMP.ANTIBOT.CAPTCHA_COORDS.Y;
+  @Setter
+  private String captchaAnswer;
+  private int ignoredTicks = 0;
+  private long joinTime = System.currentTimeMillis();
+  private int attempts = Settings.IMP.ANTIBOT.CAPTCHA_ATTEMPTS;
+  private boolean startedListening = false;
+  private int nonValidPacketsSize = 0;
+  @Getter
+  private CheckState state = CheckState.valueOf(Settings.IMP.ANTIBOT.CHECK_STATE);
+  private boolean checkedBySettings = false;
+  private boolean checkedByBrand = false;
+
+  public BotFilterSessionHandler(ConnectedPlayer player, LoginSessionHandler originalHandler, VirtualServer virtualServer) {
+    super(player.getProtocolVersion(), player, originalHandler, virtualServer);
+    this.statistics = virtualServer.getElytraProxy().getStatistics();
+    this.logger = virtualServer.getElytraProxy().getLogger();
+    this.packets = virtualServer.getPackets();
+    this.connection = player.getConnection();
+    this.fallingCheckPos = packets.createPlayerPosAndLookPacket(validX, validY, validZ);
+    this.fallingCheckChunk = packets.createChunkDataPacket(
+        new SimpleChunk(Math.floorDiv(validX, 16), Math.floorDiv(validZ, 16)), validY);
+  }
+
+  @Override
+  public boolean handle(Chat chat) {
+    if (state == CheckState.CAPTCHA_POSITION || state == CheckState.ONLY_CAPTCHA) {
+      String message = chat.getMessage();
+      if (message.length() > 256) {
+        return false;
+      } else if (message.equals(captchaAnswer)) {
+        finishCheck();
+      } else if (--attempts != 0) {
+        sendCaptcha();
+      } else {
+        statistics.addBlockedBots();
+        connection.closeWith(packets.getCaptchaFailed());
+      }
+    }
+    return true;
+  }
+
+  @Override
+  public boolean handle(PluginMessage packet) {
+    if (PluginMessageUtil.isMcBrand(packet) && !checkedByBrand) {
+      logger.info("{} has client brand {}", player,
+          PluginMessageUtil.readBrandMessage(packet.content()));
+      checkedByBrand = true;
+    }
+    return true;
+  }
+
+  @Override
+  public boolean handle(ClientSettings packet) {
+    if ((!checkedBySettings) && Settings.IMP.ANTIBOT.CHECK_CLIENT_SETTINGS) {
+      if (packet.toString().contains("null")) {
+        logger.error("{} -> " + packet, player);
+        player.disconnect(
+            LegacyComponentSerializer
+                .legacyAmpersand()
+                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK.CLIENT_CHECK_SETTINGS));
+        logger.error("{} has null in settings packet", player);
+        statistics.addBlockedConnection();
+        statistics.addBlockedBots();
+      } else if (!packet.isChatColors()) {
+        logger.error("{} -> " + packet, player);
+        player.disconnect(
+            LegacyComponentSerializer
+                .legacyAmpersand()
+                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK.CLIENT_CHECK_SETTINGS_CHAT_COLOR));
+        logger.error("{} doesn't send isChatColors packet",
+            player);
+        statistics.addBlockedConnection();
+        statistics.addBlockedBots();
+      } else if (packet.getSkinParts() == 0) {
+        logger.error("{} -> " + packet, player);
+        player.disconnect(
+            LegacyComponentSerializer
+                .legacyAmpersand()
+                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK.CLIENT_CHECK_SETTINGS_SKIN_PARTS));
+        logger.error("{} doesn't send skin parts packet",
+            player);
+        statistics.addBlockedConnection();
+        statistics.addBlockedBots();
+      }
+    }
+    checkedBySettings = true;
+    return true;
+  }
+
+  @Override
+  public void handleUnknown(ByteBuf packet) {
+    if (packet.readableBytes() > 2048) {
+      statistics.addBlockedBots();
+      connection.closeWith(packets.getTooBigPacket());
+    }
+  }
+
+  private void finishCheck() {
+    if (System.currentTimeMillis() - joinTime < TOTAL_TIME && state != CheckState.ONLY_CAPTCHA) {
+      if (state == CheckState.CAPTCHA_POSITION && ticks < TOTAL_TICKS) {
+        connection.write(packets.getResetSlot());
+        state = CheckState.ONLY_POSITION;
+      } else {
+        if (state == CheckState.CAPTCHA_ON_POSITION_FAILED) {
+          changeStateToCaptcha();
+        } else {
+          statistics.addBlockedBots();
+          connection.closeWith(packets.getFallingCheckFailed());
+        }
+      }
+      return;
+    }
+    kickIfCheckNotPassed();
+    state = CheckState.SUCCESSFULLY;
+    disconnected();
+    // connection.write(packets.getSuccessfulChat());
+    // ((LoginSessionHandler) originalHandler).authOrInitialize(player);
+    connection.closeWith(packets.getSuccessfulBotFilter());
+    virtualServer.getElytraProxy().cacheSucceedUser(player);
+  }
+
+  @Override
+  public void onMove() {
+    if (!startedListening && state != CheckState.ONLY_CAPTCHA) {
+      if (x == validX && z == validZ) {
+        startedListening = true;
+        connection.write(packets.getBotFilterBrand());
+      }
+      if (nonValidPacketsSize > Settings.IMP.ANTIBOT.NON_VALID_POSITION_XZ_ATTEMPTS) {
+        fallingCheckFailed();
+        return;
+      }
+      lastY = validY;
+      nonValidPacketsSize++;
+    }
+    if (startedListening) {
+      if (lastY == captchaY || onGround) {
+        return;
+      }
+      if (state == CheckState.ONLY_CAPTCHA) {
+        if (lastY != y && waitingTeleportId == -1) {
+          setCaptchaPosition(true);
+        }
+        return;
+      }
+      if (lastY - y == 0) {
+        ignoredTicks++;
+        return;
+      }
+      if (ticks >= TOTAL_TICKS) {
+        if (state == CheckState.CAPTCHA_POSITION) {
+          changeStateToCaptcha();
+        } else {
+          finishCheck();
+        }
+        return;
+      }
+      // System.out.println("lastY=" + lastY + "; y=" + y + "; diff=" + (lastY - y) + ";" +
+      //     " need=" + getLoadedChunkSpeed(ticks) + "; ticks=" + ticks +
+      //     "; x=" + x + "; z=" + z + "; vx=" + validX + "; vz=" + validZ);
+      if (ignoredTicks > Settings.IMP.ANTIBOT.NON_VALID_POSITION_Y_ATTEMPTS) {
+        fallingCheckFailed();
+        return;
+      }
+      if ((x != validX && z != validZ) || checkY()) {
+        fallingCheckFailed();
+        return;
+      }
+      if (state == CheckState.CAPTCHA_POSITION && waitingTeleportId == -1) {
+        setCaptchaPosition(false);
+      }
+      if ((state == CheckState.CAPTCHA_ON_POSITION_FAILED || state == CheckState.ONLY_POSITION)) {
+        SetExp expBuf = packets.getExperience().get(ticks);
+        if (expBuf != null) {
+          connection.write(expBuf);
+        }
+      }
+      ticks++;
+    }
+  }
+
+  @Override
+  public void onSpawn() {
+    ((LoginSessionHandler) originalHandler).completeLoginProtocol(player, false);
+    virtualServer.loginComplete(this);
+    if (state == BotFilterSessionHandler.CheckState.ONLY_CAPTCHA) {
+      sendCaptcha();
+      connection.write(packets.getCaptchaPosAndLook());
+      packets.getStaticWorldPacket().forEach(connection::write);
+    } else if (state == BotFilterSessionHandler.CheckState.CAPTCHA_POSITION) {
+      sendCaptcha();
+      connection.write(fallingCheckPos);
+      connection.write(fallingCheckChunk);
+    } else if (state == BotFilterSessionHandler.CheckState.ONLY_POSITION
+        || state == BotFilterSessionHandler.CheckState.CAPTCHA_ON_POSITION_FAILED) {
+      connection.write(fallingCheckPos);
+      connection.write(fallingCheckChunk);
+    }
+    connection.flush();
+  }
+
+  private void sendCaptcha() {
+    CaptchaHandler captchaHandler = CachedCaptcha.randomCaptcha();
+    String captchaAnswer = captchaHandler.getAnswer();
+    setCaptchaAnswer(captchaAnswer);
+    connection.write(packets.getSetSlot());
+    connection.write(captchaHandler.getMap());
+    connection.write(packets.getCheckingCaptchaChat());
+  }
+
+  private boolean checkY() {
+    double speed = getLoadedChunkSpeed(ticks);
+    return (Math.abs(lastY - y - speed) > Settings.IMP.ANTIBOT.MAX_VALID_POSITION_DIFFERENCE);
+  }
+
+  private void fallingCheckFailed() {
+    if (state == CheckState.CAPTCHA_ON_POSITION_FAILED) {
+      changeStateToCaptcha();
+      return;
+    }
+    statistics.addBlockedBots();
+    connection.closeWith(packets.getFallingCheckFailed());
+  }
+
+  private void setCaptchaPosition(boolean disableFall) {
+    packets.getStaticWorldPacket().forEach(connection::write);
+    if (disableFall) {
+      connection.write(packets.getNoAbilities());
+    }
+    connection.write(packets.getCaptchaPosAndLook());
+    connection.flush();
+    waitingTeleportId = 9876;
+  }
+
+  private void changeStateToCaptcha() {
+    state = CheckState.ONLY_CAPTCHA;
+    joinTime = System.currentTimeMillis() + 3500;
+    setCaptchaPosition(true);
+    if (captchaAnswer == null) {
+      sendCaptcha();
+    }
+  }
+
+  private void kickIfCheckNotPassed() {
+    if ((!checkedBySettings) && Settings.IMP.ANTIBOT.CHECK_CLIENT_SETTINGS) {
+      player.disconnect(
+          LegacyComponentSerializer
+              .legacyAmpersand()
+              .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK.CLIENT_CHECK_SETTINGS));
+      statistics.addBlockedConnection();
+      statistics.addBlockedBots();
+    }
+    if ((!checkedByBrand) && Settings.IMP.ANTIBOT.CHECK_CLIENT_BRAND) {
+      player.disconnect(
+          LegacyComponentSerializer
+              .legacyAmpersand()
+              .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK.CLIENT_CHECK_BRAND));
+      statistics.addBlockedConnection();
+      statistics.addBlockedBots();
+    }
+  }
+
+  @Override
+  public boolean equals(Object o) {
+    if (this == o) {
+      return true;
+    }
+    if (o == null || getClass() != o.getClass()) {
+      return false;
+    }
+    BotFilterSessionHandler that = (BotFilterSessionHandler) o;
+    return player.getUsername().equals(that.player.getUsername());
+  }
+
+  @Override
+  public int hashCode() {
+    return Objects.hash(player.getUsername());
+  }
+
+  public enum CheckState {
+    ONLY_POSITION,
+    ONLY_CAPTCHA,
+    CAPTCHA_POSITION,
+    CAPTCHA_ON_POSITION_FAILED,
+    SUCCESSFULLY,
+    FAILED
+  }
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/handler/FallingCheckHandler.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/handler/FallingCheckHandler.java
new file mode 100644
index 00000000..5de8e7b5
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/handler/FallingCheckHandler.java
@@ -0,0 +1,139 @@
+/*
+ * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
+ *
+ * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.botfilter.handler;
+
+import com.velocitypowered.api.network.ProtocolVersion;
+import com.velocitypowered.proxy.connection.MinecraftSessionHandler;
+import com.velocitypowered.proxy.connection.client.ConnectedPlayer;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
+import java.util.concurrent.ThreadLocalRandom;
+import net.elytrium.elytraproxy.config.Settings;
+import net.elytrium.elytraproxy.virtual.protocol.packet.Player;
+import net.elytrium.elytraproxy.virtual.protocol.packet.PlayerPosition;
+import net.elytrium.elytraproxy.virtual.protocol.packet.PlayerPositionAndLook;
+import net.elytrium.elytraproxy.virtual.protocol.packet.TeleportConfirm;
+import net.elytrium.elytraproxy.virtual.server.VirtualServer;
+import net.elytrium.elytraproxy.virtual.server.VirtualSessionHandler;
+
+@SuppressFBWarnings(value = "URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD",
+    justification = "ща пока teleportId не юзается но скорее всего потом заюзаем")
+public abstract class FallingCheckHandler extends VirtualSessionHandler {
+  private static final double[] loadedChunkSpeedCache = new double[Settings.IMP.ANTIBOT.FALLING_CHECK_TICKS];
+
+  static {
+    for (int i = 0; i < Settings.IMP.ANTIBOT.FALLING_CHECK_TICKS; ++i) {
+      loadedChunkSpeedCache[i] = -((Math.pow(0.98, i) - 1) * 3.92);
+    }
+  }
+
+  public double x;
+  public double y;
+  public double z;
+  public boolean onGround = false;
+
+  public int teleportId = -1;
+
+  public int waitingTeleportId = 9876;
+
+  public double lastY;
+  public int validX;
+  public int validY;
+  public int validZ;
+  public int ticks = 1;
+
+  public final ProtocolVersion version;
+
+  public FallingCheckHandler(
+      ProtocolVersion version, ConnectedPlayer player,
+      MinecraftSessionHandler sessionHandler, VirtualServer virtualServer) {
+    super(player, sessionHandler, virtualServer);
+    this.version = version;
+    validX = ThreadLocalRandom.current().nextInt(16384) + 256;
+    validY = ThreadLocalRandom.current().nextInt(256);
+    validZ = ThreadLocalRandom.current().nextInt(16384) + 256;
+
+    x = validX;
+    y = validY;
+    z = validZ;
+  }
+
+  @Override
+  public String toString() {
+    throw new UnsupportedOperationException("Not supported yet.");
+  }
+
+  @Override
+  public boolean handle(Player player) {
+    this.onGround = player.isOnGround();
+    return true;
+  }
+
+  @Override
+  public boolean handle(PlayerPosition pos) {
+    x = pos.getX();
+    lastY = y;
+    y = pos.getY();
+    z = pos.getZ();
+    onGround = pos.isOnGround();
+    onMove();
+    return true;
+  }
+
+
+  @Override
+  public boolean handle(PlayerPositionAndLook posRot) {
+    if (version.isBeforeOrEq(ProtocolVersion.MINECRAFT_1_8)
+        && posRot.getX() == validX && posRot.getY() == validY && posRot.getZ() == validZ
+        && waitingTeleportId == 9876) {
+      ticks = 0;
+      y = -1;
+      lastY = -1;
+      waitingTeleportId = -1;
+    }
+    x = posRot.getX();
+    lastY = y;
+    y = posRot.getY();
+    z = posRot.getZ();
+    onGround = posRot.isOnGround();
+    onMove();
+    return true;
+  }
+
+  @Override
+  public boolean handle(TeleportConfirm confirm) {
+    if (confirm.getTeleportId() == waitingTeleportId) {
+      ticks = 0;
+      y = -1;
+      lastY = -1;
+      waitingTeleportId = -1;
+    }
+    return true;
+  }
+
+  public abstract void onMove();
+
+  public static double getLoadedChunkSpeed(int ticks) {
+    if (ticks == -1) return 0;
+    return loadedChunkSpeedCache[ticks];
+  }
+
+  @Override
+  public abstract void onSpawn();
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/BotFilterProtocol.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/BotFilterProtocol.java
deleted file mode 100644
index 24d2a5ad..00000000
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/BotFilterProtocol.java
+++ /dev/null
@@ -1,91 +0,0 @@
-/*
- * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
- *
- * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package net.elytrium.elytraproxy.botfilter.protocol;
-
-import static com.velocitypowered.api.network.ProtocolVersion.MINECRAFT_1_13;
-import static com.velocitypowered.api.network.ProtocolVersion.MINECRAFT_1_14;
-import static com.velocitypowered.api.network.ProtocolVersion.MINECRAFT_1_15;
-import static com.velocitypowered.api.network.ProtocolVersion.MINECRAFT_1_16;
-import static com.velocitypowered.api.network.ProtocolVersion.MINECRAFT_1_16_2;
-import static com.velocitypowered.api.network.ProtocolVersion.MINECRAFT_1_17;
-import static com.velocitypowered.api.network.ProtocolVersion.MINECRAFT_1_7_2;
-import static com.velocitypowered.api.network.ProtocolVersion.MINECRAFT_1_9;
-import static com.velocitypowered.proxy.protocol.StateRegistry.map;
-
-import com.velocitypowered.api.network.ProtocolVersion;
-import com.velocitypowered.proxy.protocol.StateRegistry;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.JoinGame;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.PlayerPositionAndLook;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.world.ChunkData;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.world.UpdateLight;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.UpdateViewPosition;
-
-public class BotFilterProtocol {
-
-  public static void init() {
-    StateRegistry.BotFilter.clientbound.register(
-        JoinGame.class, JoinGame::new,
-        map(0x01, MINECRAFT_1_7_2, false),
-        map(0x23, MINECRAFT_1_9, false),
-        map(0x25, MINECRAFT_1_13, false),
-        map(0x25, MINECRAFT_1_14, false),
-        map(0x26, MINECRAFT_1_15, false),
-        map(0x25, MINECRAFT_1_16, false),
-        map(0x24, MINECRAFT_1_16_2, false),
-        map(0x26, MINECRAFT_1_17, false)
-    );
-    StateRegistry.BotFilter.clientbound.register(
-        PlayerPositionAndLook.class, PlayerPositionAndLook::new,
-        map(0x08, ProtocolVersion.MINECRAFT_1_7_2, true),
-        map(0x2E, ProtocolVersion.MINECRAFT_1_9, true),
-        map(0x2F, ProtocolVersion.MINECRAFT_1_12_1, true),
-        map(0x32, ProtocolVersion.MINECRAFT_1_13, true),
-        map(0x35, ProtocolVersion.MINECRAFT_1_14, true),
-        map(0x36, ProtocolVersion.MINECRAFT_1_15, true),
-        map(0x35, ProtocolVersion.MINECRAFT_1_16, true),
-        map(0x34, ProtocolVersion.MINECRAFT_1_16_2, true),
-        map(0x38, ProtocolVersion.MINECRAFT_1_17, true));
-
-    StateRegistry.BotFilter.clientbound.register(
-        ChunkData.class, ChunkData::new,
-        map(0x21, ProtocolVersion.MINECRAFT_1_7_2, true),
-        map(0x21, ProtocolVersion.MINECRAFT_1_8, true),
-        map(0x20, ProtocolVersion.MINECRAFT_1_9, true),
-        map(0x22, ProtocolVersion.MINECRAFT_1_13, true),
-        map(0x21, ProtocolVersion.MINECRAFT_1_14, true),
-        map(0x22, ProtocolVersion.MINECRAFT_1_15, true),
-        map(0x21, ProtocolVersion.MINECRAFT_1_16, true),
-        map(0x20, ProtocolVersion.MINECRAFT_1_16_2, true),
-        map(0x22, ProtocolVersion.MINECRAFT_1_17, true));
-
-    StateRegistry.BotFilter.clientbound.register(
-        UpdateLight.class, UpdateLight::new,
-        map(0x24, ProtocolVersion.MINECRAFT_1_14, true),
-        map(0x25, ProtocolVersion.MINECRAFT_1_15, true),
-        map(0x24, ProtocolVersion.MINECRAFT_1_16, true),
-        map(0x23, ProtocolVersion.MINECRAFT_1_16_2, true),
-        map(0x25, ProtocolVersion.MINECRAFT_1_17, true));
-
-    StateRegistry.BotFilter.clientbound.register(
-        UpdateViewPosition.class, UpdateViewPosition::new,
-        map(0x49, ProtocolVersion.MINECRAFT_1_17, true));
-
-  }
-}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/ByteBufCreator.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/ByteBufCreator.java
deleted file mode 100644
index eaddde7a..00000000
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/ByteBufCreator.java
+++ /dev/null
@@ -1,52 +0,0 @@
-/*
- * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
- *
- * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package net.elytrium.elytraproxy.botfilter.protocol.cache;
-
-import com.velocitypowered.natives.compression.VelocityCompressor;
-import com.velocitypowered.natives.util.BufferPreference;
-import com.velocitypowered.natives.util.Natives;
-import io.netty.buffer.ByteBuf;
-import io.netty.buffer.Unpooled;
-
-public class ByteBufCreator {
-
-  private static boolean directBuffers = false;
-
-  static {
-    VelocityCompressor compressor = Natives.compress.get().create(1);
-    if (compressor.preferredBufferType() == BufferPreference.DIRECT_PREFERRED
-        || compressor.preferredBufferType() == BufferPreference.DIRECT_REQUIRED) {
-      directBuffers = true;
-    }
-    compressor.close();
-  }
-
-  public static ByteBuf newBuffer() {
-    return directBuffers ? Unpooled.directBuffer() : Unpooled.buffer();
-  }
-
-  public static ByteBuf newBuffer(int length) {
-    return directBuffers ? Unpooled.directBuffer(length) : Unpooled.buffer(length);
-  }
-
-  public static boolean isDirectBufferPreferred() {
-    return directBuffers;
-  }
-}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/MultiplePreparedPackets.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/MultiplePreparedPackets.java
deleted file mode 100644
index 5c7a907c..00000000
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/MultiplePreparedPackets.java
+++ /dev/null
@@ -1,100 +0,0 @@
-/*
- * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
- *
- * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package net.elytrium.elytraproxy.botfilter.protocol.cache;
-
-import com.google.common.base.Preconditions;
-import com.velocitypowered.api.network.ProtocolVersion;
-import com.velocitypowered.proxy.connection.MinecraftConnection;
-import io.netty.buffer.ByteBuf;
-import java.util.EnumMap;
-import java.util.EnumSet;
-import java.util.HashSet;
-import java.util.Map;
-
-public class MultiplePreparedPackets {
-
-  private Map<ProtocolVersion, ByteBuf> multiplePayloadBuf = new EnumMap<ProtocolVersion, ByteBuf>(
-      ProtocolVersion.class);
-  private PreparedPacket[] onlineModePackets;
-
-  public MultiplePreparedPackets(PreparedPacket... preparedPackets) {
-    for (PreparedPacket packet : preparedPackets) {
-      Preconditions.checkState(packet.isFinished(), "PreparedPacket is not adapted");
-    }
-    onlineModePackets = preparedPackets;
-    createOfflineModePayload(preparedPackets);
-  }
-
-  private void createOfflineModePayload(PreparedPacket... preparedPackets) {
-    for (ProtocolVersion protocolVersion : EnumSet
-        .range(ProtocolVersion.MINIMUM_VERSION, ProtocolVersion.MAXIMUM_VERSION)) {
-      ByteBuf multiple = ByteBufCreator.newBuffer();
-      for (PreparedPacket preparedPacket : preparedPackets) {
-        ByteBuf buf = preparedPacket.getBuffer(protocolVersion);
-        if (buf == null) {
-          continue;
-        }
-        multiple.writeBytes(buf);
-        buf.release();
-      }
-
-      if (multiple.readableBytes() == 0) {
-        multiple.release();
-        continue;
-      }
-      //Deduplicate
-      for (ByteBuf byteBuf : multiplePayloadBuf.values()) {
-        if (byteBuf.equals(multiple)) {
-          multiple.release();
-          multiple = byteBuf;
-          break;
-        }
-      }
-      multiplePayloadBuf.put(protocolVersion, multiple);
-    }
-  }
-
-  public void write(MinecraftConnection connection, boolean onlineMode) {
-    if (onlineMode) {
-      for (PreparedPacket preparedPacket : onlineModePackets) {
-        preparedPacket.selfWrite(connection, false);
-      }
-    } else {
-      connection.delayedWrite(this);
-    }
-  }
-
-  public ByteBuf getBuffer(ProtocolVersion protocolVersion) {
-    return multiplePayloadBuf.get(protocolVersion).retainedSlice();
-  }
-
-  public int getBuffetLength(ProtocolVersion protocolVersion) {
-    return multiplePayloadBuf.get(protocolVersion).readableBytes();
-  }
-
-  public void release() {
-    for (PreparedPacket preparedPacket : onlineModePackets) {
-      preparedPacket.releaseBuffers();
-    }
-    for (ByteBuf byteBuf : new HashSet<>(multiplePayloadBuf.values())) {
-      byteBuf.release();
-    }
-  }
-}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/PacketCompressor.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/PacketCompressor.java
deleted file mode 100644
index 97590be3..00000000
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/PacketCompressor.java
+++ /dev/null
@@ -1,69 +0,0 @@
-/*
- * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
- *
- * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package net.elytrium.elytraproxy.botfilter.protocol.cache;
-
-import com.velocitypowered.natives.compression.VelocityCompressor;
-import com.velocitypowered.natives.util.Natives;
-import com.velocitypowered.proxy.config.VelocityConfiguration;
-import com.velocitypowered.proxy.protocol.ProtocolUtils;
-import io.netty.buffer.ByteBuf;
-import io.netty.buffer.Unpooled;
-import java.util.function.Supplier;
-
-public class PacketCompressor {
-
-  private final ThreadLocal<VelocityCompressor> compressors = ThreadLocal
-      .withInitial(() -> Natives.compress.get().create(12));
-  private final Supplier<VelocityConfiguration> velocityConfiguration;
-
-  /**
-   * Constructs VelocityPacketCompressor.
-   *
-   * @param velocityConfiguration configuration
-   */
-  public PacketCompressor(Supplier<VelocityConfiguration> velocityConfiguration) {
-    this.velocityConfiguration = velocityConfiguration;
-
-  }
-
-  public boolean isCompressionEnabled() {
-    return velocityConfiguration.get().getCompressionThreshold() >= 0;
-  }
-
-  public boolean shouldCompress(int i) {
-    return isCompressionEnabled() && i >= velocityConfiguration.get().getCompressionThreshold();
-  }
-
-  public ByteBuf compress(ByteBuf source) {
-    VelocityCompressor compressor = compressors.get();
-    ByteBuf destination =
-        ByteBufCreator.isDirectBufferPreferred() ? Unpooled.directBuffer() : Unpooled.buffer();
-    int uncompressed = source.readableBytes();
-    ProtocolUtils.writeVarInt(destination, uncompressed);
-    try {
-      compressor.deflate(source, destination);
-    } catch (Exception e) {
-      throw new RuntimeException(e);
-    } finally {
-      source.release();
-    }
-    return destination;
-  }
-}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/PreparedPacket.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/PreparedPacket.java
deleted file mode 100644
index 9d2e722d..00000000
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/PreparedPacket.java
+++ /dev/null
@@ -1,217 +0,0 @@
-/*
- * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
- *
- * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package net.elytrium.elytraproxy.botfilter.protocol.cache;
-
-import com.velocitypowered.api.network.ProtocolVersion;
-import com.velocitypowered.proxy.connection.MinecraftConnection;
-import com.velocitypowered.proxy.protocol.MinecraftPacket;
-import com.velocitypowered.proxy.protocol.ProtocolUtils;
-import com.velocitypowered.proxy.protocol.ProtocolUtils.Direction;
-import com.velocitypowered.proxy.protocol.StateRegistry;
-import io.netty.buffer.ByteBuf;
-import io.netty.util.ReferenceCountUtil;
-import java.util.EnumMap;
-import java.util.EnumSet;
-import java.util.HashSet;
-import java.util.Map;
-import java.util.Map.Entry;
-import net.elytrium.elytraproxy.botfilter.protocol.BotFilterProtocol;
-
-public class PreparedPacket<T extends MinecraftPacket> {
-
-  static {
-    BotFilterProtocol.init();
-  }
-
-  private final Map<ProtocolVersion, ByteBufHolder> packets =
-      new EnumMap<>(ProtocolVersion.class);
-  private boolean finished = false;
-
-  public PreparedPacket() {
-  }
-
-  public void prepareSinge(T packet, ProtocolVersion version) {
-    prepare(packet, version, version);
-  }
-
-  public void prepareSinge(T packet, ProtocolVersion version, StateRegistry protocol) {
-    prepare(packet, version, version, protocol);
-  }
-
-  public void prepare(T packet) {
-    prepare(packet, ProtocolVersion.MINIMUM_VERSION, ProtocolVersion.MAXIMUM_VERSION);
-  }
-
-  public void prepare(T packet, ProtocolVersion from) {
-    prepare(packet, from, ProtocolVersion.MAXIMUM_VERSION);
-  }
-
-  public void prepare(T packet, ProtocolVersion from, StateRegistry protocol) {
-    prepare(packet, from, ProtocolVersion.MAXIMUM_VERSION, protocol);
-  }
-
-  public void prepare(T packet, ProtocolVersion from, ProtocolVersion to) {
-    prepare(packet, from, to, StateRegistry.BotFilter);
-  }
-
-  public void prepare(T packet, ProtocolVersion from, ProtocolVersion to, StateRegistry protocol) {
-    for (ProtocolVersion protocolVersion : EnumSet.range(from, to)) {
-      ByteBuf buf = encodePacket(packet, protocolVersion, protocol);
-      ByteBufHolder holder = getHolder(buf, protocolVersion);
-      packets.put(protocolVersion, holder);
-    }
-  }
-
-  /*
-  public void preparePacketAndCopy(T packet, ProtocolVersion start, ProtocolVersion end,
-      StateRegistry protocol) {
-    ByteBuf buf = encodePacket(packet, start, protocol);
-    ByteBufHolder holder = new ByteBufHolder(start.isBefore(ProtocolVersion.MINECRAFT_1_8), buf);
-    for (ProtocolVersion protocolVersion : EnumSet.range(start, end)) {
-      prepared.put(protocolVersion, holder);
-    }
-  }
-  */
-
-  private ByteBuf encodePacket(T packet, ProtocolVersion version, StateRegistry protocol) {
-    int id = getPacketId(packet, version, protocol);
-    ByteBuf byteBuf = ByteBufCreator.newBuffer();
-    ProtocolUtils.writeVarInt(byteBuf, id);
-    packet.encode(byteBuf, Direction.CLIENTBOUND, version);
-    return byteBuf;
-  }
-
-  private int getPacketId(T packet, ProtocolVersion version, StateRegistry protocol) {
-    try {
-      return protocol.clientbound.getProtocolRegistry(version).getPacketId(packet.getClass());
-    } catch (Exception e) {
-      return protocol.clientbound.getProtocolRegistry(version).getPacketId(
-          (Class<? extends MinecraftPacket>) packet.getClass().getSuperclass());
-    }
-  }
-
-  public ByteBuf getBuffer(ProtocolVersion version) {
-    ByteBufHolder holder = packets.get(version);
-    return holder == null ? null : holder.byteBuf.retainedSlice();
-  }
-
-  public int getBufferLength(ProtocolVersion version) {
-    ByteBufHolder holder = packets.get(version);
-    return holder == null ? 0 : holder.byteBuf.readableBytes();
-  }
-
-  public void selfWrite(MinecraftConnection mc, boolean flush) {
-    if (packets.containsKey(mc.getProtocolVersion())) {
-      if (flush) {
-        mc.write(this);
-      } else {
-        mc.delayedWrite(this);
-      }
-    }
-  }
-
-  public boolean isFinished() {
-    return finished;
-  }
-
-  private ByteBufHolder getHolder(ByteBuf buf, ProtocolVersion version) {
-    if (version.isBefore(ProtocolVersion.MINECRAFT_1_8)) {
-      ByteBufHolder holder = packets.get(ProtocolVersion.MINECRAFT_1_7_2);
-      if (holder != null && holder.byteBuf.equals(buf)) {
-        buf.release();
-        return holder;
-      }
-      return new ByteBufHolder(true, buf);
-    }
-
-    for (ByteBufHolder holder : new HashSet<>(packets.values())) {
-      if (!holder.mc1_7 && holder.byteBuf.equals(buf)) {
-        buf.release();
-        return holder;
-      }
-    }
-    return new ByteBufHolder(false, buf);
-  }
-
-  public void processCompress(PacketCompressor packetCompressor) {
-    if (finished) {
-      throw new IllegalStateException("Packet compression does not allowed after adapt");
-    }
-    for (Entry<ProtocolVersion, ByteBufHolder> prepared : packets.entrySet()) {
-      ByteBufHolder holder = prepared.getValue();
-      if (holder.mc1_7 || holder.compressed) {
-        continue;
-      }
-      ByteBuf current = holder.byteBuf;
-      ByteBuf newBuf;
-      int bytes = current.readableBytes();
-      holder.compressed = true;
-      if (packetCompressor.shouldCompress(bytes)) {
-        newBuf = packetCompressor.compress(current);
-      } else {
-        newBuf = ByteBufCreator.newBuffer(2 + current.readableBytes());
-        ProtocolUtils.writeVarInt(newBuf, 0);
-        newBuf.writeBytes(current);
-      }
-      newBuf.capacity(newBuf.readableBytes());
-      holder.byteBuf = newBuf;
-    }
-  }
-
-  public void finish() {
-    for (Entry<ProtocolVersion, ByteBufHolder> prepared : packets.entrySet()) {
-      ByteBufHolder holder = prepared.getValue();
-      if (holder.varint) {
-        continue;
-      }
-      ByteBuf current = holder.byteBuf;
-      ByteBuf buf = ByteBufCreator.newBuffer(5 + current.readableBytes());
-      ProtocolUtils.writeVarInt(buf, current.readableBytes());
-      buf.writeBytes(current);
-      buf.capacity(buf.readableBytes());
-      ReferenceCountUtil.safeRelease(current);
-      holder.byteBuf = buf;
-      holder.varint = true;
-    }
-    finished = true;
-  }
-
-  public void releaseBuffers() {
-    for (ByteBufHolder holder : new HashSet<>(packets.values())) {
-      holder.byteBuf.release();
-    }
-  }
-
-  private static class ByteBufHolder {
-
-    private final boolean mc1_7;
-    private ByteBuf byteBuf;
-    private boolean compressed = false;
-    private boolean varint = false;
-
-    public ByteBufHolder(boolean mc1_7, ByteBuf byteBuf) {
-      this.mc1_7 = mc1_7;
-      this.byteBuf = byteBuf;
-      if (mc1_7) {
-        compressed = true;
-      }
-    }
-  }
-}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/netty/MultiplePreparedPacketsEncoder.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/netty/MultiplePreparedPacketsEncoder.java
deleted file mode 100644
index dfd775ca..00000000
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/netty/MultiplePreparedPacketsEncoder.java
+++ /dev/null
@@ -1,70 +0,0 @@
-/*
- * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
- *
- * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package net.elytrium.elytraproxy.botfilter.protocol.cache.netty;
-
-import com.velocitypowered.api.network.ProtocolVersion;
-import io.netty.buffer.ByteBuf;
-import io.netty.channel.ChannelHandler.Sharable;
-import io.netty.channel.ChannelHandlerContext;
-import io.netty.handler.codec.MessageToMessageEncoder;
-import java.util.EnumMap;
-import java.util.List;
-import java.util.Map;
-import lombok.RequiredArgsConstructor;
-import net.elytrium.elytraproxy.botfilter.protocol.cache.MultiplePreparedPackets;
-
-@Sharable
-@RequiredArgsConstructor
-public class MultiplePreparedPacketsEncoder extends
-    MessageToMessageEncoder<MultiplePreparedPackets> {
-
-  private static Map<ProtocolVersion, MultiplePreparedPacketsEncoder> encoders = new EnumMap<>(
-      ProtocolVersion.class);
-
-  static {
-    for (ProtocolVersion version : ProtocolVersion.SUPPORTED_VERSIONS) {
-      encoders.put(version, new MultiplePreparedPacketsEncoder(version));
-    }
-  }
-
-  private final ProtocolVersion protocolVersion;
-
-  @Override
-  protected void encode(ChannelHandlerContext ctx, MultiplePreparedPackets msg, List<Object> out)
-      throws Exception {
-    System.out.println("Processing multiple encoder");
-    ByteBuf buf = msg.getBuffer(protocolVersion);
-    out.add(buf);
-  }
-
-  /*
-  @Override
-  protected ByteBuf allocateBuffer(ChannelHandlerContext ctx, MultiplePreparedPackets msg,
-      boolean preferDirect) throws Exception {
-    int length = msg.getBuffetLength(protocolVersion);
-    return ByteBufCreator.isDirectBufferPreferred() ? ctx.alloc().directBuffer(length)
-        : ctx.alloc().heapBuffer(length);
-  }
-  */
-
-  public static MultiplePreparedPacketsEncoder getEncoder(ProtocolVersion version) {
-    return encoders.get(version);
-  }
-}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/netty/PreparedPacketEncoder.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/netty/PreparedPacketEncoder.java
deleted file mode 100644
index da613aa7..00000000
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/netty/PreparedPacketEncoder.java
+++ /dev/null
@@ -1,75 +0,0 @@
-/*
- * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
- *
- * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package net.elytrium.elytraproxy.botfilter.protocol.cache.netty;
-
-import com.google.common.collect.HashBasedTable;
-import com.google.common.collect.Table;
-import com.velocitypowered.api.network.ProtocolVersion;
-import com.velocitypowered.natives.encryption.JavaVelocityCipher;
-import com.velocitypowered.natives.util.Natives;
-import io.netty.buffer.ByteBuf;
-import io.netty.channel.ChannelHandler.Sharable;
-import io.netty.channel.ChannelHandlerContext;
-import io.netty.handler.codec.MessageToMessageEncoder;
-import java.util.List;
-import lombok.RequiredArgsConstructor;
-import net.elytrium.elytraproxy.botfilter.protocol.cache.PreparedPacket;
-
-@Sharable
-@RequiredArgsConstructor
-public class PreparedPacketEncoder extends MessageToMessageEncoder<PreparedPacket> {
-
-  private static final boolean IS_JAVA_CIPHER = Natives.cipher.get() == JavaVelocityCipher.FACTORY;
-  private static Table<ProtocolVersion, Boolean, PreparedPacketEncoder> encoders = HashBasedTable
-      .create(ProtocolVersion.SUPPORTED_VERSIONS.size(), 2);
-
-  static {
-    for (ProtocolVersion version : ProtocolVersion.SUPPORTED_VERSIONS) {
-      encoders.put(version, true, new PreparedPacketEncoder(version, true));
-      encoders.put(version, false, new PreparedPacketEncoder(version, false));
-    }
-  }
-
-  private final ProtocolVersion protocolVersion;
-  private final boolean onlineMode;
-
-
-  @Override
-  protected void encode(ChannelHandlerContext ctx, PreparedPacket msg, List<Object> out)
-      throws Exception {
-    System.out.println("Processing prepared");
-    ByteBuf buf = msg.getBuffer(protocolVersion);
-    out.add(buf);
-  }
-
-  /*
-  @Override
-  protected ByteBuf allocateBuffer(ChannelHandlerContext ctx, PreparedPacket msg,
-      boolean preferDirect) throws Exception {
-    int length = msg.getBufferLength(protocolVersion);
-    boolean direct = onlineMode ? IS_JAVA_CIPHER : ByteBufCreator.isDirectBufferPreferred();
-    return direct ? ctx.alloc().directBuffer(length) : ctx.alloc().heapBuffer(length);
-  }
-  */
-
-  public static PreparedPacketEncoder getEncoder(ProtocolVersion version, boolean onlineMode) {
-    return encoders.get(version, onlineMode);
-  }
-}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/data/registry/Dimension.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/data/registry/Dimension.java
deleted file mode 100644
index c661943c..00000000
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/data/registry/Dimension.java
+++ /dev/null
@@ -1,95 +0,0 @@
-/*
- * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
- *
- * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package net.elytrium.elytraproxy.botfilter.protocol.data.registry;
-
-import com.velocitypowered.api.network.ProtocolVersion;
-import lombok.AllArgsConstructor;
-import lombok.Data;
-import lombok.NonNull;
-import net.kyori.adventure.nbt.CompoundBinaryTag;
-import net.kyori.adventure.nbt.CompoundBinaryTag.Builder;
-
-@AllArgsConstructor
-@Data
-public class Dimension {
-
-  public static final Dimension OVERWORLD = new Dimension("minecraft:overworld", 0, false, true,
-      0.0f, null, false, "minecraft:infiniburn_overworld",
-      false, true, true, "minecraft:overworld", true, 0, 256, 256, 1.0f, false, false);
-
-  @NonNull
-  private final String key;
-  private final int id;
-
-  private final boolean piglinSafe;
-  private final boolean natural;
-  private final float ambientLight;
-  private final Long fixedTime;
-  private final boolean shrunk;
-  @NonNull
-  private final String infiniburn;
-  private final boolean respawnAnchorWorks;
-  private final boolean hasSkylight;
-  private final boolean bedWorks;
-  @NonNull
-  private final String effects;
-  private final boolean hasRaids;
-  private final int minY;
-  private final int height;
-  private final int logicalHeight;
-  private final float coordinateScale;
-  private final boolean ultrawarm;
-  private final boolean hasCeiling;
-
-
-  public CompoundBinaryTag encodeAttributes(ProtocolVersion protocolVersion) {
-    Builder tag = CompoundBinaryTag.builder()
-        .putString("name", key)
-        .putBoolean("natural", natural)
-        .putBoolean("has_skylight", hasSkylight)
-        .putBoolean("has_ceiling", hasCeiling);
-    if (fixedTime != null) {
-      tag.putLong("fixed_time", fixedTime);
-    }
-
-    tag.putBoolean("shrunk", shrunk)
-        .putFloat("ambient_light", ambientLight)
-        .putBoolean("ultrawarm", ultrawarm)
-        .putBoolean("has_raids", hasRaids)
-        .putBoolean("respawn_anchor_works", respawnAnchorWorks)
-        .putBoolean("bed_works", bedWorks)
-        .putBoolean("piglin_safe", piglinSafe)
-        .putString("infiniburn", infiniburn)
-        .putInt("logical_height", logicalHeight);
-
-    if (protocolVersion.isAfterOrEq(ProtocolVersion.MINECRAFT_1_16_2)) {
-      tag.remove("name")
-          .remove("shrunk")
-          .putString("effects", effects)
-          .putFloat("coordinate_scale", coordinateScale);
-    }
-    if (protocolVersion.isAfterOrEq(ProtocolVersion.MINECRAFT_1_17)) {
-      tag.putInt("min_y", minY);
-      tag.putInt("height", height);
-    }
-
-    return tag.build();
-  }
-}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/data/registry/DimensionRegistry.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/data/registry/DimensionRegistry.java
deleted file mode 100644
index 6fa56c9e..00000000
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/data/registry/DimensionRegistry.java
+++ /dev/null
@@ -1,134 +0,0 @@
-/*
- * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
- *
- * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package net.elytrium.elytraproxy.botfilter.protocol.data.registry;
-
-import com.google.common.base.Preconditions;
-import com.velocitypowered.api.network.ProtocolVersion;
-import com.velocitypowered.proxy.connection.registry.DimensionInfo;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Map.Entry;
-import java.util.Set;
-import java.util.stream.Collectors;
-import net.kyori.adventure.nbt.BinaryTagTypes;
-import net.kyori.adventure.nbt.CompoundBinaryTag;
-import net.kyori.adventure.nbt.ListBinaryTag;
-
-public class DimensionRegistry {
-
-  private final Map<Dimension, List<Biome>> dimensions = new HashMap<>();
-  private Dimension activeDimension;
-  private DimensionInfo activeDimensionInfo;
-
-  public void addDimension(Dimension dimension, List<Biome> biomes) {
-    Preconditions.checkNotNull(dimension);
-    Preconditions.checkNotNull(biomes);
-    Preconditions.checkState(!biomes.isEmpty());
-    dimensions.put(dimension, biomes);
-  }
-
-  public void removeDimension(Dimension dimension) {
-    dimensions.remove(dimension);
-  }
-
-  public Dimension getDimension(int id) {
-    return dimensions.keySet().stream().filter(dim -> dim.getId() == id).findAny().orElse(null);
-  }
-
-  public Dimension getDimension(String key) {
-    return dimensions.keySet().stream().filter(dim -> key.equals(dim.getKey())).findAny()
-        .orElse(null);
-  }
-
-  public List<Biome> getBiomes(Dimension dimension) {
-    return dimensions.get(dimension);
-  }
-
-  public List<String> getWorldNames() {
-    return dimensions.keySet().stream().map(dim -> dim.getKey()).collect(Collectors.toList());
-  }
-
-  public Dimension getActiveDimension() {
-    return activeDimension;
-  }
-
-  public void setActiveDimension(Dimension activeDimension) {
-    Preconditions
-        .checkState(dimensions.containsKey(activeDimension), "Dimension does not registered");
-    this.activeDimension = activeDimension;
-  }
-
-  public DimensionInfo getActiveDimensionInfo() {
-    return activeDimensionInfo;
-  }
-
-  public void setActiveDimensionInfo(DimensionInfo activeDimensionInfo) {
-    Preconditions.checkState(activeDimension != null, "Active dimension does not set");
-    this.activeDimensionInfo = activeDimensionInfo;
-  }
-
-  public CompoundBinaryTag encode(ProtocolVersion protocolVersion) {
-    ListBinaryTag.Builder<CompoundBinaryTag> dimensionsBuilder = ListBinaryTag
-        .builder(BinaryTagTypes.COMPOUND);
-    for (Entry<Dimension, List<Biome>> dimensionEntry : dimensions.entrySet()) {
-      Dimension dimension = dimensionEntry.getKey();
-      CompoundBinaryTag attributes = dimension.encodeAttributes(protocolVersion);
-      if (protocolVersion.isBeforeOrEq(ProtocolVersion.MINECRAFT_1_16_1)) {
-        dimensionsBuilder.add(attributes);
-      } else {
-        CompoundBinaryTag dimensionData = CompoundBinaryTag.builder()
-            .putString("name", dimension.getKey())
-            .putInt("id", dimension.getId())
-            .put("element", attributes).build();
-        dimensionsBuilder.add(dimensionData);
-      }
-    }
-    if (protocolVersion.isBeforeOrEq(ProtocolVersion.MINECRAFT_1_16_1)) {
-      return CompoundBinaryTag.builder().put("dimension", dimensionsBuilder.build()).build();
-    } else {
-      CompoundBinaryTag encodedDimensions = CompoundBinaryTag.builder()
-          .putString("type", "minecraft:dimension_type")
-          .put("value", dimensionsBuilder.build())
-          .build();
-      return CompoundBinaryTag.builder()
-          .put("minecraft:dimension_type", encodedDimensions)
-          .put("minecraft:worldgen/biome", createBiomeRegistry(dimensions.values())).build();
-    }
-  }
-
-  private CompoundBinaryTag createBiomeRegistry(Collection<List<Biome>> allBiomes) {
-    Set<Biome> biomes = new HashSet<>();
-    for (List<Biome> biomeLise : allBiomes) {
-      biomes.addAll(biomeLise);
-    }
-
-    ListBinaryTag.Builder<CompoundBinaryTag> biomesBuilder = ListBinaryTag
-        .builder(BinaryTagTypes.COMPOUND);
-    for (Biome biome : biomes) {
-      biomesBuilder.add(biome.encodeBiome());
-    }
-    return CompoundBinaryTag.builder()
-        .putString("type", "minecraft:worldgen/biome")
-        .put("value", biomesBuilder.build()).build();
-  }
-}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/JoinGame.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/JoinGame.java
deleted file mode 100644
index ab8d3f63..00000000
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/JoinGame.java
+++ /dev/null
@@ -1,109 +0,0 @@
-/*
- * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
- *
- * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package net.elytrium.elytraproxy.botfilter.protocol.packet;
-
-import com.velocitypowered.api.network.ProtocolVersion;
-import com.velocitypowered.proxy.connection.registry.DimensionInfo;
-import com.velocitypowered.proxy.protocol.MinecraftPacket;
-import com.velocitypowered.proxy.protocol.ProtocolUtils;
-import io.netty.buffer.ByteBuf;
-import lombok.AllArgsConstructor;
-import lombok.Builder;
-import lombok.Data;
-import lombok.NoArgsConstructor;
-import net.elytrium.elytraproxy.botfilter.protocol.data.registry.DimensionRegistry;
-
-@Data
-@Builder
-@NoArgsConstructor
-@AllArgsConstructor
-public class JoinGame implements MinecraftPacket {
-
-  private int entityId;
-  private short gamemode;
-  private int dimension;
-  private long partialHashedSeed;
-  private short difficulty;
-  private boolean hardcore;
-  private int maxPlayers;
-  private String levelType;
-  private int viewDistance;
-  private boolean reducedDebugInfo;
-  private boolean showRespawnScreen;
-  private DimensionRegistry dimensionRegistry;
-  private short previousGamemode;
-
-  @Override
-  public void encode(ByteBuf buf, ProtocolUtils.Direction direction, ProtocolVersion version) {
-    buf.writeInt(entityId);
-    if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_16_2)) {
-      buf.writeBoolean(hardcore);
-      buf.writeByte(gamemode);
-    } else {
-      buf.writeByte(hardcore ? gamemode | 0x8 : gamemode);
-    }
-    DimensionInfo dimensionInfo = dimensionRegistry.getActiveDimensionInfo();
-    if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_16)) {
-      buf.writeByte(previousGamemode);
-      ProtocolUtils.writeStringArray(buf,
-          dimensionRegistry.getWorldNames().toArray(new String[0])); //worldNames
-      ProtocolUtils.writeCompoundTag(buf, dimensionRegistry.encode(version));
-      if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_16_2)) {
-        ProtocolUtils.writeCompoundTag(buf,
-            dimensionRegistry.getActiveDimension().encodeAttributes(version));
-        ProtocolUtils.writeString(buf, dimensionInfo.getRegistryIdentifier());
-      } else {
-        ProtocolUtils.writeString(buf, dimensionInfo.getRegistryIdentifier());
-        ProtocolUtils.writeString(buf, dimensionInfo.getLevelName());
-      }
-    } else if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_9_1)) {
-      buf.writeInt(dimension);
-    } else {
-      buf.writeByte(dimension);
-    }
-    if (version.isBeforeOrEq(ProtocolVersion.MINECRAFT_1_13_2)) {
-      buf.writeByte(difficulty);
-    }
-    if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_15)) {
-      buf.writeLong(partialHashedSeed);
-    }
-    if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_16_2)) {
-      ProtocolUtils.writeVarInt(buf, maxPlayers);
-    } else {
-      buf.writeByte(maxPlayers);
-    }
-    if (version.isBefore(ProtocolVersion.MINECRAFT_1_16)) {
-      ProtocolUtils.writeString(buf, levelType);
-    }
-    if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_14)) {
-      ProtocolUtils.writeVarInt(buf, viewDistance);
-    }
-    if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_8)) {
-      buf.writeBoolean(reducedDebugInfo);
-    }
-    if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_15)) {
-      buf.writeBoolean(showRespawnScreen);
-    }
-    if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_16)) {
-      buf.writeBoolean(dimensionInfo.isDebugType());
-      buf.writeBoolean(dimensionInfo.isFlat());
-    }
-  }
-}
\ No newline at end of file
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/world/UpdateLight.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/world/UpdateLight.java
deleted file mode 100644
index e0083dca..00000000
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/world/UpdateLight.java
+++ /dev/null
@@ -1,125 +0,0 @@
-/*
- * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
- *
- * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package net.elytrium.elytraproxy.botfilter.protocol.packet.world;
-
-import com.velocitypowered.api.network.ProtocolVersion;
-import com.velocitypowered.proxy.protocol.MinecraftPacket;
-import com.velocitypowered.proxy.protocol.ProtocolUtils;
-import com.velocitypowered.proxy.protocol.ProtocolUtils.Direction;
-import io.netty.buffer.ByteBuf;
-import java.util.BitSet;
-import net.elytrium.elytraproxy.botfilter.protocol.util.mcprotocollib.NibbleArray3d;
-import net.elytrium.elytraproxy.botfilter.server.world.chunk.ChunkSnapshot;
-import net.elytrium.elytraproxy.botfilter.server.world.chunk.LightSection;
-
-public class UpdateLight implements MinecraftPacket {
-
-  private final ChunkSnapshot chunk;
-  private final NibbleArray3d[] skyLight = new NibbleArray3d[18];
-  private final NibbleArray3d[] blockLight = new NibbleArray3d[18];
-  private int skyLightMask = 0;
-  private int blockLightMask = 0;
-  private int emptySkyLightMask = 0;
-  private int emptyBlockLightMask = 0;
-
-  private int skyLightArrayCount;
-  private int blockLightArrayCount;
-
-  public UpdateLight() {
-    chunk = null;
-  }
-
-  public UpdateLight(ChunkSnapshot chunkSnapshot) {
-    this.chunk = chunkSnapshot;
-    prepareLighting();
-  }
-
-  @Override
-  public void encode(ByteBuf buf, Direction direction, ProtocolVersion version) {
-    ProtocolUtils.writeVarInt(buf, chunk.getX());
-    ProtocolUtils.writeVarInt(buf, chunk.getZ());
-
-    if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_16)) {
-      buf.writeBoolean(true); //trust edges
-    }
-
-    if (version.isBefore(ProtocolVersion.MINECRAFT_1_17)) {
-      ProtocolUtils.writeVarInt(buf, skyLightMask);
-      ProtocolUtils.writeVarInt(buf, blockLightMask);
-      ProtocolUtils.writeVarInt(buf, emptySkyLightMask);
-      ProtocolUtils.writeVarInt(buf, emptyBlockLightMask);
-    } else {
-      write117Mask(buf, skyLightMask);
-      write117Mask(buf, blockLightMask);
-      write117Mask(buf, emptySkyLightMask);
-      write117Mask(buf, emptyBlockLightMask);
-    }
-
-    if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_17)) {
-      ProtocolUtils.writeVarInt(buf, skyLightArrayCount);
-    }
-    for (NibbleArray3d array3d : skyLight) {
-      if (array3d != null) {
-        ProtocolUtils.writeByteArray(buf, array3d.getData());
-      }
-    }
-    if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_17)) {
-      ProtocolUtils.writeVarInt(buf, blockLightArrayCount);
-    }
-    for (NibbleArray3d nibbleArray3d : blockLight) {
-      if (nibbleArray3d != null) {
-        ProtocolUtils.writeByteArray(buf, nibbleArray3d.getData());
-      }
-    }
-  }
-
-  private void prepareLighting() {
-
-    LightSection[] lightSections = chunk.getLight();
-
-    for (int i = 0; i < lightSections.length; i++) {
-      LightSection section = lightSections[i];
-      if (section.getSkyLight() == LightSection.NO_LIGHT) {
-        emptySkyLightMask |= 1 << i;
-      } else if (section.getSkyLight() != LightSection.ALL_LIGHT) {
-        skyLightMask |= 1 << i;
-        skyLight[i] = section.getSkyLight();
-        skyLightArrayCount++;
-      }
-
-      if (section.getBlockLight() != LightSection.NO_LIGHT) {
-        blockLightMask |= 1 << i;
-        blockLight[i] = section.getBlockLight();
-        blockLightArrayCount++;
-      } else {
-        emptyBlockLightMask |= 1 << i;
-      }
-    }
-  }
-
-  private static void write117Mask(ByteBuf buf, int mask) {
-    BitSet bitSet = BitSet.valueOf(new long[]{mask});
-    long[] mk = bitSet.toLongArray();
-    ProtocolUtils.writeVarInt(buf, mk.length);
-    for (long m : mk) {
-      buf.writeLong(m);
-    }
-  }
-}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/BotFilterSessionHandler.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/BotFilterSessionHandler.java
deleted file mode 100644
index 97223ada..00000000
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/BotFilterSessionHandler.java
+++ /dev/null
@@ -1,68 +0,0 @@
-/*
- * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
- *
- * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package net.elytrium.elytraproxy.botfilter.server;
-
-import com.velocitypowered.proxy.connection.MinecraftSessionHandler;
-import com.velocitypowered.proxy.connection.client.ConnectedPlayer;
-import com.velocitypowered.proxy.connection.client.LoginSessionHandler;
-import java.util.Objects;
-import lombok.Data;
-
-@Data
-public class BotFilterSessionHandler implements MinecraftSessionHandler {
-
-  private final ConnectedPlayer player;
-  private final LoginSessionHandler originalHandler;
-  private final VirtualServer virtualServer;
-
-  @Override
-  public void disconnected() {
-    virtualServer.disconnected(this);
-  }
-
-  @Override
-  public void deactivated() {
-    virtualServer.disconnected(this);
-  }
-
-  private void finishCheck() {
-    player.getConnection().setSessionHandler(originalHandler);
-    originalHandler.initialize(player);
-    //fakeServer.getBotFilter().restoreOriginalHandlers(user);
-    //afterCheck.run();
-  }
-
-  @Override
-  public boolean equals(Object o) {
-    if (this == o) {
-      return true;
-    }
-    if (o == null || getClass() != o.getClass()) {
-      return false;
-    }
-    BotFilterSessionHandler that = (BotFilterSessionHandler) o;
-    return player.getUsername().equals(that.player.getUsername());
-  }
-
-  @Override
-  public int hashCode() {
-    return Objects.hash(player.getUsername());
-  }
-}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/ServerPackets.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/ServerPackets.java
deleted file mode 100644
index 6919e5e1..00000000
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/ServerPackets.java
+++ /dev/null
@@ -1,198 +0,0 @@
-/*
- * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
- *
- * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package net.elytrium.elytraproxy.botfilter.server;
-
-import com.google.common.collect.ImmutableList;
-import com.velocitypowered.api.network.ProtocolVersion;
-import com.velocitypowered.proxy.connection.registry.DimensionInfo;
-import com.velocitypowered.proxy.protocol.StateRegistry;
-import com.velocitypowered.proxy.protocol.packet.Disconnect;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-import lombok.Getter;
-import net.elytrium.elytraproxy.botfilter.protocol.cache.MultiplePreparedPackets;
-import net.elytrium.elytraproxy.botfilter.protocol.cache.PacketCompressor;
-import net.elytrium.elytraproxy.botfilter.protocol.cache.PreparedPacket;
-import net.elytrium.elytraproxy.botfilter.protocol.data.registry.Biome;
-import net.elytrium.elytraproxy.botfilter.protocol.data.registry.Dimension;
-import net.elytrium.elytraproxy.botfilter.protocol.data.registry.DimensionRegistry;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.JoinGame;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.PlayerPositionAndLook;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.UpdateViewPosition;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.world.ChunkData;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.world.UpdateLight;
-import net.elytrium.elytraproxy.botfilter.server.world.VirtualWorld;
-import net.elytrium.elytraproxy.botfilter.server.world.chunk.SimpleChunk;
-import net.kyori.adventure.text.Component;
-import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
-
-@Getter
-public class ServerPackets {
-
-  private final PacketCompressor packetCompressor;
-  private final VirtualServer virtualServer;
-  private VirtualWorld virtualWorld;
-  //JoinGame + Chunks + Light + PlayerPosAndLook
-  private MultiplePreparedPackets spawnPackets;
-  private PreparedPacket<Disconnect> alreadyConnected;
-
-  public ServerPackets(PacketCompressor packetCompressor,
-      VirtualServer virtualServer) {
-    this.packetCompressor = packetCompressor;
-    this.virtualServer = virtualServer;
-  }
-
-  public void createPackets() {
-    releaseAll();
-    this.virtualWorld = new VirtualWorld(Dimension.OVERWORLD,
-        new DimensionInfo(Dimension.OVERWORLD.getKey(), Dimension.OVERWORLD.getKey(), true, false));
-    virtualWorld.setSkyLight(0, 60, 0,
-        (byte) 1); //1.7 workaround //TODO: Maybe broken with new light system realiztion
-
-    /*
-    for (int x = 0; x < 16; x++) {
-      for (int z = 0; z < 16; z++) {
-        virtualWorld.setBlock(x, 40, z, SimpleBlock.GRANITE);
-        virtualWorld.setBlock(x, 60, z, SimpleBlock.GRANITE);
-      }
-    }
-    for (int x = 1; x < 15; x++) {
-      for (int z = 1; z < 15; z++) {
-        if (x % 3 == 0 && z % 3 == 0) {
-          virtualWorld.setBlock(x, 40, z, SimpleBlock.BARRIER);
-          virtualWorld.setBlockLight(x, 41, z, (byte) 15);
-        }
-      }
-    }
-    for (int x = 0; x < 16; x++) {
-      for (int y = 40; y <= 60; y++) {
-        virtualWorld.setBlock(x, y, 0, SimpleBlock.GRANITE);
-        virtualWorld.setBlock(0, y, x, SimpleBlock.GRANITE);
-        virtualWorld.setBlock(x, y, 15, SimpleBlock.GRANITE);
-        virtualWorld.setBlock(15, y, x, SimpleBlock.GRANITE);
-      }
-    }
-    */
-
-    List<PreparedPacket> preparedPackets = new ArrayList<>();
-    preparedPackets.add(createJoinGamePacket());
-    preparedPackets.addAll(createChunksPackets());
-    preparedPackets.addAll(createUpdateLightPackets());
-    preparedPackets.add(createPlayerPosAndLookPacket());
-    spawnPackets = new MultiplePreparedPackets(preparedPackets.toArray(new PreparedPacket[0]));
-    alreadyConnected = createDisconnectPacket("&cAlready connected", StateRegistry.LOGIN);
-    virtualWorld = null;
-  }
-
-  //TODO use Dimensions ids for < 1.16 version
-  private PreparedPacket<JoinGame> createJoinGamePacket() {
-    DimensionRegistry dimensionRegistry = new DimensionRegistry();
-    dimensionRegistry.addDimension(
-        Dimension.OVERWORLD, ImmutableList.of(Biome.PLAINTS, Biome.SWAMP, Biome.SWAMP_HILLS));
-    dimensionRegistry.setActiveDimension(Dimension.OVERWORLD);
-    dimensionRegistry.setActiveDimensionInfo(
-        new DimensionInfo("minecraft:overworld", "minecraft:overworld", false, false));
-    PreparedPacket<JoinGame> joinGame = new PreparedPacket<>();
-    joinGame.prepare(JoinGame.builder().entityId(0).gamemode((short) 1).dimension(0).
-        partialHashedSeed(1).difficulty((short) 0).maxPlayers(1).levelType("flat").viewDistance(4)
-        .reducedDebugInfo(false).showRespawnScreen(true).hardcore(false)
-        .dimensionRegistry(dimensionRegistry).build());
-
-    return processCompression(joinGame);
-  }
-
-  private PreparedPacket<PlayerPositionAndLook> createPlayerPosAndLookPacket() {
-    PreparedPacket<PlayerPositionAndLook> playerPosAndLook = new PreparedPacket<>();
-    playerPosAndLook.prepare(new PlayerPositionAndLook(6, 60, 6, 0f, 0f, -133, false, true));
-    return processCompression(playerPosAndLook);
-  }
-
-  private List<PreparedPacket<ChunkData>> createChunksPackets() {
-    List<PreparedPacket<ChunkData>> packets = new ArrayList<>();
-    for (SimpleChunk chunk : virtualWorld.getChunks()) {
-      packets.add(createChunkDataPacket(chunk));
-    }
-    return packets;
-  }
-
-  private PreparedPacket<ChunkData> createChunkDataPacket(SimpleChunk chunk) {
-    PreparedPacket<ChunkData> chunkPacket = new PreparedPacket<>();
-    chunkPacket.prepare(new ChunkData(chunk.getFullChunkSnapshot(),
-        chunk.getWorld().getDimension().isHasSkylight()));
-    return processCompression(chunkPacket);
-  }
-
-  private List<PreparedPacket<UpdateLight>> createUpdateLightPackets() {
-    List<PreparedPacket<UpdateLight>> packets = new ArrayList<>();
-    for (SimpleChunk chunk : virtualWorld.getChunks()) {
-      packets.add(createUpdateLightPacket(chunk));
-    }
-    return packets;
-  }
-
-  private PreparedPacket<UpdateLight> createUpdateLightPacket(SimpleChunk chunk) {
-    PreparedPacket<UpdateLight> lightPacket = new PreparedPacket<>();
-    lightPacket
-        .prepare(new UpdateLight(chunk.getFullChunkSnapshot()), ProtocolVersion.MINECRAFT_1_14);
-    return processCompression(lightPacket);
-  }
-
-  private PreparedPacket<UpdateViewPosition> createUpdateViewPositionPacket(SimpleChunk chunk) {
-    PreparedPacket<UpdateViewPosition> update = new PreparedPacket<>();
-    update.prepare(new UpdateViewPosition(chunk.getX(), chunk.getZ()),
-        ProtocolVersion.MINECRAFT_1_17);
-    return processCompression(update);
-  }
-
-  private PreparedPacket<Disconnect> createDisconnectPacket(String message,
-      StateRegistry protocol) {
-    Component component = LegacyComponentSerializer.legacyAmpersand().deserialize(message);
-    PreparedPacket<Disconnect> disconnect = new PreparedPacket<>();
-    disconnect.prepare(Disconnect.create(component, ProtocolVersion.MINECRAFT_1_7_2),
-        ProtocolVersion.MINECRAFT_1_7_2, ProtocolVersion.MINECRAFT_1_15_2, protocol);
-    disconnect.prepare(Disconnect.create(component, ProtocolVersion.MINECRAFT_1_16),
-        ProtocolVersion.MINECRAFT_1_16, protocol);
-    if (protocol == StateRegistry.LOGIN) {
-      disconnect.finish();
-      return disconnect;
-    }
-    return processCompression(disconnect);
-  }
-
-  private <T extends PreparedPacket<?>> T processCompression(T preparedPacket) {
-    if (packetCompressor.isCompressionEnabled()) {
-      preparedPacket.processCompress(packetCompressor);
-    }
-    preparedPacket.finish();
-    return preparedPacket;
-  }
-
-  public void releaseAll() {
-    for (PreparedPacket packet : Arrays.asList(alreadyConnected)) {
-      if (packet != null) {
-        packet.releaseBuffers();
-      }
-    }
-    if (spawnPackets != null) {
-      spawnPackets.release();
-    }
-  }
-}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/commands/AlertCommand.java b/proxy/src/main/java/net/elytrium/elytraproxy/commands/AlertCommand.java
index d1cbb572..f01a0c0e 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/commands/AlertCommand.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/commands/AlertCommand.java
@@ -44,26 +44,17 @@ public class AlertCommand implements SimpleCommand {
       source.sendMessage(
           LegacyComponentSerializer
               .legacyAmpersand()
-              .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.ALERT_MESSAGE_NEEDED
-                  .replace("{NL}", "\n")
-                  .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-              ));
+              .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.ALERT_MESSAGE_NEEDED));
     } else {
       String message = String.join(" ", args);
       Component component = LegacyComponentSerializer
           .legacyAmpersand()
-          .deserialize((Settings.IMP.MESSAGES.ELYTRAPROXY.ALERT_PREFIX + message)
-              .replace("{NL}", "\n")
-              .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-          );
+          .deserialize((Settings.IMP.MESSAGES.ELYTRAPROXY.ALERT_PREFIX + message));
       if (server.getAllPlayers().size() == 0) {
         source.sendMessage(
             LegacyComponentSerializer
                 .legacyAmpersand()
-                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.ALERT_SERVER_EMPTY
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                ));
+                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.ALERT_SERVER_EMPTY));
       } else if (server.getAllPlayers().size() >= 1) {
         if (!(source instanceof Player)) {
           source.sendMessage(component);
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/commands/ChangePasswordCommand.java b/proxy/src/main/java/net/elytrium/elytraproxy/commands/ChangePasswordCommand.java
new file mode 100644
index 00000000..8cf2cdab
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/commands/ChangePasswordCommand.java
@@ -0,0 +1,58 @@
+/*
+ * Copyright (C) 2021 Elytrium
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.commands;
+
+import com.google.common.collect.ImmutableMap;
+import com.velocitypowered.api.command.CommandSource;
+import com.velocitypowered.api.command.SimpleCommand;
+import com.velocitypowered.api.proxy.Player;
+import net.elytrium.elytraproxy.auth.handler.AuthSessionHandler;
+import net.elytrium.elytraproxy.config.Settings;
+import net.elytrium.elytraproxy.database.Database;
+import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
+
+public class ChangePasswordCommand implements SimpleCommand {
+
+  private final Database database;
+
+  public ChangePasswordCommand(Database database) {
+    this.database = database;
+  }
+
+  @Override
+  public void execute(final Invocation invocation) {
+    final CommandSource source = invocation.source();
+    final String[] args = invocation.arguments();
+
+    if (args.length != 1 || !(source instanceof Player)) {
+      source.sendMessage(
+          LegacyComponentSerializer
+              .legacyAmpersand()
+              .deserialize(Settings.IMP.AUTH.STRINGS.CHANGE_PASSWORD_USAGE));
+    } else {
+      database.updateMap(Settings.IMP.AUTH.TABLE,
+          ImmutableMap.of("nickname", ((Player) source).getUsername()),
+          ImmutableMap.of("hash", AuthSessionHandler.genHash(args[0])));
+    }
+  }
+
+  @Override
+  public boolean hasPermission(final Invocation invocation) {
+    return invocation.source().hasPermission("elytraproxy.auth.unregister");
+  }
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/commands/ElytraProxyCommand.java b/proxy/src/main/java/net/elytrium/elytraproxy/commands/ElytraProxyCommand.java
index 4a622823..bf1b46e3 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/commands/ElytraProxyCommand.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/commands/ElytraProxyCommand.java
@@ -75,22 +75,16 @@ public class ElytraProxyCommand implements SimpleCommand {
   }
 
   private void usage(CommandSource source) {
-    source.sendMessage(Identity.nil(), Component.text("§eThis server is using ElytraProxy"
-          + " that based on Velocity Proxy"));
-    source.sendMessage(Identity.nil(), Component.text("§eOriginal Velocity by astei"
-          + " and many-many contributors"));
-    source.sendMessage(Identity.nil(), Component.text("§eElytraProxy by Elytrium dev team"));
-    source.sendMessage(Identity.nil(), Component.text("§dMade With Love ❤"));
-    source.sendMessage(Identity.nil(), Component.text("§a"
-          + "https://github.com/Elytrium/ElytraProxy"));
+    source.sendMessage(Identity.nil(), Component.text("§eThis server is using ElytraProxy by Elytrium devs team"));
+    source.sendMessage(Identity.nil(), Component.text("§eOriginal Velocity by astei and many-many contributors"));
+    source.sendMessage(Identity.nil(), Component.text("§ahttps://github.com/Elytrium/ElytraProxy"));
     if (source.hasPermission("elytraproxy.command.reload")
         || source.hasPermission("elytraproxy.command.stats")
         || source.hasPermission("elytraproxy.command.commandspy")) {
       source.sendMessage(Identity.nil(), Component.text("§aCommands: "));
       source.sendMessage(Identity.nil(), Component.text("§6/elytraproxy reload §7-§f"
           + " reloads proxy server itself, without plugins"));
-      source.sendMessage(Identity.nil(), Component.text("§6/elytraproxy stats §7-§f"
-          + " enable action bar statistic"));
+      source.sendMessage(Identity.nil(), Component.text("§6/elytraproxy stats §7-§f enable action bar statistics"));
     }
   }
 
@@ -128,8 +122,7 @@ public class ElytraProxyCommand implements SimpleCommand {
 
     if (currentArgs.length == 1) {
       return commands.entrySet().stream()
-          .filter(e -> e.getKey().regionMatches(true, 0, currentArgs[0], 0,
-              currentArgs[0].length()))
+          .filter(e -> e.getKey().regionMatches(true, 0, currentArgs[0], 0, currentArgs[0].length()))
           .filter(e -> e.getValue().hasPermission(source, new String[0]))
           .map(Map.Entry::getKey)
           .collect(ImmutableList.toImmutableList());
@@ -176,31 +169,22 @@ public class ElytraProxyCommand implements SimpleCommand {
     public void execute(CommandSource source, String @NonNull [] args) {
       try {
         if (server.reloadConfiguration()) {
-          source.sendMessage(Identity.nil(),
+          source.sendMessage(
               LegacyComponentSerializer
                   .legacyAmpersand()
-                  .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.RELOAD_SUCCESS
-                      .replace("{NL}", "\n")
-                      .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                  ));
+                  .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.RELOAD_SUCCESS));
         } else {
-          source.sendMessage(Identity.nil(),
+          source.sendMessage(
               LegacyComponentSerializer
                   .legacyAmpersand()
-                  .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.RELOAD_FAILURE
-                      .replace("{NL}", "\n")
-                      .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                  ));
+                  .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.RELOAD_FAILURE));
         }
       } catch (Exception e) {
         logger.error("Unable to reload configuration", e);
-        source.sendMessage(Identity.nil(),
+        source.sendMessage(
             LegacyComponentSerializer
                 .legacyAmpersand()
-                .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.RELOAD_FAILURE
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                ));
+                .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.RELOAD_FAILURE));
       }
 
       elytraProxy.reload(source);
@@ -231,12 +215,11 @@ public class ElytraProxyCommand implements SimpleCommand {
                   LegacyComponentSerializer
                       .legacyAmpersand()
                       .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.STATS_FORMAT
-                          .replace("{NL}", "\n")
-                          .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
                           .replace("{0}", String.valueOf(statistics.getBlockedConnections()))
                           .replace("{1}", String.valueOf(statistics.getConnectionsPerSecond()))
                           .replace("{2}", String.valueOf(statistics.getPingsPerSecond()))
                           .replace("{3}", String.valueOf(statistics.getTotalConnectionsPerSecond()))
+                          .replace("{4}", String.valueOf(player.getPing()))
                       ));
             }
           } catch (Exception e) {
@@ -257,19 +240,13 @@ public class ElytraProxyCommand implements SimpleCommand {
         source.sendMessage(
             LegacyComponentSerializer
                 .legacyAmpersand()
-                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.STATS_DISABLED
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                ));
+                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.STATS_DISABLED));
         playersWithStats.remove(player);
       } else {
         source.sendMessage(
             LegacyComponentSerializer
                 .legacyAmpersand()
-                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.STATS_ENABLED
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                ));
+                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.STATS_ENABLED));
         playersWithStats.add(player);
       }
     }
@@ -282,10 +259,6 @@ public class ElytraProxyCommand implements SimpleCommand {
 
   private static class CommandSpy implements SubCommand {
 
-
-    private CommandSpy() {
-    }
-
     @Override
     public void execute(CommandSource source, String @NonNull [] args) {
       if (!(source instanceof Player)) {
@@ -297,19 +270,13 @@ public class ElytraProxyCommand implements SimpleCommand {
         source.sendMessage(
             LegacyComponentSerializer
                 .legacyAmpersand()
-                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.COMMAND_SPY_DISABLED
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                ));
+                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.COMMAND_SPY_DISABLED));
         playersWithSpy.remove(player);
       } else {
         source.sendMessage(
             LegacyComponentSerializer
                 .legacyAmpersand()
-                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.COMMAND_SPY_ENABLED
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                ));
+                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.COMMAND_SPY_ENABLED));
         playersWithSpy.add(player);
       }
     }
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/commands/FindCommand.java b/proxy/src/main/java/net/elytrium/elytraproxy/commands/FindCommand.java
index 0230c0d7..9d9acf7c 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/commands/FindCommand.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/commands/FindCommand.java
@@ -63,10 +63,7 @@ public class FindCommand implements SimpleCommand {
       source.sendMessage(
           LegacyComponentSerializer
               .legacyAmpersand()
-              .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.FIND_USERNAME_NEEDED
-                  .replace("{NL}", "\n")
-                  .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-              ));
+              .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.FIND_USERNAME_NEEDED));
     } else {
       Optional<Player> player = server.getPlayer(args[0]);
       if (player.isPresent()) {
@@ -76,8 +73,6 @@ public class FindCommand implements SimpleCommand {
             LegacyComponentSerializer
                 .legacyAmpersand()
                 .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.FIND_USER_ONLINE_AT
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
                     .replace("{0}", pl.getUsername())
                     .replace("{1}", srv.getServerInfo().getName())
                 )));
@@ -86,8 +81,6 @@ public class FindCommand implements SimpleCommand {
             LegacyComponentSerializer
                 .legacyAmpersand()
                 .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.USER_NOT_ONLINE
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
                     .replace("{0}", args[0])
                 ));
       }
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/commands/MessageCommand.java b/proxy/src/main/java/net/elytrium/elytraproxy/commands/MessageCommand.java
deleted file mode 100644
index c93d30cb..00000000
--- a/proxy/src/main/java/net/elytrium/elytraproxy/commands/MessageCommand.java
+++ /dev/null
@@ -1,122 +0,0 @@
-/*
- * Copyright (C) 2021 Elytrium
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package net.elytrium.elytraproxy.commands;
-
-import com.google.common.collect.ImmutableList;
-import com.velocitypowered.api.command.CommandSource;
-import com.velocitypowered.api.command.SimpleCommand;
-import com.velocitypowered.api.proxy.Player;
-import com.velocitypowered.api.proxy.ProxyServer;
-import com.velocitypowered.api.proxy.ServerConnection;
-import java.util.Arrays;
-import java.util.List;
-import java.util.Optional;
-import java.util.stream.Collectors;
-import net.elytrium.elytraproxy.config.Settings;
-import net.kyori.adventure.text.Component;
-import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
-
-public class MessageCommand implements SimpleCommand {
-
-  private final ProxyServer server;
-
-  public MessageCommand(ProxyServer server) {
-    this.server = server;
-  }
-
-  @Override
-  public List<String> suggest(final SimpleCommand.Invocation invocation) {
-    final CommandSource source = invocation.source();
-
-    if (source instanceof Player) {
-      Optional<ServerConnection> serverConnection = ((Player) source).getCurrentServer();
-      if (serverConnection.isPresent()) {
-        return serverConnection.get()
-            .getServer()
-            .getPlayersConnected()
-            .stream()
-            .map(Player::getUsername)
-            .collect(Collectors.toList());
-      }
-    }
-    return ImmutableList.of();
-  }
-
-  @Override
-  public void execute(final Invocation invocation) {
-    final CommandSource source = invocation.source();
-    final String[] args = invocation.arguments();
-
-    if (args.length == 0) {
-      source.sendMessage(
-          LegacyComponentSerializer
-              .legacyAmpersand()
-              .deserialize("&cУкажите имя игрока, которому вы хотите отправить сообщение"
-                  .replace("{NL}", "\n")
-                  .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-              ));
-      return;
-    }
-
-    if (args.length == 1) {
-      source.sendMessage(
-          LegacyComponentSerializer
-              .legacyAmpersand()
-              .deserialize("&cУкажите сообщение, которое вы хотите отправить игроку"
-                  .replace("{NL}", "\n")
-                  .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-              ));
-      return;
-    }
-
-    Optional<Player> playerOptional = server.getPlayer(args[0]);
-    if (playerOptional.isPresent()) {
-      Player player = playerOptional.get();
-      String message = String.join(" ", Arrays.copyOfRange(args, 1, args.length - 1));
-      String author = (source instanceof Player) ? ((Player) source).getUsername()
-          : Settings.IMP.MESSAGES.ELYTRAPROXY.IF_CONSOLE
-              .replace("{NL}", "\n")
-              .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX);
-
-      Component component = LegacyComponentSerializer
-          .legacyAmpersand()
-          .deserialize("&d&l[{0}->{1}] {2}"
-              .replace("{NL}", "\n")
-              .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-              .replace("{0}", author)
-              .replace("{1}", player.getUsername())
-              .replace("{2}", message)
-          );
-
-      player.sendMessage(component);
-    } else {
-      source.sendMessage(
-          LegacyComponentSerializer
-              .legacyAmpersand()
-              .deserialize("&cИгрок не найден, или находится не в сети"
-                  .replace("{NL}", "\n")
-                  .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-              ));
-    }
-  }
-
-  @Override
-  public boolean hasPermission(final SimpleCommand.Invocation invocation) {
-    return true;
-  }
-}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/commands/SendCommand.java b/proxy/src/main/java/net/elytrium/elytraproxy/commands/SendCommand.java
index b4480320..4103669d 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/commands/SendCommand.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/commands/SendCommand.java
@@ -77,10 +77,7 @@ public class SendCommand implements SimpleCommand {
       source.sendMessage(
           LegacyComponentSerializer
               .legacyAmpersand()
-              .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.SEND_NOT_ENOUGH_ARGUMENTS
-                  .replace("{NL}", "\n")
-                  .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-              ));
+              .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.SEND_NOT_ENOUGH_ARGUMENTS));
       return;
     }
 
@@ -90,16 +87,13 @@ public class SendCommand implements SimpleCommand {
       return;
     }
 
-    String sender = (source instanceof Player) ? ((Player) source).getUsername()
-        : Settings.IMP.MESSAGES.ELYTRAPROXY.IF_CONSOLE
-            .replace("{NL}", "\n")
-            .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX);
+    String sender = (source instanceof Player)
+        ? ((Player) source).getUsername()
+        : Settings.IMP.MESSAGES.ELYTRAPROXY.IF_CONSOLE;
 
     Component summoned = LegacyComponentSerializer
         .legacyAmpersand()
         .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.SEND_YOU_GOT_SUMMONED
-            .replace("{NL}", "\n")
-            .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
             .replace("{0}", target.getServerInfo().getName())
             .replace("{1}", sender)
         );
@@ -135,8 +129,6 @@ public class SendCommand implements SimpleCommand {
               LegacyComponentSerializer
                   .legacyAmpersand()
                   .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.USER_NOT_ONLINE
-                      .replace("{NL}", "\n")
-                      .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
                       .replace("{0}", args[0])
                   ));
         }
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/commands/UnregisterCommand.java b/proxy/src/main/java/net/elytrium/elytraproxy/commands/UnregisterCommand.java
new file mode 100644
index 00000000..0a831172
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/commands/UnregisterCommand.java
@@ -0,0 +1,54 @@
+/*
+ * Copyright (C) 2021 Elytrium
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.commands;
+
+import com.google.common.collect.ImmutableMap;
+import com.velocitypowered.api.command.CommandSource;
+import com.velocitypowered.api.command.SimpleCommand;
+import net.elytrium.elytraproxy.config.Settings;
+import net.elytrium.elytraproxy.database.Database;
+import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
+
+public class UnregisterCommand implements SimpleCommand {
+
+  private final Database database;
+
+  public UnregisterCommand(Database database) {
+    this.database = database;
+  }
+
+  @Override
+  public void execute(final Invocation invocation) {
+    final CommandSource source = invocation.source();
+    final String[] args = invocation.arguments();
+
+    if (args.length != 1) {
+      source.sendMessage(
+          LegacyComponentSerializer
+              .legacyAmpersand()
+              .deserialize(Settings.IMP.AUTH.STRINGS.UNREGISTER_USAGE));
+    } else {
+      database.deleteMap(Settings.IMP.AUTH.TABLE, ImmutableMap.of("nickname", args[0]));
+    }
+  }
+
+  @Override
+  public boolean hasPermission(final Invocation invocation) {
+    return invocation.source().hasPermission("elytraproxy.auth.unregister");
+  }
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/config/Config.java b/proxy/src/main/java/net/elytrium/elytraproxy/config/Config.java
index 9b5cedfd..871941bb 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/config/Config.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/config/Config.java
@@ -96,6 +96,10 @@ public class Config {
       if (value instanceof Configuration) {
         set((Configuration) value, newPath);
         continue;
+      } else if (value instanceof String) {
+        set(newPath, ((String) value).replace("{NL}", "\n")
+            .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX));
+        continue;
       }
       set(newPath, value);
     }
@@ -193,7 +197,7 @@ public class Config {
           save(lines, current, value, indent + 2);
         } else {
           lines.add(spacing + toNodeName(field.getName() + ": ")
-              + toYamlString(field.get(instance), spacing));
+              + toYamlString(field, field.get(instance), spacing));
         }
       }
     } catch (RuntimeException e) {
@@ -236,7 +240,10 @@ public class Config {
   public @interface Ignore {
   }
 
-  private String toYamlString(Object value, String spacing) {
+  private String toYamlString(Field field, Object value, String spacing) {
+    if (value == null) {
+      return "null";
+    }
     if (value instanceof List) {
       Collection<?> listValue = (Collection<?>) value;
       if (listValue.isEmpty()) {
@@ -245,7 +252,7 @@ public class Config {
       StringBuilder m = new StringBuilder();
       for (Object obj : listValue) {
         m.append(
-          System.lineSeparator()).append(spacing).append("- ").append(toYamlString(obj, spacing));
+            System.lineSeparator()).append(spacing).append("- ").append(toYamlString(field, obj, spacing));
       }
       return m.toString();
     }
@@ -254,9 +261,15 @@ public class Config {
       if (stringValue.isEmpty()) {
         return "''";
       }
-      return "\"" + stringValue + "\"";
+      String quoted = "\"" + stringValue + "\"";
+      //noinspection ConstantConditions | We don't need to replace when IMP is initalizing
+      if (Settings.IMP == null || field.getName().equalsIgnoreCase("prefix")) {
+        return quoted;
+      }
+      return quoted.replace("\n", "{NL}")
+          .replace(Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX, "{PRFX}");
     }
-    return value != null ? value.toString() : "null";
+    return value.toString();
   }
 
   /**
@@ -317,9 +330,7 @@ public class Config {
               instance = value;
               split = Arrays.copyOfRange(split, 1, split.length);
               continue;
-            } catch (NoSuchFieldException
-                    | NoSuchMethodException
-                    | InvocationTargetException ignore) {
+            } catch (NoSuchFieldException | NoSuchMethodException | InvocationTargetException ignore) {
               //
             }
             return null;
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/config/Settings.java b/proxy/src/main/java/net/elytrium/elytraproxy/config/Settings.java
index 2751d0bc..05a6d422 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/config/Settings.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/config/Settings.java
@@ -27,7 +27,7 @@ public class Settings extends Config {
   public static final Settings IMP = new Settings();
 
   @Final
-  public String VERSION = "0.1.2-DEV";
+  public String VERSION = "3.0.1";
 
   @Create
   public MESSAGES MESSAGES;
@@ -37,16 +37,13 @@ public class Settings extends Config {
     @Create
     public MESSAGES.ELYTRAPROXY ELYTRAPROXY;
 
-    @Create
-    public MESSAGES.VELOCITY VELOCITY;
-
     public static class ELYTRAPROXY {
       public String PREFIX = "&5&l[ElytraProxy]";
       public String ALERT_PREFIX = "&8[&4Alert&8]&f ";
       public String IF_CONSOLE = "CONSOLE";
       public String ALERT_MESSAGE_NEEDED = "{PRFX} &fYou must supply a message.";
       public String ALERT_SERVER_EMPTY = "{PRFX} &fServer is empty.";
-      public String STATS_FORMAT = "&c&lTotal Blocked: &6&l{0}&c&l | Connections Per Second: &6&l{1}&c&l | Pings Per Second: &6&l{2}&c&l | Total Connections Per Second: &6&l{3}";
+      public String STATS_FORMAT = "&c&lTotal Blocked: &6&l{0} &c&l| Connections Per Second: &6&l{1} &c&l| Pings Per Second: &6&l{2} &c&l| Total Connections Per Second: &6&l{3} &c&l| Ping: &6&l{4}";
       public String STATS_ENABLED = "{PRFX} &fNow you see statistics in your action bar.";
       public String STATS_DISABLED = "{PRFX} &fYou're no longer see statistics in your action bar.";
       public String FIND_USERNAME_NEEDED = "{PRFX} &fPlease follow this command by a user name.";
@@ -60,12 +57,13 @@ public class Settings extends Config {
       public String CONSOLE_LOG_COMMAND_EXECUTIONS_FORMAT = "{0} -> executed command {1}";
       public String RELOAD_SUCCESS = "{PRFX} &fElytraProxy configuration successfully reloaded.";
       public String RELOAD_FAILURE = "{PRFX} &cUnable to reload your ElytraProxy configuration. Check the console for more details.";
+      public String DB_FAILURE = "Unable to connect to database.";
 
       @Create
       public MESSAGES.ELYTRAPROXY.KICK KICK;
 
-      @Comment("Kick messages")
       public static class KICK {
+        @Comment("Kick messages")
         public String PROXY_SHUTTING_DOWN = "&cProxy shutting down.";
         public String PROTOCOL_BLOCKED = "&c1.7.x not supported";
         public String NICK_BLOCKED = "&cYour nickname contains forbidden phrases.";
@@ -74,20 +72,18 @@ public class Settings extends Config {
         public String CLIENT_CHECK_SETTINGS_SKIN_PARTS = "&cPlease enable any option from the skin customization to join the server.{NL}&eOptions > Skin Customization";
         public String CLIENT_CHECK_BRAND = "&cYour client doesn't send brand packets.";
       }
-      /*
-      public String MYSQL_LOAD_FAILED: "Ошибка при инициализации базы данных. Выключение..."
-      */
     }
 
-    @Comment({
-        "You may found other languages translations here: ",
-        "https://github.com/VelocityPowered/Velocity/tree/dev/2.0.0/proxy/src/main/resources/com/velocitypowered/proxy/l10n"
-    })
+    @Create
+    public MESSAGES.VELOCITY VELOCITY;
+
     public static class VELOCITY {
+      @Comment({
+          "You may found other languages translations here: ",
+          "https://github.com/VelocityPowered/Velocity/tree/dev/3.0.0/proxy/src/main/resources/com/velocitypowered/proxy/l10n"
+      })
       @Create
       public MESSAGES.VELOCITY.ERROR ERROR;
-      @Create
-      public MESSAGES.VELOCITY.COMMAND COMMAND;
 
       public static class ERROR {
         public String ALREADY_CONNECTED = "&cYou are already connected to this server!";
@@ -107,6 +103,9 @@ public class Settings extends Config {
         public String EXTREMELY_OLD_CLIENT = "&cYour client is extremely old. Please update to a newer version of Minecraft.";
       }
 
+      @Create
+      public MESSAGES.VELOCITY.COMMAND COMMAND;
+
       public static class COMMAND {
         public String GENERIC_ERROR = "{PRFX} &fAn error occurred while running this command.";
         public String COMMAND_DOES_NOT_EXIST = "{PRFX} &fThis command does not exist.";
@@ -147,22 +146,19 @@ public class Settings extends Config {
         "{ServerBrand} - returns the server on which the player is located",
         "{ProxyBrand} - returns the proxy original brand"
     })
-    public String BRAND = "{ServerBrand} => {ProxyBrand} (by ElytraDev)";
+    public String BRAND = "{ServerBrand} => {ProxyBrand} (by Elytrium)";
     @Comment("Changes server version in ping request")
-    public String PING_VERSION = "ElytraProxy (by ElytraDev)";
+    public String PING_VERSION = "ElytraProxy (by Elytrium)";
 
     @Create
     public MAIN_SETTINGS.HOSTNAMES_MANAGER HOSTNAMES_MANAGER;
 
-    @Create
-    public MAIN_SETTINGS.MAINTENANCE MAINTENANCE;
-
-    @Comment({
-        "Allows you to reject connection to the server for all domains except yours and direct ip",
-        "Most likely does not work with SRV records"
-    })
     public static class HOSTNAMES_MANAGER {
-      public boolean ENABLE = false;
+      @Comment({
+          "Allows you to reject connection to the server for all domains except yours and direct ip"
+      })
+      public boolean ENABLE_CHECK_ON_PING = false;
+      public boolean ENABLE_CHECK_ON_CONNECTION = false;
       @Comment("If whitelist enabled, all hostnames (domains and ips) in list WON'T BE BLOCKED, but other hostnames WILL BE BLOCKED")
       public boolean WHITELIST = true;
       public boolean DOMAINS_CHECK = false;
@@ -171,15 +167,19 @@ public class Settings extends Config {
       @Comment("IP's in this list will be ignored in check.")
       public List<String> IGNORED_IPS = Arrays.asList("127.0.0.1", "your-haproxy-ip");
     }
+
     @Comment("Players who are on these servers will not be counted in ping request and in the query request.")
     public List<String> IGNORE_ONLINE_AT = Arrays.asList("auth");
 
+    @Create
+    public MAIN_SETTINGS.MAINTENANCE MAINTENANCE;
+
     public static class MAINTENANCE {
       public boolean ENABLED = false;
       public String PING_VERSION = "Maintenance";
       public String MOTD = "&cMaintenance, please wait.";
       public String DISCONNECT_REASON = "&cSorry, but now server is not available due to maintenance";
-      public List<String> IGNORED_PLAYERS = Arrays.asList("4anonymous4");
+      public List<String> IGNORED_PLAYERS = Arrays.asList("mdxd44");
     }
   }
 
@@ -190,6 +190,16 @@ public class Settings extends Config {
     public boolean ENABLE = true;
     public boolean CHECK_CLIENT_SETTINGS = true;
     public boolean CHECK_CLIENT_BRAND = true;
+    public boolean CACHE_SUCCEED_USERS = true;
+    public int CAPTCHA_ATTEMPTS = 2;
+    public int NON_VALID_POSITION_XZ_ATTEMPTS = 10;
+    public int NON_VALID_POSITION_Y_ATTEMPTS = 10;
+    public int FALLING_CHECK_TICKS = 128;
+    public double MAX_VALID_POSITION_DIFFERENCE = 0.01;
+    public String BRAND = "ElytraProxy BotFilter";
+
+    @Comment("Available - ONLY_POSITION, ONLY_CAPTCHA, CAPTCHA_POSITION, CAPTCHA_ON_POSITION_FAILED, SUCCESSFULLY")
+    public String CHECK_STATE = "CAPTCHA_POSITION";
     @Comment({
         "If the player's nickname contains something from this list, hes connection will be rejected",
         "In lowercase"
@@ -197,16 +207,113 @@ public class Settings extends Config {
     public List<String> BANNED_NICK_PATTERNS = Arrays.asList(
         "dropbot", "mcspam", "mcdrop", "mcrage", "mcstorm", "extremebot", "cipher", "biboran"
     );
+
+    @Create
+    public ANTIBOT.CAPTCHA_GENERATOR CAPTCHA_GENERATOR;
+
+    public static class CAPTCHA_GENERATOR {
+      @Comment("Path to the background image to draw on captcha (any format, 128x128), none if empty")
+      public String BACKPLATE_PATH = "";
+      @Comment("Path to the font files to draw on captcha (ttf), can be empty")
+      public List<String> FONTS_PATH = List.of("");
+      @Comment("Use standard fonts(SANS_SERIF/SERIF/MONOSPACED), use false only if you provide fonts path")
+      public boolean USE_STANDARD_FONTS = true;
+      public int FONT_SIZE = 50;
+      public boolean FONT_OUTLINE = true;
+      public boolean FONT_ROTATE = true;
+      public boolean FONT_RIPPLE = true;
+      public boolean FONT_BLUR = true;
+      public String PATTERN = "abcdefghijklmnopqrtuvwxyz1234567890";
+      public int LENGTH = 3;
+    }
+
+    @Create
+    public ANTIBOT.BOTFILTER_DIMENSION BOTFILTER_DIMENSION;
+
+    public static class BOTFILTER_DIMENSION {
+      @Comment({
+          "Normal dimension - 0",
+          "Cave dimension - 1",
+          "Nether - 2",
+          "The end - 3",
+      })
+      public int ID = 3;
+      @Comment({
+          "Normal dimension - 0",
+          "The end - 1",
+          "Nether - 2"
+      })
+      public int LEGACY_ID = 1;
+      @Comment({
+          "Normal dimension - minecraft:overworld",
+          "Cave dimension - minecraft:overworld_caves",
+          "The end - minecraft:the_end",
+          "Nether - minecraft:nether"
+      })
+      public String MODERN_KEY = "minecraft:the_end";
+      public boolean HARDCORE_HEARTS = true;
+    }
+
+    @Create
+    public ANTIBOT.STRINGS STRINGS;
+
+    public static class STRINGS {
+      public String CHECKING = "{PRFX} Bot-Filter check was started, please wait..";
+      public String CHECKING_CAPTCHA = "{PRFX} Please, solve the captcha";
+      public String SUCCESSFUL = "{PRFX} Successfully passed Bot-Filter check. Please, rejoin the server";
+      public String CAPTCHA_FAILED = "{PRFX} You've mistaken in captcha check. Please, rejoin the server.";
+      public String TOO_BIG_PACKET = "{PRFX} Your client sent too big packet.";
+      public String FALLING_CHECK_FAILED = "{PRFX} Falling Check was failed. Please, rejoin the server.";
+    }
+
+    @Create
+    public ANTIBOT.CAPTCHA_COORDS CAPTCHA_COORDS;
+
+    public static class CAPTCHA_COORDS {
+      public int X = 0;
+      public int Y = 0;
+      public int Z = 0;
+    }
   }
 
-  /*
   @Create
   public AUTH AUTH;
 
   public static class AUTH {
     public boolean ENABLE = true;
-    public boolean ONLINE_MODE_REQUIRES_LOGIN = false;
+    public boolean ONLINE_MODE_NEED_AUTH = false;
+    public boolean CACHE_AUTH_USERS = true;
     public String TABLE = "auth";
+    public int BCRYPT_COST = 10;
+    public int LOGIN_ATTEMPTS = 3;
+    public int IP_LIMIT_REGISTRATIONS = 3;
+    @Comment("Time in milliseconds, when ip limit works")
+    public long IP_LIMIT_VALID_TIME = 21600000;
+    public String ALLOWED_NICKNAME_CHARS = "abcdefghijklmnopqrstuvwxyz_0123456789";
+
+    @Create
+    public AUTH.STRINGS STRINGS;
+
+    public static class STRINGS {
+      public String LOGIN = "{PRFX} Please, login using &a/l password";
+      public String PASSWORD_WRONG = "{PRFX} Password is wrong";
+      public String REGISTER = "{PRFX} Please, register using &a/reg password password";
+      public String NICKNAME_PREMIUM = "{PRFX} Your nickname is set on premium account. Please, change your nickname";
+      public String NICKNAME_INVALID = "{PRFX} Your nickname includes forbidden characters. Please, change your nickname";
+      public String IP_LIMIT = "{PRFX} Your IP has reached max registered accounts. If this is an error, restart your router, or wait about 6 hours";
+      public String SUCCESSFUL = "{PRFX} Registration completed successfully. Please rejoin";
+      public String UNREGISTER_USAGE = "{PRFX} Usage: /unregister <nickname>";
+      public String CHANGE_PASSWORD_USAGE = "{PRFX} Usage: /changepass <old password> <new password>";
+    }
+
+    @Create
+    public AUTH.AUTH_COORDS AUTH_COORDS;
+
+    public static class AUTH_COORDS {
+      public int X = 0;
+      public int Y = 0;
+      public int Z = 0;
+    }
   }
 
   @Create
@@ -214,16 +321,14 @@ public class Settings extends Config {
 
   @Comment("Database settings")
   public static class DATABASE {
-    //@Comment("Тип датабазы. mysql или mysql))")
-    //public String STORAGE_TYPE = "mysql";
-    @Comment("Settings for MYSQL")
-    public String HOSTNAME = "127.0.0.1";
-    public int PORT = 3306;
+    // @Comment("Тип базы данных, mysql или mysql))")
+    // public String STORAGE_TYPE = "mysql";
+    public boolean ENABLED = true;
+    public String HOSTNAME = "127.0.0.1:3306";
     public String USER = "user";
     public String PASSWORD = "password";
     public String DATABASE = "elytraproxy";
   }
-  */
 
   public void reload(File file) {
     load(file);
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/config/helpers/Configuration.java b/proxy/src/main/java/net/elytrium/elytraproxy/config/helpers/Configuration.java
index 00e952da..dff43f2b 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/config/helpers/Configuration.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/config/helpers/Configuration.java
@@ -63,8 +63,8 @@ public final class Configuration {
       String key = (entry.getKey() == null) ? "null" : entry.getKey().toString();
 
       if (entry.getValue() instanceof Map) {
-        this.self.put(key, new Configuration((Map) entry.getValue(),
-            (defaults == null) ? null : defaults.getSection(key)));
+        this.self
+            .put(key, new Configuration((Map) entry.getValue(), (defaults == null) ? null : defaults.getSection(key)));
       } else {
         this.self.put(key, entry.getValue());
       }
@@ -124,8 +124,7 @@ public final class Configuration {
 
   public void set(String path, Object value) {
     if (value instanceof Map) {
-      value = new Configuration((Map) value,
-          (defaults == null) ? null : defaults.getSection(path));
+      value = new Configuration((Map) value, (defaults == null) ? null : defaults.getSection(path));
     }
 
     Configuration section = getSectionFor(path);
@@ -143,9 +142,9 @@ public final class Configuration {
   /*------------------------------------------------------------------------*/
   public Configuration getSection(String path) {
     Object def = getDefault(path);
-    return (Configuration) get(path,
-        (def instanceof Configuration) ? def : new Configuration((
-            defaults == null) ? null : defaults.getSection(path)));
+    return (Configuration) get(path, (def instanceof Configuration)
+        ? def
+        : new Configuration((defaults == null) ? null : defaults.getSection(path)));
   }
 
   /**
@@ -338,6 +337,7 @@ public final class Configuration {
         result.add((Character) object);
       }
     }
+
     return result;
   }
 
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/config/helpers/ConfigurationProvider.java b/proxy/src/main/java/net/elytrium/elytraproxy/config/helpers/ConfigurationProvider.java
index f822dec9..34025952 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/config/helpers/ConfigurationProvider.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/config/helpers/ConfigurationProvider.java
@@ -43,8 +43,7 @@ import java.util.Map;
 
 public abstract class ConfigurationProvider {
 
-  private static final Map<Class<? extends ConfigurationProvider>,
-      ConfigurationProvider> providers = new HashMap<>();
+  private static final Map<Class<? extends ConfigurationProvider>, ConfigurationProvider> providers = new HashMap<>();
 
   static {
     try {
@@ -52,6 +51,12 @@ public abstract class ConfigurationProvider {
     } catch (NoClassDefFoundError ex) {
       // Ignore, no SnakeYAML
     }
+
+    try {
+      providers.put(JsonConfiguration.class, new JsonConfiguration());
+    } catch (NoClassDefFoundError ex) {
+      // Ignore, no Gson
+    }
   }
 
   public static ConfigurationProvider getProvider(Class<? extends ConfigurationProvider> provider) {
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/config/helpers/JsonConfiguration.java b/proxy/src/main/java/net/elytrium/elytraproxy/config/helpers/JsonConfiguration.java
new file mode 100644
index 00000000..90d42c71
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/config/helpers/JsonConfiguration.java
@@ -0,0 +1,131 @@
+/*
+ * This file is part of BungeeCord, licensed under the BSD License (BSD).
+ *
+ * Copyright (c) 2012 md_5
+ *
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ *     * Redistributions of source code must retain the above copyright notice,
+ *       this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright notice,
+ *       this list of conditions and the following disclaimer in the documentation
+ *       and/or other materials provided with the distribution.
+ *     * The name of the author may not be used to endorse or promote products derived
+ *       from this software without specific prior written permission.
+ *     * You may not use the software for commercial software hosting services without
+ *       written permission from the author.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package net.elytrium.elytraproxy.config.helpers;
+
+import com.google.common.base.Charsets;
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonSerializationContext;
+import com.google.gson.JsonSerializer;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.OutputStreamWriter;
+import java.io.Reader;
+import java.io.Writer;
+import java.lang.reflect.Type;
+import java.util.LinkedHashMap;
+import java.util.Map;
+import lombok.AccessLevel;
+import lombok.NoArgsConstructor;
+
+@NoArgsConstructor(access = AccessLevel.PACKAGE)
+public class JsonConfiguration extends ConfigurationProvider {
+
+  private final Gson json = new GsonBuilder().serializeNulls().setPrettyPrinting()
+      .registerTypeAdapter(Configuration.class, new JsonSerializer<Configuration>() {
+        @Override
+        public JsonElement serialize(Configuration src, Type typeOfSrc, JsonSerializationContext context) {
+          return context.serialize(((Configuration) src).self);
+        }
+      }).create();
+
+  @Override
+  public void save(Configuration config, File file) throws IOException {
+    try (Writer writer = new OutputStreamWriter(new FileOutputStream(file), Charsets.UTF_8)) {
+      save(config, writer);
+    }
+  }
+
+  @Override
+  public void save(Configuration config, Writer writer) {
+    json.toJson(config.self, writer);
+  }
+
+  @Override
+  public Configuration load(File file) throws IOException {
+    return load(file, null);
+  }
+
+  @Override
+  public Configuration load(File file, Configuration defaults) throws IOException {
+    try (FileInputStream is = new FileInputStream(file)) {
+      return load(is, defaults);
+    }
+  }
+
+  @Override
+  public Configuration load(Reader reader) {
+    return load(reader, null);
+  }
+
+  @Override
+  @SuppressWarnings("unchecked")
+  public Configuration load(Reader reader, Configuration defaults) {
+    Map<String, Object> map = json.fromJson(reader, LinkedHashMap.class);
+    if (map == null) {
+      map = new LinkedHashMap<>();
+    }
+    return new Configuration(map, defaults);
+  }
+
+  @Override
+  public Configuration load(InputStream is) {
+    return load(is, null);
+  }
+
+  @Override
+  public Configuration load(InputStream is, Configuration defaults) {
+    return load(new InputStreamReader(is, Charsets.UTF_8), defaults);
+  }
+
+  @Override
+  public Configuration load(String string) {
+    return load(string, null);
+  }
+
+  @Override
+  @SuppressWarnings("unchecked")
+  public Configuration load(String string, Configuration defaults) {
+    Map<String, Object> map = json.fromJson(string, LinkedHashMap.class);
+    if (map == null) {
+      map = new LinkedHashMap<>();
+    }
+    return new Configuration(map, defaults);
+  }
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/config/helpers/YamlConfiguration.java b/proxy/src/main/java/net/elytrium/elytraproxy/config/helpers/YamlConfiguration.java
index 5dad48c8..1bb31546 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/config/helpers/YamlConfiguration.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/config/helpers/YamlConfiguration.java
@@ -56,26 +56,23 @@ import org.yaml.snakeyaml.representer.Representer;
 @NoArgsConstructor(access = AccessLevel.PACKAGE)
 public class YamlConfiguration extends ConfigurationProvider {
 
-  private final ThreadLocal<Yaml> yaml = new ThreadLocal<Yaml>() {
-    @Override
-    protected Yaml initialValue() {
-      Representer representer = new Representer() {
-        {
-          representers.put(Configuration.class, new Represent() {
-            @Override
-            public Node representData(Object data) {
-              return represent(((Configuration) data).self);
-            }
-          });
-        }
-      };
-
-      DumperOptions options = new DumperOptions();
-      options.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);
-
-      return new Yaml(new Constructor(), representer, options);
-    }
-  };
+  private final ThreadLocal<Yaml> yaml = ThreadLocal.withInitial(() -> {
+    Representer representer = new Representer() {
+      {
+        representers.put(Configuration.class, new Represent() {
+          @Override
+          public Node representData(Object data) {
+            return represent(((Configuration) data).self);
+          }
+        });
+      }
+    };
+
+    DumperOptions options = new DumperOptions();
+    options.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);
+
+    return new Yaml(new Constructor(), representer, options);
+  });
 
   @Override
   public void save(Configuration config, File file) throws IOException {
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/database/Database.java b/proxy/src/main/java/net/elytrium/elytraproxy/database/Database.java
index 09325f56..a04b2e34 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/database/Database.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/database/Database.java
@@ -24,13 +24,17 @@ public abstract class Database {
 
   public abstract void query(String query);
 
+  public void makeTable(String table, DatabaseItem databaseItem) { // TODO: Auto make tables with @annotations
+    makeTable(table, databaseItem.getTableInfo(), databaseItem.getPrimaryKey());
+  }
+
   public abstract void makeTable(String table, Map<String, String> keys);
 
+  public abstract void makeTable(String table, Map<String, String> keys, String primaryKey);
+
   public abstract void insertMap(String table, Map<String, Object> toInsert, boolean update);
 
-  public abstract void updateMap(String table,
-                                 Map<String, Object> whereUpdate,
-                                 Map<String, Object> toUpdate);
+  public abstract void updateMap(String table, Map<String, Object> whereUpdate, Map<String, Object> toUpdate);
 
   public abstract void deleteMap(String table, Map<String, Object> whereDelete);
 
@@ -38,6 +42,8 @@ public abstract class Database {
 
   public abstract <T> T getItem(String table, Map<String, Object> where, Class<T> type);
 
+  public abstract <T> List<T> getItems(String table, Map<String, Object> where, Class<T> type);
+
   public abstract <T> List<T> getItems(String table, Class<T> type);
 
   public abstract <T> T queryResult(String query, Class<T> type);
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/database/DatabaseItem.java b/proxy/src/main/java/net/elytrium/elytraproxy/database/DatabaseItem.java
new file mode 100644
index 00000000..41e75f2c
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/database/DatabaseItem.java
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2021 Elytrium
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.database;
+
+import java.util.Map;
+import lombok.Getter;
+
+public class DatabaseItem {
+  @Getter private final Map<String, String> tableInfo;
+  @Getter private final String primaryKey;
+
+  public DatabaseItem(Map<String, String> tableInfo, String primaryKey) {
+    this.tableInfo = tableInfo;
+    this.primaryKey = primaryKey;
+  }
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/database/MySqlDatabase.java b/proxy/src/main/java/net/elytrium/elytraproxy/database/MySqlDatabase.java
index 1c705b50..e8844c94 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/database/MySqlDatabase.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/database/MySqlDatabase.java
@@ -38,16 +38,14 @@ public class MySqlDatabase extends Database {
 
   /**
    * Initializes and connects to MySQL Database.
-   * @param host Hostname to connect, with port
+   *
+   * @param host     Hostname to connect, with port
    * @param database Database name
-   * @param user Username
+   * @param user     Username
    * @param password Password of user
    * @throws SQLException Throws if connection was unsuccessful
    */
-  public MySqlDatabase(String host,
-                       String database,
-                       String user,
-                       String password) throws SQLException {
+  public MySqlDatabase(String host, String database, String user, String password) throws SQLException {
     String url = "jdbc:mysql://" + host + "/" + database
         + "?autoReconnect=true&cmaxReconnets=5&initialTimeout=1&useSSL=false";
 
@@ -67,39 +65,44 @@ public class MySqlDatabase extends Database {
     }
   }
 
+  @Override
+  public void makeTable(String table, Map<String, String> keys, String primaryKey) {
+    query("CREATE TABLE IF NOT EXISTS " + table + " ("
+        + joinStream(keys.entrySet().stream().map(e -> e.getKey() + " " + e.getValue()))
+        + ", PRIMARY KEY (" + primaryKey + "))");
+  }
+
   @Override
   public void makeTable(String table, Map<String, String> keys) {
     query("CREATE TABLE IF NOT EXISTS " + table + " ("
-        + keyFromStream(keys.entrySet().stream().map(e -> e.getKey() + " " + e.getValue())) + ")");
+        + joinStream(keys.entrySet().stream().map(e -> e.getKey() + " " + e.getValue())) + ")");
   }
 
   @Override
   public void insertMap(String table, Map<String, Object> toInsert, boolean update) {
-    String keyString = keyFromStream(toInsert.keySet().stream().map(s -> s));
+    String keyString = joinStream(toInsert.keySet().stream().map(s -> s));
     String valueString = keyFromStream(toInsert.values().stream());
 
-    String request = "INSERT INTO %s (%s) VALUES(%s)";
+    String request = "INSERT INTO " + table + " (" + keyString + ") VALUES(" + valueString + ")";
     if (update) {
       request += " ON DUPLICATE KEY UPDATE";
     }
 
-    query(String.format(request, table, keyString, valueString));
+    query(request);
   }
 
   @Override
-  public void updateMap(String table,
-                        Map<String, Object> whereUpdate,
-                        Map<String, Object> toUpdate) {
+  public void updateMap(String table, Map<String, Object> whereUpdate, Map<String, Object> toUpdate) {
     String where = entryFromStream(whereUpdate.entrySet().stream(), " AND ");
     String set = entryFromStream(toUpdate.entrySet().stream(), ", ");
 
-    query(String.format("UPDATE %s SET %s WHERE %s", table, set, where));
+    query("UPDATE " + table + " SET " + set + " WHERE " + where);
   }
 
   @Override
   public void deleteMap(String table, Map<String, Object> whereDelete) {
     String entryString = entryFromStream(whereDelete.entrySet().stream(), " AND ");
-    query(String.format("DELETE FROM %s WHERE %s", table, entryString));
+    query("DELETE FROM " + table + " WHERE " + entryString);
   }
 
   @Override
@@ -115,12 +118,18 @@ public class MySqlDatabase extends Database {
   @Override
   public <T> T getItem(String table, Map<String, Object> where, Class<T> type) {
     String entryString = entryFromStream(where.entrySet().stream(), " AND ");
-    return queryResult(String.format("SELECT * FROM %s WHERE %s", table, entryString), type);
+    return queryResult("SELECT * FROM " + table + " WHERE " + entryString, type);
   }
 
   @Override
   public <T> List<T> getItems(String table, Class<T> type) {
-    return queryResultList(String.format("SELECT * FROM %s", table), type);
+    return queryResultList("SELECT * FROM " + table, type);
+  }
+
+  @Override
+  public <T> List<T> getItems(String table, Map<String, Object> where, Class<T> type) {
+    String entryString = entryFromStream(where.entrySet().stream(), " AND ");
+    return queryResultList("SELECT * FROM " + table + " WHERE " + entryString, type);
   }
 
   @Override
@@ -171,11 +180,8 @@ public class MySqlDatabase extends Database {
   }
 
   private <T> Map<String, Object> serializeToMap(T from, Class<T> type)
-      throws NoSuchMethodException,
-      IllegalAccessException,
-      InvocationTargetException,
-      InstantiationException,
-      SQLException {
+      throws NoSuchMethodException, IllegalAccessException,
+      InvocationTargetException, InstantiationException, SQLException {
 
     Map<String, Object> map = new HashMap<>();
 
@@ -190,11 +196,8 @@ public class MySqlDatabase extends Database {
   }
 
   private <T> T serializeFromSet(ResultSet set, Class<T> type)
-      throws NoSuchMethodException,
-      IllegalAccessException,
-      InvocationTargetException,
-      InstantiationException,
-      SQLException {
+      throws NoSuchMethodException, IllegalAccessException,
+      InvocationTargetException, InstantiationException, SQLException {
 
     T result = type.getConstructor().newInstance();
 
@@ -208,15 +211,20 @@ public class MySqlDatabase extends Database {
     return result;
   }
 
-  private String keyFromStream(Stream<Object> stream) {
+  private String joinStream(Stream<Object> stream) {
     return stream
         .map(Object::toString)
         .collect(Collectors.joining(", "));
   }
 
+  private String keyFromStream(Stream<Object> stream) {
+    return joinStream(stream.map(e -> (e instanceof String) ? "\"" + e + "\"" : e));
+  }
+
   private String entryFromStream(Stream<Map.Entry<String, Object>> stream, String delimiter) {
     return stream
-        .map(entry -> entry.getKey() + " = " + entry.getValue())
+        .map(entry -> entry.getKey() + " = "
+            + ((entry.getValue() instanceof String) ? "\"" + entry.getValue() + "\"" : entry.getValue()))
         .collect(Collectors.joining(delimiter));
   }
 }
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/VirtualProtocol.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/VirtualProtocol.java
new file mode 100644
index 00000000..567c9ae8
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/VirtualProtocol.java
@@ -0,0 +1,174 @@
+/*
+ * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
+ *
+ * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.virtual.protocol;
+
+import static com.velocitypowered.proxy.protocol.StateRegistry.map;
+
+import com.velocitypowered.api.network.ProtocolVersion;
+import com.velocitypowered.proxy.protocol.StateRegistry;
+import com.velocitypowered.proxy.protocol.packet.Chat;
+import com.velocitypowered.proxy.protocol.packet.ClientSettings;
+import com.velocitypowered.proxy.protocol.packet.Disconnect;
+import com.velocitypowered.proxy.protocol.packet.JoinGame;
+import com.velocitypowered.proxy.protocol.packet.PluginMessage;
+import com.velocitypowered.proxy.protocol.packet.Respawn;
+import net.elytrium.elytraproxy.virtual.protocol.packet.MapDataPacket;
+import net.elytrium.elytraproxy.virtual.protocol.packet.Player;
+import net.elytrium.elytraproxy.virtual.protocol.packet.PlayerAbilities;
+import net.elytrium.elytraproxy.virtual.protocol.packet.PlayerPosition;
+import net.elytrium.elytraproxy.virtual.protocol.packet.PlayerPositionAndLook;
+import net.elytrium.elytraproxy.virtual.protocol.packet.SetExp;
+import net.elytrium.elytraproxy.virtual.protocol.packet.SetSlot;
+import net.elytrium.elytraproxy.virtual.protocol.packet.TeleportConfirm;
+import net.elytrium.elytraproxy.virtual.protocol.packet.world.ChunkData;
+
+public class VirtualProtocol {
+  public static void init() {
+    StateRegistry.VIRTUAL.serverbound.register(
+        TeleportConfirm.class, TeleportConfirm::new,
+        map(0x00, ProtocolVersion.MINECRAFT_1_9, true));
+    StateRegistry.VIRTUAL.serverbound.register(
+        PlayerPositionAndLook.class, PlayerPositionAndLook::new,
+        map(0x06, ProtocolVersion.MINECRAFT_1_7_2, false), //TODO: Right 1.7 value
+        map(0x06, ProtocolVersion.MINECRAFT_1_8, false),
+        map(0x0D, ProtocolVersion.MINECRAFT_1_9, false),
+        map(0x0F, ProtocolVersion.MINECRAFT_1_12, false),
+        map(0x0E, ProtocolVersion.MINECRAFT_1_12_1, false),
+        map(0x11, ProtocolVersion.MINECRAFT_1_13, false),
+        map(0x12, ProtocolVersion.MINECRAFT_1_14, false),
+        map(0x13, ProtocolVersion.MINECRAFT_1_16, false),
+        map(0x12, ProtocolVersion.MINECRAFT_1_17, false));
+    StateRegistry.VIRTUAL.serverbound.register(
+        PlayerPosition.class, PlayerPosition::new,
+        map(0x0B, ProtocolVersion.MINECRAFT_1_7_2, false), //TODO: Right 1.7 value
+        map(0x04, ProtocolVersion.MINECRAFT_1_7_6, false), //TODO: Right 1.7 value
+        map(0x04, ProtocolVersion.MINECRAFT_1_8, false),
+        map(0x0C, ProtocolVersion.MINECRAFT_1_9, false),
+        map(0x0E, ProtocolVersion.MINECRAFT_1_12, false),
+        map(0x0D, ProtocolVersion.MINECRAFT_1_12_1, false),
+        map(0x10, ProtocolVersion.MINECRAFT_1_13, false),
+        map(0x11, ProtocolVersion.MINECRAFT_1_14, false),
+        map(0x12, ProtocolVersion.MINECRAFT_1_16, false),
+        map(0x11, ProtocolVersion.MINECRAFT_1_17, false));
+    StateRegistry.VIRTUAL.serverbound.register(
+        Player.class, Player::new,
+        map(0x03, ProtocolVersion.MINECRAFT_1_7_2, false),
+        map(0x03, ProtocolVersion.MINECRAFT_1_8, false),
+        map(0x0F, ProtocolVersion.MINECRAFT_1_9, false),
+        map(0x0D, ProtocolVersion.MINECRAFT_1_12, false),
+        map(0x0C, ProtocolVersion.MINECRAFT_1_12_1, false),
+        map(0x0F, ProtocolVersion.MINECRAFT_1_13, false),
+        map(0x14, ProtocolVersion.MINECRAFT_1_14, false),
+        map(0x15, ProtocolVersion.MINECRAFT_1_16, false),
+        map(0x14, ProtocolVersion.MINECRAFT_1_17, false));
+    StateRegistry.VIRTUAL.clientbound.register(
+        PlayerPositionAndLook.class, PlayerPositionAndLook::new,
+        map(0x08, ProtocolVersion.MINECRAFT_1_7_2, true),
+        map(0x2E, ProtocolVersion.MINECRAFT_1_9, true),
+        map(0x2F, ProtocolVersion.MINECRAFT_1_12_1, true),
+        map(0x32, ProtocolVersion.MINECRAFT_1_13, true),
+        map(0x35, ProtocolVersion.MINECRAFT_1_14, true),
+        map(0x36, ProtocolVersion.MINECRAFT_1_15, true),
+        map(0x35, ProtocolVersion.MINECRAFT_1_16, true),
+        map(0x34, ProtocolVersion.MINECRAFT_1_16_2, true),
+        map(0x38, ProtocolVersion.MINECRAFT_1_17, true));
+    StateRegistry.VIRTUAL.clientbound.register(
+        ChunkData.class, ChunkData::new,
+        map(0x21, ProtocolVersion.MINECRAFT_1_7_2, true),
+        map(0x21, ProtocolVersion.MINECRAFT_1_8, true),
+        map(0x20, ProtocolVersion.MINECRAFT_1_9, true),
+        map(0x22, ProtocolVersion.MINECRAFT_1_13, true),
+        map(0x21, ProtocolVersion.MINECRAFT_1_14, true),
+        map(0x22, ProtocolVersion.MINECRAFT_1_15, true),
+        map(0x21, ProtocolVersion.MINECRAFT_1_16, true),
+        map(0x20, ProtocolVersion.MINECRAFT_1_16_2, true),
+        map(0x22, ProtocolVersion.MINECRAFT_1_17, true));
+    StateRegistry.VIRTUAL.clientbound.register(
+        SetSlot.class, SetSlot::new,
+        map(0x2F, ProtocolVersion.MINECRAFT_1_7_2, true),
+        map(0x2F, ProtocolVersion.MINECRAFT_1_8, true),
+        map(0x16, ProtocolVersion.MINECRAFT_1_9, true),
+        map(0x17, ProtocolVersion.MINECRAFT_1_13, true),
+        map(0x16, ProtocolVersion.MINECRAFT_1_14, true),
+        map(0x17, ProtocolVersion.MINECRAFT_1_15, true),
+        map(0x16, ProtocolVersion.MINECRAFT_1_16, true),
+        map(0x15, ProtocolVersion.MINECRAFT_1_16_2, true),
+        map(0x16, ProtocolVersion.MINECRAFT_1_17, true));
+    StateRegistry.VIRTUAL.clientbound.register(
+        MapDataPacket.class, MapDataPacket::new,
+        map(0x34, ProtocolVersion.MINECRAFT_1_7_2, true), //TODO: True 1.7 value
+        map(0x34, ProtocolVersion.MINECRAFT_1_8, true),
+        map(0x24, ProtocolVersion.MINECRAFT_1_9, true),
+        map(0x26, ProtocolVersion.MINECRAFT_1_13, true),
+        map(0x26, ProtocolVersion.MINECRAFT_1_14, true),
+        map(0x27, ProtocolVersion.MINECRAFT_1_15, true),
+        map(0x26, ProtocolVersion.MINECRAFT_1_16, true),
+        map(0x25, ProtocolVersion.MINECRAFT_1_16_2, true),
+        map(0x27, ProtocolVersion.MINECRAFT_1_17, true));
+    StateRegistry.VIRTUAL.clientbound.register(
+        PlayerAbilities.class, PlayerAbilities::new,
+        map(0x39, ProtocolVersion.MINECRAFT_1_7_2, true), //TODO: True 1.7 value
+        map(0x39, ProtocolVersion.MINECRAFT_1_8, true),
+        map(0x2B, ProtocolVersion.MINECRAFT_1_9, true),
+        map(0x2C, ProtocolVersion.MINECRAFT_1_12_1, true),
+        map(0x2E, ProtocolVersion.MINECRAFT_1_13, true),
+        map(0x31, ProtocolVersion.MINECRAFT_1_14, true),
+        map(0x32, ProtocolVersion.MINECRAFT_1_15, true),
+        map(0x31, ProtocolVersion.MINECRAFT_1_16, true),
+        map(0x30, ProtocolVersion.MINECRAFT_1_16_2, true),
+        map(0x32, ProtocolVersion.MINECRAFT_1_17, true));
+    StateRegistry.VIRTUAL.clientbound.register(
+        SetExp.class, SetExp::new,
+        map(0x2B, ProtocolVersion.MINECRAFT_1_7_2, true),
+        map(0x1F, ProtocolVersion.MINECRAFT_1_8, true),
+        map(0x3D, ProtocolVersion.MINECRAFT_1_9, true),
+        map(0x3F, ProtocolVersion.MINECRAFT_1_12, true),
+        map(0x40, ProtocolVersion.MINECRAFT_1_12_1, true),
+        map(0x43, ProtocolVersion.MINECRAFT_1_13, true),
+        map(0x47, ProtocolVersion.MINECRAFT_1_14, true),
+        map(0x48, ProtocolVersion.MINECRAFT_1_15, true),
+        map(0x51, ProtocolVersion.MINECRAFT_1_17, true));
+
+    StateRegistry.VIRTUAL.serverbound.register(
+        Chat.class, Chat::new,
+        StateRegistry.PLAY.serverbound.getMappingsForPacket(Chat.class, false));
+    StateRegistry.VIRTUAL.serverbound.register(
+        ClientSettings.class, ClientSettings::new,
+        StateRegistry.PLAY.serverbound.getMappingsForPacket(ClientSettings.class, false));
+    StateRegistry.VIRTUAL.serverbound.register(
+        PluginMessage.class, PluginMessage::new,
+        StateRegistry.PLAY.serverbound.getMappingsForPacket(PluginMessage.class, false));
+    StateRegistry.VIRTUAL.clientbound.register(
+        Chat.class, Chat::new,
+        StateRegistry.PLAY.clientbound.getMappingsForPacket(Chat.class, true));
+    StateRegistry.VIRTUAL.clientbound.register(
+        JoinGame.class, JoinGame::new,
+        StateRegistry.PLAY.clientbound.getMappingsForPacket(JoinGame.class, true));
+    StateRegistry.VIRTUAL.clientbound.register(
+        Disconnect.class, Disconnect::new,
+        StateRegistry.PLAY.clientbound.getMappingsForPacket(Disconnect.class, true));
+    StateRegistry.VIRTUAL.clientbound.register(
+        PluginMessage.class, PluginMessage::new,
+        StateRegistry.PLAY.clientbound.getMappingsForPacket(PluginMessage.class, true));
+    StateRegistry.VIRTUAL.clientbound.register(
+        Respawn.class, Respawn::new,
+        StateRegistry.PLAY.clientbound.getMappingsForPacket(Respawn.class, true));
+  }
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/data/registry/Biome.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/registry/Biome.java
similarity index 79%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/data/registry/Biome.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/registry/Biome.java
index fb35f4d1..be9a81b8 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/data/registry/Biome.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/registry/Biome.java
@@ -17,34 +17,47 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.protocol.data.registry;
+package net.elytrium.elytraproxy.virtual.protocol.data.registry;
 
+import com.google.common.collect.ImmutableList;
+import java.util.List;
+import java.util.stream.Collectors;
 import javax.annotation.Nullable;
 import lombok.Data;
 import lombok.NonNull;
 import lombok.RequiredArgsConstructor;
+import net.elytrium.elytraproxy.virtual.protocol.data.registry.Biome.Effects.MoodSound;
 import net.kyori.adventure.nbt.CompoundBinaryTag;
 import net.kyori.adventure.nbt.CompoundBinaryTag.Builder;
-import net.elytrium.elytraproxy.botfilter.protocol.data.registry.Biome.Effects.MoodSound;
+import net.kyori.adventure.nbt.ListBinaryTag;
 
 public class Biome {
 
-  public static final Biome PLAINTS = new Biome("minecraft:plains", 1,
+  public static final Biome PLAINS = new Biome("minecraft:plains", 1,
       new Element("rain", 0.125f, 0.8f, 0.05f, 0.4f, "plains",
           Effects.builder(7907327, 329011, 12638463, 415920)
-              .moodSound(MoodSound.of(6000, 2.0d, 8, "minecraft:ambient.cave")).build()));
+              .moodSound(MoodSound.of(6000, 2.0d, 8, "minecraft:ambient.cave"))
+              .build())
+  );
 
   public static final Biome SWAMP = new Biome("minecraft:swamp", 6,
       new Element("rain", -0.2F, 0.8f, 0.1F, 0.9F, "swamp",
           Effects.builder(7907327, 329011, 12638463, 415920).grassColorModifier("swamp")
               .foliageColor(6975545)
-              .moodSound(MoodSound.of(6000, 2.0d, 8, "minecraft:ambient.cave")).build()));
+              .moodSound(MoodSound.of(6000, 2.0d, 8, "minecraft:ambient.cave"))
+              .build())
+  );
 
   public static final Biome SWAMP_HILLS = new Biome("minecraft:swamp_hills", 134,
       new Element("rain", -0.1F, 0.8f, 0.3F, 0.9F, "swamp",
           Effects.builder(7907327, 329011, 12638463, 415920).grassColorModifier("swamp")
               .foliageColor(6975545)
-              .moodSound(MoodSound.of(6000, 2.0d, 8, "minecraft:ambient.cave")).build()));
+              .moodSound(MoodSound.of(6000, 2.0d, 8, "minecraft:ambient.cave"))
+              .build())
+  );
+
+  public static final List<Biome> REGISTERED_BIOMES = ImmutableList.of(PLAINS);
+
   public final String name;
   public final int id;
   public final Element element;
@@ -62,6 +75,14 @@ public class Biome {
         .put("element", element.encode()).build();
   }
 
+  public static CompoundBinaryTag getRegistry() {
+    return CompoundBinaryTag.builder()
+        .putString("type", "minecraft:worldgen/biome")
+        .put("value", ListBinaryTag
+            .from(REGISTERED_BIOMES.stream().map(Biome::encodeBiome)
+                .collect(Collectors.toList()))).build();
+  }
+
   public static class Element {
 
     public final String precipitation;
@@ -72,9 +93,8 @@ public class Biome {
     public final String category;
     public final Effects effects;
 
-    public Element(String precipitation, float depth, float temperature, float scale,
-        float downfall,
-        String category, Effects effects) {
+    public Element(String precipitation, float depth, float temperature,
+                   float scale, float downfall, String category, Effects effects) {
       this.precipitation = precipitation;
       this.depth = depth;
       this.temperature = temperature;
@@ -106,13 +126,20 @@ public class Biome {
     private final int fogColor;
     private final int waterColor;
 
-    @Nullable private final Integer foliageColor;
-    @Nullable private final String grassColorModifier;
-    @Nullable private final Music music;
-    @Nullable private final String ambientSound;
-    @Nullable private final AdditionsSound additionsSound;
-    @Nullable private final MoodSound moodSound;
-    @Nullable private final Particle particle;
+    @Nullable
+    private final Integer foliageColor;
+    @Nullable
+    private final String grassColorModifier;
+    @Nullable
+    private final Music music;
+    @Nullable
+    private final String ambientSound;
+    @Nullable
+    private final AdditionsSound additionsSound;
+    @Nullable
+    private final MoodSound moodSound;
+    @Nullable
+    private final Particle particle;
 
     public CompoundBinaryTag encode() {
       Builder result = CompoundBinaryTag.builder();
@@ -145,8 +172,7 @@ public class Biome {
       return result.build();
     }
 
-    public static EffectsBuilder builder(int skyColor, int waterFogColor, int fogColor,
-        int waterColor) {
+    public static EffectsBuilder builder(int skyColor, int waterFogColor, int fogColor, int waterColor) {
       return new EffectsBuilder().skyColor(skyColor).waterFogColor(waterFogColor).fogColor(fogColor)
           .waterColor(waterColor);
     }
@@ -158,7 +184,8 @@ public class Biome {
       private final int tickDelay;
       private final double offset;
       private final int blockSearchExtent;
-      @NonNull private final String sound;
+      @NonNull
+      private final String sound;
 
       public CompoundBinaryTag encode() {
         return CompoundBinaryTag.builder()
@@ -174,7 +201,8 @@ public class Biome {
     public static class Music {
 
       private final boolean replaceCurrentMusic;
-      @NonNull private final String sound;
+      @NonNull
+      private final String sound;
       private final int maxDelay;
       private final int minDelay;
 
@@ -191,7 +219,8 @@ public class Biome {
     @RequiredArgsConstructor(staticName = "of")
     public static class AdditionsSound {
 
-      @NonNull private final String sound;
+      @NonNull
+      private final String sound;
       private final double tickChance;
 
       public CompoundBinaryTag encode() {
@@ -206,7 +235,8 @@ public class Biome {
     public static class Particle {
 
       private final float probability;
-      @NonNull private final ParticleOptions options;
+      @NonNull
+      private final ParticleOptions options;
 
       public CompoundBinaryTag encode() {
         return CompoundBinaryTag.builder()
@@ -218,7 +248,8 @@ public class Biome {
       @RequiredArgsConstructor
       public static class ParticleOptions {
 
-        @NonNull private final String type;
+        @NonNull
+        private final String type;
 
         public CompoundBinaryTag encode() {
           return CompoundBinaryTag.builder()
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/data/storage/BlockStorage.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/storage/BlockStorage.java
similarity index 88%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/data/storage/BlockStorage.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/storage/BlockStorage.java
index 8f207fa2..7b796797 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/data/storage/BlockStorage.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/storage/BlockStorage.java
@@ -17,14 +17,14 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.protocol.data.storage;
+package net.elytrium.elytraproxy.virtual.protocol.data.storage;
 
 import com.velocitypowered.api.network.ProtocolVersion;
 import io.netty.buffer.ByteBuf;
 import lombok.NonNull;
+import net.elytrium.elytraproxy.virtual.server.world.SimpleBlock;
+import net.elytrium.elytraproxy.virtual.server.world.SimpleBlock.Version;
 import org.jetbrains.annotations.NotNull;
-import net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock;
-import net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.Version;
 
 public interface BlockStorage {
 
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/data/storage/BlockStorage17.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/storage/BlockStorage17.java
similarity index 90%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/data/storage/BlockStorage17.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/storage/BlockStorage17.java
index 755d5a11..2d4801fa 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/data/storage/BlockStorage17.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/storage/BlockStorage17.java
@@ -17,7 +17,7 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.protocol.data.storage;
+package net.elytrium.elytraproxy.virtual.protocol.data.storage;
 
 import com.velocitypowered.api.network.ProtocolVersion;
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
@@ -26,11 +26,11 @@ import java.util.Arrays;
 import lombok.AccessLevel;
 import lombok.NonNull;
 import lombok.RequiredArgsConstructor;
+import net.elytrium.elytraproxy.virtual.protocol.util.mcprotocollib.NibbleArray3d;
+import net.elytrium.elytraproxy.virtual.server.world.SimpleBlock;
+import net.elytrium.elytraproxy.virtual.server.world.SimpleBlock.Version;
+import net.elytrium.elytraproxy.virtual.server.world.chunk.SimpleChunk;
 import org.jetbrains.annotations.NotNull;
-import net.elytrium.elytraproxy.botfilter.protocol.util.mcprotocollib.NibbleArray3d;
-import net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock;
-import net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.Version;
-import net.elytrium.elytraproxy.botfilter.server.world.chunk.SimpleChunk;
 
 @RequiredArgsConstructor(access = AccessLevel.PRIVATE)
 public class BlockStorage17 implements BlockStorage {
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/data/storage/BlockStorage19.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/storage/BlockStorage19.java
similarity index 91%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/data/storage/BlockStorage19.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/storage/BlockStorage19.java
index 708be90c..f898ed14 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/data/storage/BlockStorage19.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/storage/BlockStorage19.java
@@ -17,7 +17,7 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.protocol.data.storage;
+package net.elytrium.elytraproxy.virtual.protocol.data.storage;
 
 import com.velocitypowered.api.network.ProtocolVersion;
 import com.velocitypowered.proxy.protocol.ProtocolUtils;
@@ -30,13 +30,13 @@ import java.util.Map;
 import lombok.AccessLevel;
 import lombok.AllArgsConstructor;
 import lombok.NonNull;
+import net.elytrium.elytraproxy.virtual.protocol.util.CompactStorage;
+import net.elytrium.elytraproxy.virtual.protocol.util.mcprotocollib.BitStorage116;
+import net.elytrium.elytraproxy.virtual.protocol.util.mcprotocollib.BitStorage19;
+import net.elytrium.elytraproxy.virtual.server.world.SimpleBlock;
+import net.elytrium.elytraproxy.virtual.server.world.SimpleBlock.Version;
+import net.elytrium.elytraproxy.virtual.server.world.chunk.SimpleChunk;
 import org.jetbrains.annotations.NotNull;
-import net.elytrium.elytraproxy.botfilter.protocol.util.CompactStorage;
-import net.elytrium.elytraproxy.botfilter.protocol.util.mcprotocollib.BitStorage116;
-import net.elytrium.elytraproxy.botfilter.protocol.util.mcprotocollib.BitStorage19;
-import net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock;
-import net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.Version;
-import net.elytrium.elytraproxy.botfilter.server.world.chunk.SimpleChunk;
 
 @AllArgsConstructor(access = AccessLevel.PRIVATE)
 public class BlockStorage19 implements BlockStorage {
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/MapDataPacket.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/MapDataPacket.java
new file mode 100644
index 00000000..8d00e584
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/MapDataPacket.java
@@ -0,0 +1,74 @@
+/*
+ * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
+ *
+ * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.virtual.protocol.packet;
+
+import com.velocitypowered.api.network.ProtocolVersion;
+import com.velocitypowered.proxy.protocol.MinecraftPacket;
+import com.velocitypowered.proxy.protocol.ProtocolUtils;
+import io.netty.buffer.ByteBuf;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.EqualsAndHashCode;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@EqualsAndHashCode(callSuper = false)
+public class MapDataPacket implements MinecraftPacket {
+
+  private int mapId;
+  private byte scale;
+  private MapData data;
+
+  @Override
+  public void encode(ByteBuf buf, ProtocolUtils.Direction direction, ProtocolVersion version) {
+    ProtocolUtils.writeVarInt(buf, this.mapId);
+    buf.writeByte(this.scale);
+    if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_9)
+        && version.isBefore(ProtocolVersion.MINECRAFT_1_17)) {
+      buf.writeBoolean(false);
+    }
+    if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_14)) {
+      buf.writeBoolean(false);
+    }
+    if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_17)) {
+      buf.writeBoolean(false);
+    } else {
+      ProtocolUtils.writeVarInt(buf, 0);
+    }
+    buf.writeByte(data.getColumns());
+    buf.writeByte(data.getRows());
+    buf.writeByte(data.getX());
+    buf.writeByte(data.getY());
+    ProtocolUtils.writeByteArray(buf, data.getData());
+  }
+
+  @AllArgsConstructor
+  @Getter
+  public static class MapData {
+    private final int columns;
+    private final int rows;
+    private final int x;
+    private final int y;
+    private final byte[] data;
+  }
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/Player.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/Player.java
new file mode 100644
index 00000000..b0d2521e
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/Player.java
@@ -0,0 +1,51 @@
+/*
+ * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
+ *
+ * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.virtual.protocol.packet;
+
+import com.velocitypowered.api.network.ProtocolVersion;
+import com.velocitypowered.proxy.connection.MinecraftSessionHandler;
+import com.velocitypowered.proxy.protocol.MinecraftPacket;
+import com.velocitypowered.proxy.protocol.ProtocolUtils;
+import io.netty.buffer.ByteBuf;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.EqualsAndHashCode;
+import lombok.NoArgsConstructor;
+import net.elytrium.elytraproxy.virtual.server.VirtualSessionHandler;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@EqualsAndHashCode(callSuper = false)
+public class Player implements MinecraftPacket {
+
+  private boolean onGround;
+
+  @Override
+  public void decode(ByteBuf buf, ProtocolUtils.Direction direction, ProtocolVersion protocolVersion) {
+    this.onGround = buf.readBoolean();
+  }
+
+  @Override
+  public boolean handle(MinecraftSessionHandler handler) {
+    ((VirtualSessionHandler) handler).handle(this);
+    return false;
+  }
+}
\ No newline at end of file
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/UpdateViewPosition.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/PlayerAbilities.java
similarity index 65%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/UpdateViewPosition.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/PlayerAbilities.java
index 4e17995a..5101c6dd 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/UpdateViewPosition.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/PlayerAbilities.java
@@ -17,32 +17,37 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.protocol.packet;
+package net.elytrium.elytraproxy.virtual.protocol.packet;
 
 import com.velocitypowered.api.network.ProtocolVersion;
+import com.velocitypowered.proxy.connection.MinecraftSessionHandler;
 import com.velocitypowered.proxy.protocol.MinecraftPacket;
 import com.velocitypowered.proxy.protocol.ProtocolUtils;
-import com.velocitypowered.proxy.protocol.ProtocolUtils.Direction;
 import io.netty.buffer.ByteBuf;
 import lombok.AllArgsConstructor;
-import lombok.Getter;
+import lombok.Data;
+import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
-import lombok.Setter;
-import lombok.ToString;
 
-@Getter
-@Setter
-@AllArgsConstructor
+@Data
 @NoArgsConstructor
-@ToString
-public class UpdateViewPosition implements MinecraftPacket {
+@AllArgsConstructor
+@EqualsAndHashCode(callSuper = false)
+public class PlayerAbilities implements MinecraftPacket {
+
+  byte flags;
+  float speed;
+  float field;
 
-  private int chunkX;
-  private int chunkZ;
+  @Override
+  public void encode(ByteBuf buf, ProtocolUtils.Direction direction, ProtocolVersion protocolVersion) {
+    buf.writeByte(this.flags);
+    buf.writeFloat(this.speed);
+    buf.writeFloat(this.field);
+  }
 
   @Override
-  public void encode(ByteBuf buf, Direction direction, ProtocolVersion protocolVersion) {
-    ProtocolUtils.writeVarInt(buf, chunkX);
-    ProtocolUtils.writeVarInt(buf, chunkZ);
+  public boolean handle(MinecraftSessionHandler handler) {
+    return false;
   }
 }
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/PlayerPosition.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/PlayerPosition.java
new file mode 100644
index 00000000..2d65f5fe
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/PlayerPosition.java
@@ -0,0 +1,56 @@
+/*
+ * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
+ *
+ * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.virtual.protocol.packet;
+
+import com.velocitypowered.api.network.ProtocolVersion;
+import com.velocitypowered.proxy.connection.MinecraftSessionHandler;
+import com.velocitypowered.proxy.protocol.MinecraftPacket;
+import com.velocitypowered.proxy.protocol.ProtocolUtils;
+import io.netty.buffer.ByteBuf;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.EqualsAndHashCode;
+import lombok.NoArgsConstructor;
+import net.elytrium.elytraproxy.virtual.server.VirtualSessionHandler;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@EqualsAndHashCode(callSuper = false)
+public class PlayerPosition implements MinecraftPacket {
+
+  private double x;
+  private double y;
+  private double z;
+  private boolean onGround;
+
+  @Override
+  public void decode(ByteBuf buf, ProtocolUtils.Direction direction, ProtocolVersion protocolVersion) {
+    this.x = buf.readDouble();
+    this.y = buf.readDouble();
+    this.z = buf.readDouble();
+    this.onGround = buf.readBoolean();
+  }
+
+  @Override
+  public boolean handle(MinecraftSessionHandler handler) {
+    return ((VirtualSessionHandler) handler).handle(this);
+  }
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/PlayerPositionAndLook.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/PlayerPositionAndLook.java
similarity index 93%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/PlayerPositionAndLook.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/PlayerPositionAndLook.java
index 23f3a7cb..6c75fd27 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/PlayerPositionAndLook.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/PlayerPositionAndLook.java
@@ -17,7 +17,7 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.protocol.packet;
+package net.elytrium.elytraproxy.virtual.protocol.packet;
 
 import com.velocitypowered.api.network.ProtocolVersion;
 import com.velocitypowered.proxy.connection.MinecraftSessionHandler;
@@ -30,6 +30,7 @@ import lombok.Getter;
 import lombok.NoArgsConstructor;
 import lombok.Setter;
 import lombok.ToString;
+import net.elytrium.elytraproxy.virtual.server.VirtualSessionHandler;
 
 @Getter
 @Setter
@@ -83,6 +84,6 @@ public class PlayerPositionAndLook implements MinecraftPacket {
 
   @Override
   public boolean handle(MinecraftSessionHandler handler) {
-    return handler.handle(this);
+    return ((VirtualSessionHandler) handler).handle(this);
   }
 }
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/SetExp.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/SetExp.java
new file mode 100644
index 00000000..db09ae96
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/SetExp.java
@@ -0,0 +1,59 @@
+/*
+ * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
+ *
+ * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.virtual.protocol.packet;
+
+import com.velocitypowered.api.network.ProtocolVersion;
+import com.velocitypowered.proxy.connection.MinecraftSessionHandler;
+import com.velocitypowered.proxy.protocol.MinecraftPacket;
+import com.velocitypowered.proxy.protocol.ProtocolUtils;
+import io.netty.buffer.ByteBuf;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.EqualsAndHashCode;
+import lombok.NoArgsConstructor;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@EqualsAndHashCode(callSuper = false)
+public class SetExp implements MinecraftPacket {
+
+  float expBar;
+  int level;
+  int totalExp;
+
+  @Override
+  public void encode(ByteBuf buf, ProtocolUtils.Direction direction, ProtocolVersion protocolVersion) {
+    if (protocolVersion.isAfterOrEq(ProtocolVersion.MINECRAFT_1_8)) {
+      buf.writeFloat(this.expBar);
+      ProtocolUtils.writeVarInt(buf, this.level);
+      ProtocolUtils.writeVarInt(buf, this.totalExp);
+    } else {
+      buf.writeByte((int) this.expBar); // or? buf.writeFloat(this.expBar);
+      buf.writeByte(this.level); // or? buf.writeShort(this.level);
+      buf.writeShort(this.totalExp);
+    }
+  }
+
+  @Override
+  public boolean handle(MinecraftSessionHandler handler) {
+    return true;
+  }
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/SetSlot.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/SetSlot.java
new file mode 100644
index 00000000..37e7796a
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/SetSlot.java
@@ -0,0 +1,98 @@
+/*
+ * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
+ *
+ * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.virtual.protocol.packet;
+
+import com.velocitypowered.api.network.ProtocolVersion;
+import com.velocitypowered.proxy.protocol.MinecraftPacket;
+import com.velocitypowered.proxy.protocol.ProtocolUtils;
+import io.netty.buffer.ByteBuf;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.EqualsAndHashCode;
+import lombok.NoArgsConstructor;
+import net.kyori.adventure.nbt.CompoundBinaryTag;
+import net.kyori.adventure.nbt.IntBinaryTag;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@EqualsAndHashCode(callSuper = false)
+public class SetSlot implements MinecraftPacket {
+
+  private int windowId;
+  private int slot;
+  private int item;
+  private int count;
+  private int data;
+
+  @Override
+  public void encode(ByteBuf buf, ProtocolUtils.Direction direction, ProtocolVersion version) {
+    buf.writeByte(this.windowId);
+    if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_17_1)) {
+      ProtocolUtils.writeVarInt(buf, 0);
+    }
+    buf.writeShort(this.slot);
+    int id = this.item == 358 ? getCaptchaId(version) : this.item;
+    boolean present = id > 0;
+
+    if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_13_2)) {
+      buf.writeBoolean(present);
+    }
+
+    if (!present && version.isBefore(ProtocolVersion.MINECRAFT_1_13_2)) {
+      buf.writeShort(-1);
+    }
+
+    if (present) {
+      if (version.isBefore(ProtocolVersion.MINECRAFT_1_13_2)) {
+        buf.writeShort(id);
+      } else {
+        ProtocolUtils.writeVarInt(buf, id);
+      }
+      buf.writeByte(this.count);
+      if (version.isBefore(ProtocolVersion.MINECRAFT_1_13)) {
+        buf.writeShort(this.data);
+      }
+
+      if (version.isBefore(ProtocolVersion.MINECRAFT_1_17)) {
+        buf.writeByte(0); //No Nbt
+      } else {
+        CompoundBinaryTag nbt = CompoundBinaryTag.builder().put("map", IntBinaryTag.of(0)).build();
+        ProtocolUtils.writeCompoundTag(buf, nbt);
+      }
+    }
+  }
+
+  private int getCaptchaId(ProtocolVersion version) {
+    if (version.isBeforeOrEq(ProtocolVersion.MINECRAFT_1_12_2)) {
+      return 358;
+    } else if (version.equals(ProtocolVersion.MINECRAFT_1_13)) {
+      return 608;
+    } else if (version.isBeforeOrEq(ProtocolVersion.MINECRAFT_1_13_2)) {
+      return 613;
+    } else if (version.isBeforeOrEq(ProtocolVersion.MINECRAFT_1_15_2)) {
+      return 671;
+    } else if (version.isBeforeOrEq(ProtocolVersion.MINECRAFT_1_16_4)) {
+      return 733;
+    } else {
+      return 847;
+    }
+  }
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/TeleportConfirm.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/TeleportConfirm.java
new file mode 100644
index 00000000..e3af0ac8
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/TeleportConfirm.java
@@ -0,0 +1,50 @@
+/*
+ * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
+ *
+ * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.virtual.protocol.packet;
+
+import com.velocitypowered.api.network.ProtocolVersion;
+import com.velocitypowered.proxy.connection.MinecraftSessionHandler;
+import com.velocitypowered.proxy.protocol.MinecraftPacket;
+import com.velocitypowered.proxy.protocol.ProtocolUtils;
+import io.netty.buffer.ByteBuf;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.EqualsAndHashCode;
+import lombok.NoArgsConstructor;
+import net.elytrium.elytraproxy.virtual.server.VirtualSessionHandler;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@EqualsAndHashCode(callSuper = false)
+public class TeleportConfirm implements MinecraftPacket {
+
+  int teleportId;
+
+  @Override
+  public void decode(ByteBuf buf, ProtocolUtils.Direction direction, ProtocolVersion protocolVersion) {
+    teleportId = ProtocolUtils.readVarInt(buf);
+  }
+
+  @Override
+  public boolean handle(MinecraftSessionHandler handler) {
+    return ((VirtualSessionHandler) handler).handle(this);
+  }
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/world/ChunkData.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/world/ChunkData.java
similarity index 90%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/world/ChunkData.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/world/ChunkData.java
index 3b4b1af0..2381cb65 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/world/ChunkData.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/world/ChunkData.java
@@ -17,7 +17,7 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.protocol.packet.world;
+package net.elytrium.elytraproxy.virtual.protocol.packet.world;
 
 import com.google.common.base.Preconditions;
 import com.velocitypowered.api.network.ProtocolVersion;
@@ -36,16 +36,16 @@ import java.util.Map;
 import java.util.Map.Entry;
 import java.util.zip.Deflater;
 import lombok.Getter;
-import net.elytrium.elytraproxy.botfilter.protocol.data.registry.Biome;
+import net.elytrium.elytraproxy.virtual.protocol.data.registry.Biome;
+import net.elytrium.elytraproxy.virtual.protocol.util.CompactStorage;
+import net.elytrium.elytraproxy.virtual.protocol.util.NetworkSection;
+import net.elytrium.elytraproxy.virtual.protocol.util.mcprotocollib.BitStorage116;
+import net.elytrium.elytraproxy.virtual.protocol.util.mcprotocollib.BitStorage19;
+import net.elytrium.elytraproxy.virtual.server.world.SimpleBlock;
+import net.elytrium.elytraproxy.virtual.server.world.chunk.ChunkSnapshot;
+import net.elytrium.elytraproxy.virtual.server.world.chunk.LightSection;
+import net.elytrium.elytraproxy.virtual.server.world.chunk.SimpleChunk;
 import net.kyori.adventure.nbt.CompoundBinaryTag;
-import net.elytrium.elytraproxy.botfilter.protocol.util.CompactStorage;
-import net.elytrium.elytraproxy.botfilter.protocol.util.NetworkSection;
-import net.elytrium.elytraproxy.botfilter.protocol.util.mcprotocollib.BitStorage116;
-import net.elytrium.elytraproxy.botfilter.protocol.util.mcprotocollib.BitStorage19;
-import net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock;
-import net.elytrium.elytraproxy.botfilter.server.world.chunk.ChunkSnapshot;
-import net.elytrium.elytraproxy.botfilter.server.world.chunk.LightSection;
-import net.elytrium.elytraproxy.botfilter.server.world.chunk.SimpleChunk;
 
 public class ChunkData implements MinecraftPacket {
 
@@ -89,8 +89,8 @@ public class ChunkData implements MinecraftPacket {
     if (version.isBefore(ProtocolVersion.MINECRAFT_1_17)) {
       buf.writeBoolean(chunk.isFullChunk());
 
-      if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_16) &&
-          version.isBefore(ProtocolVersion.MINECRAFT_1_16_2)) {
+      if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_16)
+          && version.isBefore(ProtocolVersion.MINECRAFT_1_16_2)) {
         buf.writeBoolean(true); //ignore old data
       }
 
@@ -203,7 +203,7 @@ public class ChunkData implements MinecraftPacket {
   }
 
   private long[] create117Mask() {
-    BitSet bitSet = BitSet.valueOf(new long[]{mask});
+    BitSet bitSet = BitSet.valueOf(new long[] {mask});
     return bitSet.toLongArray();
   }
 
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/util/CompactStorage.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/CompactStorage.java
similarity index 95%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/util/CompactStorage.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/CompactStorage.java
index 0be862f1..aca3b339 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/util/CompactStorage.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/CompactStorage.java
@@ -17,7 +17,7 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.protocol.util;
+package net.elytrium.elytraproxy.virtual.protocol.util;
 
 import com.velocitypowered.api.network.ProtocolVersion;
 import io.netty.buffer.ByteBuf;
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/util/NetworkSection.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/NetworkSection.java
similarity index 90%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/util/NetworkSection.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/NetworkSection.java
index f4fa8d89..7c7ad844 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/util/NetworkSection.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/NetworkSection.java
@@ -17,18 +17,18 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.protocol.util;
+package net.elytrium.elytraproxy.virtual.protocol.util;
 
 import com.velocitypowered.api.network.ProtocolVersion;
 import io.netty.buffer.ByteBuf;
 import java.util.EnumMap;
 import java.util.Map;
 import lombok.NonNull;
-import net.elytrium.elytraproxy.botfilter.protocol.data.storage.BlockStorage;
-import net.elytrium.elytraproxy.botfilter.protocol.util.mcprotocollib.NibbleArray3d;
-import net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock;
-import net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.Version;
-import net.elytrium.elytraproxy.botfilter.server.world.chunk.SimpleSection;
+import net.elytrium.elytraproxy.virtual.protocol.data.storage.BlockStorage;
+import net.elytrium.elytraproxy.virtual.protocol.util.mcprotocollib.NibbleArray3d;
+import net.elytrium.elytraproxy.virtual.server.world.SimpleBlock;
+import net.elytrium.elytraproxy.virtual.server.world.SimpleBlock.Version;
+import net.elytrium.elytraproxy.virtual.server.world.chunk.SimpleSection;
 
 public class NetworkSection {
 
@@ -38,8 +38,7 @@ public class NetworkSection {
   private final SimpleSection section;
   private int blockCount = -1;
 
-  public NetworkSection(SimpleSection section, @NonNull NibbleArray3d blockLight,
-      NibbleArray3d skyLight) {
+  public NetworkSection(SimpleSection section, @NonNull NibbleArray3d blockLight, NibbleArray3d skyLight) {
     this.section = section;
     this.blockLight = blockLight;
     this.skyLight = skyLight;
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/util/mcprotocollib/BitStorage116.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/mcprotocollib/BitStorage116.java
similarity index 97%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/util/mcprotocollib/BitStorage116.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/mcprotocollib/BitStorage116.java
index 24f1099f..2e965f4e 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/util/mcprotocollib/BitStorage116.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/mcprotocollib/BitStorage116.java
@@ -22,7 +22,7 @@
  * OR OTHER DEALINGS IN THE SOFTWARE.
  */
 
-package net.elytrium.elytraproxy.botfilter.protocol.util.mcprotocollib;
+package net.elytrium.elytraproxy.virtual.protocol.util.mcprotocollib;
 
 import com.velocitypowered.api.network.ProtocolVersion;
 import com.velocitypowered.proxy.protocol.ProtocolUtils;
@@ -30,7 +30,7 @@ import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import io.netty.buffer.ByteBuf;
 import java.util.Arrays;
 import lombok.Getter;
-import net.elytrium.elytraproxy.botfilter.protocol.util.CompactStorage;
+import net.elytrium.elytraproxy.virtual.protocol.util.CompactStorage;
 
 public class BitStorage116 implements CompactStorage {
 
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/util/mcprotocollib/BitStorage19.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/mcprotocollib/BitStorage19.java
similarity index 96%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/util/mcprotocollib/BitStorage19.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/mcprotocollib/BitStorage19.java
index 9ad241f9..dcf42f5b 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/util/mcprotocollib/BitStorage19.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/mcprotocollib/BitStorage19.java
@@ -22,14 +22,14 @@
  * OR OTHER DEALINGS IN THE SOFTWARE.
  */
 
-package net.elytrium.elytraproxy.botfilter.protocol.util.mcprotocollib;
+package net.elytrium.elytraproxy.virtual.protocol.util.mcprotocollib;
 
 import com.velocitypowered.api.network.ProtocolVersion;
 import com.velocitypowered.proxy.protocol.ProtocolUtils;
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import io.netty.buffer.ByteBuf;
 import java.util.Arrays;
-import net.elytrium.elytraproxy.botfilter.protocol.util.CompactStorage;
+import net.elytrium.elytraproxy.virtual.protocol.util.CompactStorage;
 
 @SuppressFBWarnings({"EI_EXPOSE_REP2", "EI_EXPOSE_REP"})
 public class BitStorage19 implements CompactStorage {
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/util/mcprotocollib/NibbleArray3d.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/mcprotocollib/NibbleArray3d.java
similarity index 97%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/util/mcprotocollib/NibbleArray3d.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/mcprotocollib/NibbleArray3d.java
index 596c987c..896a5bdb 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/util/mcprotocollib/NibbleArray3d.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/mcprotocollib/NibbleArray3d.java
@@ -22,7 +22,7 @@
  * OR OTHER DEALINGS IN THE SOFTWARE.
  */
 
-package net.elytrium.elytraproxy.botfilter.protocol.util.mcprotocollib;
+package net.elytrium.elytraproxy.virtual.protocol.util.mcprotocollib;
 
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.util.Arrays;
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/ServerPackets.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/ServerPackets.java
new file mode 100644
index 00000000..31109330
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/ServerPackets.java
@@ -0,0 +1,254 @@
+/*
+ * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
+ *
+ * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.virtual.server;
+
+import com.google.common.collect.ImmutableSet;
+import com.velocitypowered.api.network.ProtocolVersion;
+import com.velocitypowered.proxy.connection.registry.DimensionData;
+import com.velocitypowered.proxy.connection.registry.DimensionInfo;
+import com.velocitypowered.proxy.connection.registry.DimensionRegistry;
+import com.velocitypowered.proxy.protocol.ProtocolUtils;
+import com.velocitypowered.proxy.protocol.packet.Chat;
+import com.velocitypowered.proxy.protocol.packet.Disconnect;
+import com.velocitypowered.proxy.protocol.packet.JoinGame;
+import com.velocitypowered.proxy.protocol.packet.PluginMessage;
+import io.netty.buffer.ByteBuf;
+import io.netty.buffer.ByteBufAllocator;
+import java.util.ArrayList;
+import java.util.List;
+import lombok.Getter;
+import net.elytrium.elytraproxy.botfilter.handler.BotFilterSessionHandler;
+import net.elytrium.elytraproxy.config.Settings;
+import net.elytrium.elytraproxy.virtual.protocol.data.registry.Biome;
+import net.elytrium.elytraproxy.virtual.protocol.packet.PlayerAbilities;
+import net.elytrium.elytraproxy.virtual.protocol.packet.PlayerPositionAndLook;
+import net.elytrium.elytraproxy.virtual.protocol.packet.SetExp;
+import net.elytrium.elytraproxy.virtual.protocol.packet.SetSlot;
+import net.elytrium.elytraproxy.virtual.protocol.packet.world.ChunkData;
+import net.elytrium.elytraproxy.virtual.server.world.VirtualWorld;
+import net.elytrium.elytraproxy.virtual.server.world.chunk.SimpleChunk;
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
+
+@Getter
+public class ServerPackets {
+
+  private final VirtualServer virtualServer;
+  private final String key = Settings.IMP.ANTIBOT.BOTFILTER_DIMENSION.MODERN_KEY;
+  private final String hardcodedBrandString = Settings.IMP.ANTIBOT.BRAND + " (ely.su/github)";
+  private final int dimensionId = Settings.IMP.ANTIBOT.BOTFILTER_DIMENSION.ID;
+  private final int legacyDimensionId = Settings.IMP.ANTIBOT.BOTFILTER_DIMENSION.LEGACY_ID;
+  private DimensionData dimension;
+  private DimensionData legacyDimension;
+  private VirtualWorld virtualWorld;
+  private List<ChunkData> staticWorldPacket;
+  private JoinGame joinPacket;
+  private JoinGame legacyJoinPacket;
+  private Disconnect alreadyConnected;
+  private Disconnect tooBigPacket;
+  private Disconnect captchaFailed;
+  private Disconnect fallingCheckFailed;
+  private SetSlot setSlot;
+  private SetSlot resetSlot;
+  private Chat checkingChat;
+  private Chat checkingCaptchaChat;
+  private Chat loginChat;
+  private Chat registerChat;
+  private Chat wrongPasswordChat;
+  private Disconnect nicknamePremium;
+  private Disconnect nicknameInvalid;
+  private Disconnect ipLimit;
+  private Disconnect wrongPassword;
+  private Disconnect successfulBotFilter;
+  private Disconnect successfulAuth;
+  private PlayerPositionAndLook captchaPosAndLook;
+  private PlayerPositionAndLook authPosAndLook;
+  private PlayerAbilities noAbilities;
+  private List<SetExp> experience;
+  private ByteBuf brandBuf;
+
+  public ServerPackets(VirtualServer virtualServer) {
+    this.virtualServer = virtualServer;
+  }
+
+  public void createPackets() {
+    Settings.ANTIBOT.CAPTCHA_COORDS captchaCoords = Settings.IMP.ANTIBOT.CAPTCHA_COORDS;
+    Settings.AUTH.AUTH_COORDS authCoords = Settings.IMP.AUTH.AUTH_COORDS;
+    // TODO: Проверять валид ли ид
+    dimension = new DimensionData(key, dimensionId, true,
+            0.0f, false, false, false, true,
+            true, true, false, false, 256,
+            "minecraft:infiniburn_nether",
+            0L, false, 1.0, key, 0, 256);
+    legacyDimension = new DimensionData(key, legacyDimensionId, true,
+            0.0f, false, false, false, true,
+            true, true, false, false, 256,
+            "minecraft:infiniburn_nether",
+            0L, false, 1.0, key, 0, 256);
+    this.virtualWorld = new VirtualWorld(dimension,
+        new DimensionInfo(key, key, true, false), captchaCoords.X, captchaCoords.Y);
+
+    /*
+    for (int x = 0; x < 16; x++) {
+      for (int z = 0; z < 16; z++) {
+        virtualWorld.setBlock(x, 40, z, SimpleBlock.GRANITE);
+        virtualWorld.setBlock(x, 60, z, SimpleBlock.GRANITE);
+      }
+    }
+    for (int x = 1; x < 15; x++) {
+      for (int z = 1; z < 15; z++) {
+        if (x % 3 == 0 && z % 3 == 0) {
+          virtualWorld.setBlock(x, 40, z, SimpleBlock.BARRIER);
+          virtualWorld.setBlockLight(x, 41, z, (byte) 15);
+        }
+      }
+    }
+    for (int x = 0; x < 16; x++) {
+      for (int y = 40; y <= 60; y++) {
+        virtualWorld.setBlock(x, y, 0, SimpleBlock.GRANITE);
+        virtualWorld.setBlock(0, y, x, SimpleBlock.GRANITE);
+        virtualWorld.setBlock(x, y, 15, SimpleBlock.GRANITE);
+        virtualWorld.setBlock(15, y, x, SimpleBlock.GRANITE);
+      }
+    }
+    */
+
+    experience = createExpPackets();
+    captchaPosAndLook = createPlayerPosAndLookPacket(captchaCoords.X, captchaCoords.Y, captchaCoords.Z);
+    authPosAndLook = createPlayerPosAndLookPacket(authCoords.X, authCoords.Y, authCoords.Z);
+
+    joinPacket = createJoinGamePacket();
+    legacyJoinPacket = createLegacyJoinGamePacket();
+    staticWorldPacket = createChunksPackets(60);
+
+    noAbilities = createAbilitiesPacket();
+    alreadyConnected = createDisconnectPacket(Settings.IMP.MESSAGES.VELOCITY.ERROR.ALREADY_CONNECTED_PROXY);
+    tooBigPacket = createDisconnectPacket(Settings.IMP.ANTIBOT.STRINGS.TOO_BIG_PACKET);
+    captchaFailed = createDisconnectPacket(Settings.IMP.ANTIBOT.STRINGS.CAPTCHA_FAILED);
+    fallingCheckFailed = createDisconnectPacket(Settings.IMP.ANTIBOT.STRINGS.FALLING_CHECK_FAILED);
+    setSlot = createSetSlotPacket(0, 36, 358, 1, 0);
+    resetSlot = createSetSlotPacket(0, 36, -1, 0, 0);
+
+    checkingChat = createChatPacket(Settings.IMP.ANTIBOT.STRINGS.CHECKING);
+    checkingCaptchaChat = createChatPacket(Settings.IMP.ANTIBOT.STRINGS.CHECKING_CAPTCHA);
+    loginChat = createChatPacket(Settings.IMP.AUTH.STRINGS.LOGIN);
+    registerChat = createChatPacket(Settings.IMP.AUTH.STRINGS.REGISTER);
+    wrongPasswordChat = createChatPacket(Settings.IMP.AUTH.STRINGS.PASSWORD_WRONG);
+    wrongPassword = createDisconnectPacket(Settings.IMP.AUTH.STRINGS.PASSWORD_WRONG);
+    nicknamePremium = createDisconnectPacket(Settings.IMP.AUTH.STRINGS.NICKNAME_PREMIUM);
+    nicknameInvalid = createDisconnectPacket(Settings.IMP.AUTH.STRINGS.NICKNAME_INVALID);
+    successfulBotFilter = createDisconnectPacket(Settings.IMP.ANTIBOT.STRINGS.SUCCESSFUL);
+    successfulAuth = createDisconnectPacket(Settings.IMP.AUTH.STRINGS.SUCCESSFUL);
+    ipLimit = createDisconnectPacket(Settings.IMP.AUTH.STRINGS.IP_LIMIT);
+    brandBuf = createBrandBuf(hardcodedBrandString);
+  }
+
+  private PlayerAbilities createAbilitiesPacket() {
+    return new PlayerAbilities((byte) 6, 0f, 0f);
+  }
+
+  private JoinGame createJoinGamePacket() {
+    DimensionRegistry dimensionRegistry = new DimensionRegistry(ImmutableSet.of(dimension), ImmutableSet.of(key));
+
+    JoinGame joinGame = new JoinGame();
+    joinGame.setEntityId(0);
+    joinGame.setGamemode((short) 2);
+    joinGame.setPreviousGamemode((short) 2);
+    joinGame.setDimension(dimensionId);
+    joinGame.setDifficulty((short) 0);
+    joinGame.setMaxPlayers(1);
+    joinGame.setPartialHashedSeed(System.currentTimeMillis());
+    joinGame.setLevelType("flat");
+    joinGame.setViewDistance(4);
+    joinGame.setReducedDebugInfo(true);
+    joinGame.setIsHardcore(Settings.IMP.ANTIBOT.BOTFILTER_DIMENSION.HARDCORE_HEARTS);
+    joinGame.setDimensionRegistry(dimensionRegistry);
+    joinGame.setDimensionInfo(new DimensionInfo(key, key, false, false));
+    joinGame.setCurrentDimensionData(dimension);
+    joinGame.setBiomeRegistry(Biome.getRegistry());
+    return joinGame;
+  }
+
+  private JoinGame createLegacyJoinGamePacket() {
+    JoinGame joinGame = createJoinGamePacket();
+    joinGame.setDimension(legacyDimensionId);
+    return joinGame;
+  }
+
+  public PlayerPositionAndLook createPlayerPosAndLookPacket(double x, double y, double z) {
+    return new PlayerPositionAndLook(x, y, z, 0f, 0f, -133, false, true);
+  }
+
+  private List<ChunkData> createChunksPackets(int skyLightY) {
+    List<ChunkData> packets = new ArrayList<>();
+    for (SimpleChunk chunk : virtualWorld.getChunks()) {
+      packets.add(createChunkDataPacket(chunk, skyLightY));
+    }
+    return packets;
+  }
+
+  private List<SetExp> createExpPackets() {
+    List<SetExp> packets = new ArrayList<>();
+    long ticks = BotFilterSessionHandler.TOTAL_TICKS;
+    float expInterval = 1f / (float) ticks;
+    for (int i = 0; i < ticks; ++i) {
+      packets.add(new SetExp(i * expInterval, i, 0));
+    }
+    return packets;
+  }
+
+  public ChunkData createChunkDataPacket(SimpleChunk chunk, int skyLightY) {
+    chunk.setSkyLight(chunk.getX(), skyLightY, chunk.getZ(), (byte) 1);
+    return new ChunkData(chunk.getFullChunkSnapshot(), true);
+  }
+
+  private SetSlot createSetSlotPacket(int windowId, int slot, int item, int count, int data) {
+    return new SetSlot(windowId, slot, item, count, data);
+  }
+
+  public PluginMessage getBotFilterBrand() {
+    return createBrandPacket(brandBuf.copy());
+  }
+
+  private PluginMessage createBrandPacket(ByteBuf brandBuf) {
+    return new PluginMessage("MC|Brand", brandBuf);
+  }
+
+  private ByteBuf createBrandBuf(String brand) {
+    ByteBuf brandBuf = ByteBufAllocator.DEFAULT.heapBuffer();
+    ProtocolUtils.writeString(brandBuf, brand);
+    return brandBuf;
+  }
+
+  private Chat createChatPacket(String text) {
+    return new Chat(
+      ProtocolUtils.getJsonChatSerializer(ProtocolVersion.MINIMUM_VERSION).serialize(
+        LegacyComponentSerializer
+          .legacyAmpersand()
+          .deserialize(text)
+      ), Chat.CHAT_TYPE, null
+    );
+  }
+
+  private Disconnect createDisconnectPacket(String message) {
+    Component component = LegacyComponentSerializer.legacyAmpersand().deserialize(message);
+    return Disconnect.create(component, ProtocolVersion.MINIMUM_VERSION);
+  }
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/VirtualServer.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/VirtualServer.java
similarity index 50%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/VirtualServer.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/VirtualServer.java
index d9b75a41..5dc6ce52 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/VirtualServer.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/VirtualServer.java
@@ -17,54 +17,57 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.server;
+package net.elytrium.elytraproxy.virtual.server;
 
+import com.velocitypowered.api.network.ProtocolVersion;
 import com.velocitypowered.proxy.connection.MinecraftConnection;
+import com.velocitypowered.proxy.connection.MinecraftSessionHandler;
 import com.velocitypowered.proxy.connection.client.ConnectedPlayer;
 import com.velocitypowered.proxy.protocol.StateRegistry;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.ConcurrentMap;
 import lombok.Getter;
 import net.elytrium.elytraproxy.ElytraProxy;
-import net.elytrium.elytraproxy.botfilter.protocol.cache.PacketCompressor;
 
-public class VirtualServer {
+public class VirtualServer implements MinecraftSessionHandler {
 
   @Getter
   private final ElytraProxy elytraProxy;
-  private final ConcurrentMap<String, BotFilterSessionHandler>
-      activeConnections = new ConcurrentHashMap<>();
+  @Getter
   private final ServerPackets packets;
 
   public VirtualServer(ElytraProxy elytraProxy) {
     this.elytraProxy = elytraProxy;
-    this.packets = new ServerPackets(
-        new PacketCompressor(elytraProxy.getVelocityServer()::getConfiguration), this);
+    this.packets = new ServerPackets(this);
   }
 
   public void reload() {
-    for (BotFilterSessionHandler session : activeConnections.values()) {
-      session.getPlayer().getConnection().close();
-    }
     packets.createPackets();
   }
 
-  public void spawnPlayer(BotFilterSessionHandler user) {
-    String username = user.getPlayer().getUsername().toLowerCase();
-    ConnectedPlayer player = user.getPlayer();
+  public void spawnPlayer(VirtualSessionHandler handler) {
+    ConnectedPlayer player = handler.getPlayer();
+    MinecraftConnection connection = player.getConnection();
+    connection.setSessionHandler(handler);
+    handler.onSpawn();
+  }
+
+  public void sendJoinPacket(VirtualSessionHandler handler) {
+    ConnectedPlayer player = handler.getPlayer();
     MinecraftConnection connection = player.getConnection();
-    if (activeConnections.putIfAbsent(username, user) != null) {
-      connection.closeWith(packets.getAlreadyConnected());
-      //user.closeWith(preparedPackets.getAlreadyConnected());
-      return;
+
+    if (connection.getProtocolVersion().isBefore(ProtocolVersion.MINECRAFT_1_16)) {
+      connection.write(packets.getLegacyJoinPacket());
+    } else {
+      connection.write(packets.getJoinPacket());
     }
-    user.getOriginalHandler().completeLoginProtocol(player, false);
-    connection.setState(StateRegistry.BotFilter);
-    packets.getSpawnPackets().write(connection, player.isOnlineMode());
-    connection.flush();
   }
 
-  public void disconnected(BotFilterSessionHandler botFilterConnection) {
-    activeConnections.remove(botFilterConnection.getPlayer().getUsername().toLowerCase());
+  public void loginComplete(VirtualSessionHandler handler) {
+    ConnectedPlayer player = handler.getPlayer();
+    MinecraftConnection connection = player.getConnection();
+
+    if (connection.getState() != StateRegistry.VIRTUAL) {
+      connection.setState(StateRegistry.VIRTUAL);
+      sendJoinPacket(handler);
+    }
   }
 }
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/VirtualSessionHandler.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/VirtualSessionHandler.java
new file mode 100644
index 00000000..8bbe8cc1
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/VirtualSessionHandler.java
@@ -0,0 +1,61 @@
+/*
+ * Copyright (C) 2021 Elytrium
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.virtual.server;
+
+import com.velocitypowered.proxy.connection.MinecraftSessionHandler;
+import com.velocitypowered.proxy.connection.client.ConnectedPlayer;
+import java.util.Locale;
+import lombok.Getter;
+import net.elytrium.elytraproxy.virtual.protocol.packet.Player;
+import net.elytrium.elytraproxy.virtual.protocol.packet.PlayerPosition;
+import net.elytrium.elytraproxy.virtual.protocol.packet.PlayerPositionAndLook;
+import net.elytrium.elytraproxy.virtual.protocol.packet.TeleportConfirm;
+
+@Getter
+public abstract class VirtualSessionHandler implements MinecraftSessionHandler {
+  public final ConnectedPlayer player;
+  public final MinecraftSessionHandler originalHandler;
+  public final VirtualServer virtualServer;
+  public final String nickname;
+
+  public VirtualSessionHandler(
+      ConnectedPlayer player, MinecraftSessionHandler originalHandler, VirtualServer virtualServer) {
+    this.player = player;
+    this.originalHandler = originalHandler;
+    this.virtualServer = virtualServer;
+    this.nickname = player.getUsername().toLowerCase(Locale.ROOT);
+  }
+
+  public abstract void onSpawn();
+
+  public boolean handle(Player packet) {
+    return false;
+  }
+
+  public boolean handle(PlayerPosition packet) {
+    return false;
+  }
+
+  public boolean handle(PlayerPositionAndLook packet) {
+    return false;
+  }
+
+  public boolean handle(TeleportConfirm packet) {
+    return false;
+  }
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/world/SimpleBlock.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/SimpleBlock.java
similarity index 87%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/world/SimpleBlock.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/SimpleBlock.java
index fe06742f..c041013e 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/world/SimpleBlock.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/SimpleBlock.java
@@ -17,18 +17,18 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.server.world;
-
-import static net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.BlockInfo.fallback;
-import static net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.BlockInfo.info;
-import static net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.Version.MINECRAFT_1_13;
-import static net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.Version.MINECRAFT_1_13_1;
-import static net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.Version.MINECRAFT_1_14;
-import static net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.Version.MINECRAFT_1_16;
-import static net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.Version.MINECRAFT_1_16_2;
-import static net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.Version.MINECRAFT_1_17;
-import static net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.Version.MINECRAFT_1_7;
-import static net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.Version.MINECRAFT_1_8;
+package net.elytrium.elytraproxy.virtual.server.world;
+
+import static net.elytrium.elytraproxy.virtual.server.world.SimpleBlock.BlockInfo.fallback;
+import static net.elytrium.elytraproxy.virtual.server.world.SimpleBlock.BlockInfo.info;
+import static net.elytrium.elytraproxy.virtual.server.world.SimpleBlock.Version.MINECRAFT_1_13;
+import static net.elytrium.elytraproxy.virtual.server.world.SimpleBlock.Version.MINECRAFT_1_13_1;
+import static net.elytrium.elytraproxy.virtual.server.world.SimpleBlock.Version.MINECRAFT_1_14;
+import static net.elytrium.elytraproxy.virtual.server.world.SimpleBlock.Version.MINECRAFT_1_16;
+import static net.elytrium.elytraproxy.virtual.server.world.SimpleBlock.Version.MINECRAFT_1_16_2;
+import static net.elytrium.elytraproxy.virtual.server.world.SimpleBlock.Version.MINECRAFT_1_17;
+import static net.elytrium.elytraproxy.virtual.server.world.SimpleBlock.Version.MINECRAFT_1_7;
+import static net.elytrium.elytraproxy.virtual.server.world.SimpleBlock.Version.MINECRAFT_1_8;
 
 import com.velocitypowered.api.network.ProtocolVersion;
 import java.util.Arrays;
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/world/VirtualWorld.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/VirtualWorld.java
similarity index 81%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/world/VirtualWorld.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/VirtualWorld.java
index e92d6019..008561e8 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/world/VirtualWorld.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/VirtualWorld.java
@@ -17,9 +17,10 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.server.world;
+package net.elytrium.elytraproxy.virtual.server.world;
 
 import com.google.common.collect.ImmutableList;
+import com.velocitypowered.proxy.connection.registry.DimensionData;
 import com.velocitypowered.proxy.connection.registry.DimensionInfo;
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.util.HashMap;
@@ -29,26 +30,25 @@ import java.util.function.Function;
 import java.util.function.Supplier;
 import lombok.Getter;
 import lombok.NonNull;
-import net.elytrium.elytraproxy.botfilter.protocol.data.registry.Biome;
-import net.elytrium.elytraproxy.botfilter.protocol.data.registry.Dimension;
+import net.elytrium.elytraproxy.virtual.protocol.data.registry.Biome;
+import net.elytrium.elytraproxy.virtual.server.world.chunk.SimpleChunk;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
-import net.elytrium.elytraproxy.botfilter.server.world.chunk.SimpleChunk;
 
 public class VirtualWorld {
 
   @NonNull
   @Getter
-  private final Dimension dimension;
+  private final DimensionData dimension;
   @NonNull
   @Getter
   private final DimensionInfo dimensionInfo;
   private final Map<Long, SimpleChunk> chunks = new HashMap<>();
 
-  public VirtualWorld(@NonNull Dimension dimension, @NonNull DimensionInfo dimensionInfo) {
+  public VirtualWorld(@NonNull DimensionData dimension, @NonNull DimensionInfo dimensionInfo, int x, int z) {
     this.dimension = dimension;
     this.dimensionInfo = dimensionInfo;
-    getChunkOrNew(0, 0);
+    getChunkOrNew(x, z);
   }
 
   public void setBlock(int x, int y, int z, @Nullable SimpleBlock block) {
@@ -71,7 +71,7 @@ public class VirtualWorld {
   }
 
   public Biome getBiome(int x, int y, int z) {
-    return chunkAction(x, z, (c) -> c.getBiome(x, y, z), () -> Biome.PLAINTS);
+    return chunkAction(x, z, (c) -> c.getBiome(x, y, z), () -> Biome.PLAINS);
   }
 
   public byte getBlockLight(int x, int y, int z) {
@@ -83,15 +83,6 @@ public class VirtualWorld {
     getChunkOrNew(x, z).setBlockLight(getChunkCoordinate(x), y, getChunkCoordinate(z), light);
   }
 
-  public byte getSkyLight(int x, int y, int z) {
-    return chunkAction(x, z,
-        (c) -> c.getSkyLight(getChunkCoordinate(x), y, getChunkCoordinate(z)), () -> (byte) 0);
-  }
-
-  public void setSkyLight(int x, int y, int z, byte light) {
-    getChunkOrNew(x, z).setSkyLight(getChunkCoordinate(x), y, getChunkCoordinate(z), light);
-  }
-
   public List<SimpleChunk> getChunks() {
     return ImmutableList.copyOf(chunks.values());
   }
@@ -115,7 +106,7 @@ public class VirtualWorld {
     long index = getChunkIndex(x, z);
     SimpleChunk simpleChunk = chunks.get(index);
     if (simpleChunk == null) {
-      chunks.put(index, simpleChunk = new SimpleChunk(this, x, z));
+      chunks.put(index, simpleChunk = new SimpleChunk(x, z));
     }
     return simpleChunk;
   }
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/world/chunk/ChunkSnapshot.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/ChunkSnapshot.java
similarity index 86%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/world/chunk/ChunkSnapshot.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/ChunkSnapshot.java
index 385bf6e9..9c2c3ca4 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/world/chunk/ChunkSnapshot.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/ChunkSnapshot.java
@@ -17,12 +17,12 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.server.world.chunk;
+package net.elytrium.elytraproxy.virtual.server.world.chunk;
 
 import lombok.Getter;
 import lombok.RequiredArgsConstructor;
-import net.elytrium.elytraproxy.botfilter.protocol.data.registry.Biome;
-import net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock;
+import net.elytrium.elytraproxy.virtual.protocol.data.registry.Biome;
+import net.elytrium.elytraproxy.virtual.server.world.SimpleBlock;
 
 @RequiredArgsConstructor
 @Getter
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/world/chunk/LightSection.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/LightSection.java
similarity index 95%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/world/chunk/LightSection.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/LightSection.java
index a39a8098..7c899885 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/world/chunk/LightSection.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/LightSection.java
@@ -17,14 +17,14 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.server.world.chunk;
+package net.elytrium.elytraproxy.virtual.server.world.chunk;
 
 import com.google.common.base.Preconditions;
 import lombok.AccessLevel;
 import lombok.AllArgsConstructor;
 import lombok.Getter;
 import lombok.NoArgsConstructor;
-import net.elytrium.elytraproxy.botfilter.protocol.util.mcprotocollib.NibbleArray3d;
+import net.elytrium.elytraproxy.virtual.protocol.util.mcprotocollib.NibbleArray3d;
 
 @AllArgsConstructor(access = AccessLevel.PRIVATE)
 @NoArgsConstructor
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/world/chunk/SimpleChunk.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/SimpleChunk.java
similarity index 91%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/world/chunk/SimpleChunk.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/SimpleChunk.java
index db6ca3a7..db6a8cca 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/world/chunk/SimpleChunk.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/SimpleChunk.java
@@ -17,7 +17,7 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.server.world.chunk;
+package net.elytrium.elytraproxy.virtual.server.world.chunk;
 
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.util.Arrays;
@@ -25,9 +25,8 @@ import java.util.function.Function;
 import java.util.function.Supplier;
 import lombok.Getter;
 import lombok.NonNull;
-import net.elytrium.elytraproxy.botfilter.protocol.data.registry.Biome;
-import net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock;
-import net.elytrium.elytraproxy.botfilter.server.world.VirtualWorld;
+import net.elytrium.elytraproxy.virtual.protocol.data.registry.Biome;
+import net.elytrium.elytraproxy.virtual.server.world.SimpleBlock;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
@@ -36,8 +35,6 @@ public class SimpleChunk {
 
   public static final int MAX_BLOCKS_PER_SECTION = 16 * 16 * 16;
 
-  @Getter
-  private final VirtualWorld world;
   @Getter
   private final int x;
   @Getter
@@ -46,11 +43,10 @@ public class SimpleChunk {
   private final LightSection[] light = new LightSection[18];
   private final Biome[] biomes = new Biome[1024];
 
-  public SimpleChunk(VirtualWorld world, int x, int z) {
-    this.world = world;
+  public SimpleChunk(int x, int z) {
     this.x = x;
     this.z = z;
-    Arrays.fill(biomes, Biome.PLAINTS);
+    Arrays.fill(biomes, Biome.PLAINS);
     //Arrays.fill(light, LightSection.DEFAULT);
   }
 
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/world/chunk/SimpleSection.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/SimpleSection.java
similarity index 88%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/world/chunk/SimpleSection.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/SimpleSection.java
index 1a062bd0..5825c7c0 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/world/chunk/SimpleSection.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/SimpleSection.java
@@ -17,15 +17,15 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.server.world.chunk;
+package net.elytrium.elytraproxy.virtual.server.world.chunk;
 
 import com.google.common.base.Preconditions;
 import lombok.AllArgsConstructor;
 import lombok.Getter;
 import lombok.RequiredArgsConstructor;
-import net.elytrium.elytraproxy.botfilter.protocol.data.storage.BlockStorage;
-import net.elytrium.elytraproxy.botfilter.protocol.data.storage.BlockStorage19;
-import net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock;
+import net.elytrium.elytraproxy.virtual.protocol.data.storage.BlockStorage;
+import net.elytrium.elytraproxy.virtual.protocol.data.storage.BlockStorage19;
+import net.elytrium.elytraproxy.virtual.server.world.SimpleBlock;
 import org.jetbrains.annotations.Nullable;
 
 @RequiredArgsConstructor
diff --git a/proxy/src/test/java/com/velocitypowered/proxy/util/ratelimit/GuavaCacheRatelimiterTest.java b/proxy/src/test/java/com/velocitypowered/proxy/util/ratelimit/GuavaCacheRatelimiterTest.java
index 7ed4618e..90508ee0 100644
--- a/proxy/src/test/java/com/velocitypowered/proxy/util/ratelimit/GuavaCacheRatelimiterTest.java
+++ b/proxy/src/test/java/com/velocitypowered/proxy/util/ratelimit/GuavaCacheRatelimiterTest.java
@@ -30,6 +30,8 @@ class GuavaCacheRatelimiterTest {
 
   @Test
   void attemptZero() {
+    // BotFilter BackPort Start: Global ip rate limiter
+    //Ratelimiter noRatelimiter = new GuavaCacheRatelimiter(0, TimeUnit.MILLISECONDS);
     Ratelimiter noRatelimiter = Ratelimiters.createWithMilliseconds(0, 0);
     assertTrue(noRatelimiter.attempt(InetAddress.getLoopbackAddress()));
     assertTrue(noRatelimiter.attempt(InetAddress.getLoopbackAddress()));
@@ -39,6 +41,7 @@ class GuavaCacheRatelimiterTest {
     noRatelimiter = Ratelimiters.createWithMilliseconds(20, 0);
     assertTrue(noRatelimiter.attempt(InetAddress.getLoopbackAddress()));
     assertTrue(noRatelimiter.attempt(InetAddress.getLoopbackAddress()));
+    // BotFilter BackPort End
   }
 
   @Test
@@ -51,6 +54,8 @@ class GuavaCacheRatelimiterTest {
         return base + extra.get();
       }
     };
+    // BotFilter BackPort Start: Global ip rate limiter
+    //Ratelimiter ratelimiter = new GuavaCacheRatelimiter(1000, TimeUnit.MILLISECONDS, testTicker);
     Ratelimiter ratelimiter = new GuavaCacheRatelimiter(1000, 3, TimeUnit.MILLISECONDS, testTicker);
     assertTrue(ratelimiter.attempt(InetAddress.getLoopbackAddress()));
     assertTrue(ratelimiter.attempt(InetAddress.getLoopbackAddress()));
@@ -96,5 +101,6 @@ class GuavaCacheRatelimiterTest {
     assertTrue(ratelimiter.attempt(InetAddress.getLoopbackAddress()));
     assertFalse(ratelimiter.attempt(InetAddress.getLoopbackAddress()));
   }
+  // BotFilter BackPort End
 
 }
-- 
2.32.0

