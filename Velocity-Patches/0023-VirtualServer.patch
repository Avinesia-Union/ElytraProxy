From 24a49fa82b2bbe8824c2665cdabf7ff635228713 Mon Sep 17 00:00:00 2001
From: Petr Ilin <hevav@hevav.dev>
Date: Sun, 25 Jul 2021 02:41:45 +0300
Subject: [PATCH] VirtualServer


diff --git a/proxy/build.gradle b/proxy/build.gradle
index 84e3180e..4540796e 100644
--- a/proxy/build.gradle
+++ b/proxy/build.gradle
@@ -17,6 +17,12 @@ license {
     matching(includes: ['**/elytraproxy/config/helpers/**']) {
         header = project.rootProject.file('HEADER_BUNGEECORD.txt')
     }
+    matching(includes: ['**/virtual/**']) {
+        header = project.rootProject.file('HEADER_BOTFILTER.txt')
+    }
+    matching(includes: ['**/virtual/server/VirtualSessionHandler.java']) {
+        header = project.rootProject.file('HEADER_ELYTRAPROXY.txt')
+    }
     matching(includes: ['**/botfilter/**']) {
         header = project.rootProject.file('HEADER_BOTFILTER.txt')
     }
@@ -57,6 +63,7 @@ tasks.withType(Checkstyle) {
 
     // ElytraProxy
     exclude('**/net/elytrium/elytraproxy/botfilter/**') // temp
+    exclude('**/net/elytrium/elytraproxy/virtual/**') // temp
     exclude('**/net/elytrium/elytraproxy/config/Settings.java')
 }
 
@@ -71,6 +78,7 @@ dependencies {
 
     // ElytraProxy Start
     implementation "org.mariadb.jdbc:mariadb-java-client:2.7.3"
+    implementation 'at.favre.lib:bcrypt:0.9.0'
 
     // Note: we depend on the API twice, first the main sourceset, and then the annotation processor.
     implementation project(/*':velocity-api'*/':elytraproxy-api')
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/VelocityServer.java b/proxy/src/main/java/com/velocitypowered/proxy/VelocityServer.java
index b910fca4..dab1866b 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/VelocityServer.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/VelocityServer.java
@@ -556,10 +556,7 @@ public class VelocityServer implements ProxyServer, ForwardingAudience {
     shutdown(explicitExit,
         LegacyComponentSerializer
             .legacyAmpersand()
-            .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK.PROXY_SHUTTING_DOWN
-                .replace("{NL}", "\n")
-                .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-            ));
+            .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK.PROXY_SHUTTING_DOWN));
     // ElytraProxy End
   }
 
@@ -780,17 +777,11 @@ public class VelocityServer implements ProxyServer, ForwardingAudience {
       if (Settings.IMP.MAIN_SETTINGS.MAINTENANCE.MOTD.startsWith("{")) {
         maintenanceMotd = GsonComponentSerializer
             .gson()
-            .deserialize(Settings.IMP.MAIN_SETTINGS.MAINTENANCE.MOTD
-                .replace("{NL}", "\n")
-                .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-            );
+            .deserialize(Settings.IMP.MAIN_SETTINGS.MAINTENANCE.MOTD);
       } else {
         maintenanceMotd = LegacyComponentSerializer
             .legacyAmpersand()
-            .deserialize(Settings.IMP.MAIN_SETTINGS.MAINTENANCE.MOTD
-                .replace("{NL}", "\n")
-                .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-            );
+            .deserialize(Settings.IMP.MAIN_SETTINGS.MAINTENANCE.MOTD);
       }
     }
     return maintenanceMotd;
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/CommandMessages.java b/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/CommandMessages.java
index 9d4dfded..40661ade 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/CommandMessages.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/CommandMessages.java
@@ -30,10 +30,7 @@ public class CommandMessages {
   */
   public static final Component PLAYERS_ONLY = LegacyComponentSerializer
       .legacyAmpersand()
-      .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.PLAYERS_ONLY
-          .replace("{NL}", "\n")
-          .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-      );
+      .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.PLAYERS_ONLY);
 
   /*
   public static final TranslatableComponent SERVER_DOES_NOT_EXIST = Component.translatable(
@@ -43,8 +40,6 @@ public class CommandMessages {
     return LegacyComponentSerializer
         .legacyAmpersand()
         .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.SERVER_DOES_NOT_EXIST
-            .replace("{NL}", "\n")
-            .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
             .replace("{0}", serverName)
         );
     // ElytraProxy End
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/GlistCommand.java b/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/GlistCommand.java
index 6f19aaee..a2fe6dcc 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/GlistCommand.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/GlistCommand.java
@@ -83,10 +83,7 @@ public class GlistCommand {
         /*Component.translatable("velocity.command.glist-view-all", NamedTextColor.YELLOW));*/
         LegacyComponentSerializer
             .legacyAmpersand()
-            .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.GLIST_VIEW_ALL
-                .replace("{NL}", "\n")
-                .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-            ));
+            .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.GLIST_VIEW_ALL));
     return 1;
   }
 
@@ -122,15 +119,11 @@ public class GlistCommand {
         ? LegacyComponentSerializer
         .legacyAmpersand()
         .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.GLIST_PLAYER_SINGULAR
-            .replace("{NL}", "\n")
-            .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
             .replace("{0}", Integer.toString(online)
             ))
         : LegacyComponentSerializer
         .legacyAmpersand()
         .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.GLIST_PLAYER_PLURAL
-            .replace("{NL}", "\n")
-            .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
             .replace("{0}", Integer.toString(online)
             ));
     target.sendMessage(msg/*.color(NamedTextColor.YELLOW)
@@ -153,8 +146,6 @@ public class GlistCommand {
             LegacyComponentSerializer
                 .legacyAmpersand()
                 .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.GLIST_FORMAT_VIEW_ALL
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
                     .replace("{0}", server.getServerInfo().getName())
                     .replace("{1}", Integer.toString(onServer.size()))
                 ))
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/ServerCommand.java b/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/ServerCommand.java
index 5372a634..f5aef727 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/ServerCommand.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/ServerCommand.java
@@ -88,8 +88,6 @@ public class ServerCommand implements SimpleCommand {
         LegacyComponentSerializer
             .legacyAmpersand()
             .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.SERVER_CURRENT_SERVER
-                .replace("{NL}", "\n")
-                .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
                 .replace("{0}", currentServer)
             ));
 
@@ -99,10 +97,7 @@ public class ServerCommand implements SimpleCommand {
           "velocity.command.server-too-many", NamedTextColor.RED));*/
           LegacyComponentSerializer
               .legacyAmpersand()
-              .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.SERVER_TOO_MANY
-                  .replace("{NL}", "\n")
-                  .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-              ));
+              .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.SERVER_TOO_MANY));
       return;
     }
 
@@ -114,8 +109,6 @@ public class ServerCommand implements SimpleCommand {
             LegacyComponentSerializer
                 .legacyAmpersand()
                 .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.SERVER_AVAILABLE
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
                 ));
     // ElytraProxy End
     for (int i = 0; i < servers.size(); i++) {
@@ -141,8 +134,6 @@ public class ServerCommand implements SimpleCommand {
           LegacyComponentSerializer
               .legacyAmpersand()
               .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.SERVER_TOOLTIP_PLAYER_ONLINE
-                  .replace("{NL}", "\n")
-                  .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
                   .replace("{0}", String.valueOf(connectedPlayers))
           );
     } else {
@@ -150,8 +141,6 @@ public class ServerCommand implements SimpleCommand {
           LegacyComponentSerializer
               .legacyAmpersand()
               .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.SERVER_TOOLTIP_PLAYERS_ONLINE
-                  .replace("{NL}", "\n")
-                  .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
                   .replace("{0}", String.valueOf(connectedPlayers))
           );
     }
@@ -166,8 +155,6 @@ public class ServerCommand implements SimpleCommand {
                   LegacyComponentSerializer
                       .legacyAmpersand()
                       .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.SERVER_TOOLTIP_CURRENT_SERVER
-                          .replace("{NL}", "\n")
-                          .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
                           .replace("{0}", LegacyComponentSerializer.legacySection().serialize(playersTextComponent))
                       )));
     } else {
@@ -180,8 +167,6 @@ public class ServerCommand implements SimpleCommand {
                   LegacyComponentSerializer
                       .legacyAmpersand()
                       .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.SERVER_TOOLTIP_OFFER_CONNECT_SERVER
-                          .replace("{NL}", "\n")
-                          .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
                           .replace("{0}", LegacyComponentSerializer.legacySection().serialize(playersTextComponent))
                       )));
     }
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/ShutdownCommand.java b/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/ShutdownCommand.java
index 6f871681..08da1725 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/ShutdownCommand.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/command/builtin/ShutdownCommand.java
@@ -19,7 +19,6 @@ package com.velocitypowered.proxy.command.builtin;
 
 import com.velocitypowered.api.command.RawCommand;
 import com.velocitypowered.proxy.VelocityServer;
-import net.elytrium.elytraproxy.config.Settings;
 import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
 
 public class ShutdownCommand implements RawCommand {
@@ -40,10 +39,7 @@ public class ShutdownCommand implements RawCommand {
       /*server.shutdown(true, LegacyComponentSerializer.legacy('&').deserialize(reason));*/
       server.shutdown(true, LegacyComponentSerializer
           .legacyAmpersand()
-          .deserialize(reason
-              .replace("{NL}", "\n")
-              .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-          ));
+          .deserialize(reason));
       // ElytraProxy End
     }
   }
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/config/VelocityConfiguration.java b/proxy/src/main/java/com/velocitypowered/proxy/config/VelocityConfiguration.java
index c8e02855..caf3eb1a 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/config/VelocityConfiguration.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/config/VelocityConfiguration.java
@@ -261,18 +261,12 @@ public class VelocityConfiguration implements ProxyConfig {
         /*motdAsComponent = GsonComponentSerializer.gson().deserialize(motd);*/
         motdAsComponent = GsonComponentSerializer
             .gson()
-            .deserialize(motd
-                .replace("{NL}", "\n")
-                .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-            );
+            .deserialize(motd);
       } else {
         /*motdAsComponent = LegacyComponentSerializer.legacy('&').deserialize(motd);*/
         motdAsComponent = LegacyComponentSerializer
             .legacyAmpersand()
-            .deserialize(motd
-                .replace("{NL}", "\n")
-                .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-            );
+            .deserialize(motd);
         // ElytraProxy End
       }
     }
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/MinecraftConnection.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/MinecraftConnection.java
index e8daa073..dc1e6773 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/MinecraftConnection.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/MinecraftConnection.java
@@ -37,7 +37,6 @@ import com.velocitypowered.proxy.connection.client.ConnectedPlayer;
 import com.velocitypowered.proxy.connection.client.HandshakeSessionHandler;
 import com.velocitypowered.proxy.connection.client.LoginSessionHandler;
 import com.velocitypowered.proxy.connection.client.StatusSessionHandler;
-import com.velocitypowered.proxy.network.Connections;
 import com.velocitypowered.proxy.protocol.MinecraftPacket;
 import com.velocitypowered.proxy.protocol.StateRegistry;
 import com.velocitypowered.proxy.protocol.VelocityConnectionEvent;
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/MinecraftSessionHandler.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/MinecraftSessionHandler.java
index 96cd388f..e72f42d6 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/MinecraftSessionHandler.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/MinecraftSessionHandler.java
@@ -53,10 +53,6 @@ import com.velocitypowered.proxy.protocol.packet.title.TitleSubtitlePacket;
 import com.velocitypowered.proxy.protocol.packet.title.TitleTextPacket;
 import com.velocitypowered.proxy.protocol.packet.title.TitleTimesPacket;
 import io.netty.buffer.ByteBuf;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.Player;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.PlayerPosition;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.PlayerPositionAndLook;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.TeleportConfirm;
 
 public interface MinecraftSessionHandler {
 
@@ -235,22 +231,4 @@ public interface MinecraftSessionHandler {
   default boolean handle(ResourcePackResponse packet) {
     return false;
   }
-
-  // BotFilter BackPort Start: Add handle methods
-  default boolean handle(Player packet) {
-    return false;
-  }
-
-  default boolean handle(PlayerPosition packet) {
-    return false;
-  }
-
-  default boolean handle(PlayerPositionAndLook packet) {
-    return false;
-  }
-
-  default boolean handle(TeleportConfirm packet) {
-    return false;
-  }
-  // BotFilter BackPort End
 }
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/LoginSessionHandler.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/LoginSessionHandler.java
index 2ead2491..3451c59b 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/LoginSessionHandler.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/LoginSessionHandler.java
@@ -46,7 +46,6 @@ import javax.crypto.SecretKey;
 import javax.crypto.spec.SecretKeySpec;
 import net.elytrium.elytraproxy.config.Settings;
 import net.kyori.adventure.text.Component;
-import net.kyori.adventure.text.TextComponent;
 import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
 
 public class LoginSessionHandler implements MinecraftSessionHandler {
@@ -55,10 +54,7 @@ public class LoginSessionHandler implements MinecraftSessionHandler {
       .translatable("velocity.error.modern-forwarding-failed");*/
       LegacyComponentSerializer
           .legacyAmpersand()
-          .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.MODERN_FORWARDING_FAILED
-              .replace("{NL}", "\n")
-              .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-          );
+          .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.MODERN_FORWARDING_FAILED);
 
   private final VelocityServer server;
   private final VelocityServerConnection serverConn;
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/TransitionSessionHandler.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/TransitionSessionHandler.java
index b3f58c85..0479c30a 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/TransitionSessionHandler.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/TransitionSessionHandler.java
@@ -38,6 +38,7 @@ import com.velocitypowered.proxy.protocol.packet.PluginMessage;
 import com.velocitypowered.proxy.protocol.util.PluginMessageUtil;
 import java.io.IOException;
 import java.util.concurrent.CompletableFuture;
+import net.elytrium.elytraproxy.virtual.protocol.packet.PlayerPositionAndLook;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ClientPlaySessionHandler.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ClientPlaySessionHandler.java
index db7ae02c..f2fc8dae 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ClientPlaySessionHandler.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ClientPlaySessionHandler.java
@@ -27,13 +27,11 @@ import com.velocitypowered.api.event.command.CommandExecuteEvent.CommandResult;
 import com.velocitypowered.api.event.connection.PluginMessageEvent;
 import com.velocitypowered.api.event.player.PlayerChannelRegisterEvent;
 import com.velocitypowered.api.event.player.PlayerChatEvent;
-import com.velocitypowered.api.event.player.PlayerResourcePackStatusEvent;
 import com.velocitypowered.api.event.player.TabCompleteEvent;
 import com.velocitypowered.api.network.ProtocolVersion;
 import com.velocitypowered.api.proxy.messages.ChannelIdentifier;
 import com.velocitypowered.api.proxy.messages.LegacyChannelIdentifier;
 import com.velocitypowered.api.proxy.messages.MinecraftChannelIdentifier;
-import com.velocitypowered.api.proxy.player.ResourcePackInfo;
 import com.velocitypowered.proxy.VelocityServer;
 import com.velocitypowered.proxy.connection.ConnectionTypes;
 import com.velocitypowered.proxy.connection.MinecraftConnection;
@@ -70,13 +68,9 @@ import java.util.UUID;
 import java.util.concurrent.CompletableFuture;
 import net.elytrium.elytraproxy.commands.ElytraProxyCommand;
 import net.elytrium.elytraproxy.config.Settings;
-import net.kyori.adventure.identity.Identity;
-import net.kyori.adventure.text.Component;
-import net.kyori.adventure.text.format.NamedTextColor;
 import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
-import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
@@ -89,12 +83,6 @@ public class ClientPlaySessionHandler implements MinecraftSessionHandler {
 
   private final ConnectedPlayer player;
   private boolean spawned = false;
-  // ElytraProxy Start
-  private boolean checkedBySettings = false;
-  private boolean checkedByBrand = false;
-  private boolean willBeKickedChat = false;
-  private boolean willBeKickedUnk = false;
-  // ElytraProxy End
   private final List<UUID> serverBossBars = new ArrayList<>();
   private final Queue<PluginMessage> loginPluginMessages = new ArrayDeque<>();
   private final VelocityServer server;
@@ -128,35 +116,6 @@ public class ClientPlaySessionHandler implements MinecraftSessionHandler {
     }
   }
 
-  // ElytraProxy Start
-  private void kickIfCheckNotPassed() {
-    if (Settings.IMP.ANTIBOT.ENABLE) {
-      if ((!checkedBySettings) && Settings.IMP.ANTIBOT.CHECK_CLIENT_SETTINGS) {
-        player.disconnect(
-            LegacyComponentSerializer
-                .legacyAmpersand()
-                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK.CLIENT_CHECK_SETTINGS
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                ));
-        server.getElytraProxy().getStatistics().addBlockedConnection();
-        server.getElytraProxy().getStatistics().addBlockedBots();
-      }
-      if ((!checkedByBrand) && Settings.IMP.ANTIBOT.CHECK_CLIENT_BRAND) {
-        player.disconnect(
-            LegacyComponentSerializer
-                .legacyAmpersand()
-                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK.CLIENT_CHECK_BRAND
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                ));
-        server.getElytraProxy().getStatistics().addBlockedConnection();
-        server.getElytraProxy().getStatistics().addBlockedBots();
-      }
-    }
-  }
-  // ElytraProxy End
-
   @Override
   public boolean handle(KeepAlive packet) {
     VelocityServerConnection serverConnection = player.getConnectedServer();
@@ -176,73 +135,11 @@ public class ClientPlaySessionHandler implements MinecraftSessionHandler {
   @Override
   public boolean handle(ClientSettings packet) {
     player.setPlayerSettings(packet);
-    // ElytraProxy Start
-    // TODO: Move to botfilter check
-    String toStringPacket = "{} send settings \"locale= '"
-        + packet.getLocale() + '\''
-        + ", viewDistance=" + packet.getViewDistance()
-        + ", chatVisibility=" + packet.getChatVisibility()
-        + ", chatColors=" + packet.isChatColors()
-        + ", skinParts=" + packet.getSkinParts()
-        + ", mainHand=" + packet.getMainHand()
-        + ", chatFilteringEnabled=" + packet.isChatFilteringEnabled() + '"';
-    if (Settings.IMP.ANTIBOT.ENABLE) {
-      if ((!checkedBySettings) && Settings.IMP.ANTIBOT.CHECK_CLIENT_SETTINGS) {
-        if (packet.toString().contains("null")) {
-          logger.error(toStringPacket, player);
-          player.disconnect(
-              LegacyComponentSerializer
-                  .legacyAmpersand()
-                  .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK.CLIENT_CHECK_SETTINGS
-                      .replace("{NL}", "\n")
-                      .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                  ));
-          server.getElytraProxy().getLogger().error("{} has null in settings packet", player);
-          server.getElytraProxy().getStatistics().addBlockedConnection();
-          server.getElytraProxy().getStatistics().addBlockedBots();
-        } else if (!packet.isChatColors()) {
-          logger.error(toStringPacket, player);
-          player.disconnect(
-              LegacyComponentSerializer
-                  .legacyAmpersand()
-                  .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK.CLIENT_CHECK_SETTINGS_CHAT_COLOR
-                      .replace("{NL}", "\n")
-                      .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                  ));
-          server.getElytraProxy().getLogger().error("{} doesn't send isChatColors packet",
-              player);
-          server.getElytraProxy().getStatistics().addBlockedConnection();
-          server.getElytraProxy().getStatistics().addBlockedBots();
-        } else if (packet.getSkinParts() == 0) {
-          logger.error(toStringPacket, player);
-          player.disconnect(
-              LegacyComponentSerializer
-                  .legacyAmpersand()
-                  .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK.CLIENT_CHECK_SETTINGS_SKIN_PARTS
-                      .replace("{NL}", "\n")
-                      .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                  ));
-          server.getElytraProxy().getLogger().error("{} doesn't send skin parts packet",
-              player);
-          server.getElytraProxy().getStatistics().addBlockedConnection();
-          server.getElytraProxy().getStatistics().addBlockedBots();
-        }
-        logger.info(toStringPacket, player);
-      }
-    }
-    checkedBySettings = true;
-    // ElytraProxy End
     return false; // will forward onto the server
   }
 
   @Override
   public boolean handle(Chat packet) {
-    // ElytraProxy
-    // TODO: Move to botfilter check
-    if (!willBeKickedChat) {
-      kickIfCheckNotPassed();
-      willBeKickedChat = true;
-    }
     VelocityServerConnection serverConnection = player.getConnectedServer();
     if (serverConnection == null) {
       return true;
@@ -267,8 +164,6 @@ public class ClientPlaySessionHandler implements MinecraftSessionHandler {
                       LegacyComponentSerializer
                           .legacyAmpersand()
                           .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.COMMAND_SPY_FORMAT
-                              .replace("{NL}", "\n")
-                              .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
                               .replace("{0}", player.getUsername())
                               .replace("{1}", "/" + originalCommand)
                           ));
@@ -278,8 +173,6 @@ public class ClientPlaySessionHandler implements MinecraftSessionHandler {
             if (server.getConfiguration().isLogCommandExecutions()) {
               logger.info(/*"{} -> executed command /{}", player, originalCommand);*/
                   Settings.IMP.MESSAGES.ELYTRAPROXY.CONSOLE_LOG_COMMAND_EXECUTIONS_FORMAT
-                      .replace("{NL}", "\n")
-                      .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
                       .replace("&", "§")
                       .replace("{0}", String.valueOf(player))
                       .replace("{1}", "/" + originalCommand)
@@ -293,10 +186,7 @@ public class ClientPlaySessionHandler implements MinecraftSessionHandler {
                 NamedTextColor.RED));*/
                 LegacyComponentSerializer
                     .legacyAmpersand()
-                    .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.GENERIC_ERROR
-                        .replace("{NL}", "\n")
-                        .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                    ));
+                    .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.GENERIC_ERROR));
             // ElytraProxy End
             return null;
           });
@@ -362,13 +252,6 @@ public class ClientPlaySessionHandler implements MinecraftSessionHandler {
         player.setClientBrand(PluginMessageUtil.readBrandMessage(packet.content()));
         backendConn.write(PluginMessageUtil
             .rewriteMinecraftBrand(packet, server.getVersion(), player.getProtocolVersion()));
-        // ElytraProxy Start
-        if (!checkedByBrand) {
-          logger.info("{} has client brand {}", player,
-              PluginMessageUtil.readBrandMessage(packet.content()));
-          checkedByBrand = true;
-        }
-        // ElytraProxy End
       } else if (BungeeCordMessageResponder.isBungeeCordMessage(packet)) {
         return true;
       } else {
@@ -454,12 +337,6 @@ public class ClientPlaySessionHandler implements MinecraftSessionHandler {
     if (smc != null && !smc.isClosed() && serverConnection.getPhase().consideredComplete()) {
       smc.write(buf.retain());
     }
-    // ElytraProxy
-    // TODO: Move to botfilter check
-    if (!willBeKickedUnk) {
-      kickIfCheckNotPassed();
-      willBeKickedUnk = true;
-    }
   }
 
   @Override
@@ -474,10 +351,7 @@ public class ClientPlaySessionHandler implements MinecraftSessionHandler {
         NamedTextColor.RED));*/
         LegacyComponentSerializer
             .legacyAmpersand()
-            .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.PLAYER_CONNECTION_ERROR
-                .replace("{NL}", "\n")
-                .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-            ));
+            .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.PLAYER_CONNECTION_ERROR));
   }
 
   @Override
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ConnectedPlayer.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ConnectedPlayer.java
index c479c957..9279aa05 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ConnectedPlayer.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ConnectedPlayer.java
@@ -48,7 +48,6 @@ import com.velocitypowered.api.proxy.server.RegisteredServer;
 import com.velocitypowered.api.util.GameProfile;
 import com.velocitypowered.api.util.ModInfo;
 import com.velocitypowered.proxy.VelocityServer;
-import com.velocitypowered.proxy.config.VelocityConfiguration;
 import com.velocitypowered.proxy.connection.MinecraftConnection;
 import com.velocitypowered.proxy.connection.MinecraftConnectionAssociation;
 import com.velocitypowered.proxy.connection.backend.VelocityServerConnection;
@@ -68,7 +67,6 @@ import com.velocitypowered.proxy.protocol.packet.title.GenericTitlePacket;
 import com.velocitypowered.proxy.server.VelocityRegisteredServer;
 import com.velocitypowered.proxy.tablist.VelocityTabList;
 import com.velocitypowered.proxy.tablist.VelocityTabListLegacy;
-import com.velocitypowered.proxy.util.ClosestLocaleMatcher;
 import com.velocitypowered.proxy.util.DurationUtils;
 import com.velocitypowered.proxy.util.collect.CappedSet;
 import io.netty.buffer.ByteBufUtil;
@@ -79,7 +77,6 @@ import java.util.Collection;
 import java.util.Collections;
 import java.util.List;
 import java.util.Locale;
-import java.util.Objects;
 import java.util.Optional;
 import java.util.Queue;
 import java.util.UUID;
@@ -93,14 +90,8 @@ import net.kyori.adventure.identity.Identity;
 import net.kyori.adventure.permission.PermissionChecker;
 import net.kyori.adventure.pointer.Pointers;
 import net.kyori.adventure.text.Component;
-import net.kyori.adventure.text.TranslatableComponent;
-import net.kyori.adventure.text.format.NamedTextColor;
 import net.kyori.adventure.text.serializer.gson.GsonComponentSerializer;
 import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
-import net.kyori.adventure.text.serializer.plain.PlainComponentSerializer;
-import net.kyori.adventure.title.Title;
-import net.kyori.adventure.title.Title.Times;
-import net.kyori.adventure.translation.GlobalTranslator;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
@@ -514,8 +505,6 @@ public class ConnectedPlayer implements MinecraftConnectionAssociation, Player {
       LegacyComponentSerializer
           .legacyAmpersand()
           .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.CONNECTED_SERVER_ERROR
-              .replace("{NL}", "\n")
-              .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
               .replace("{0}", server.getServerInfo().getName())
           );
     } else {
@@ -526,8 +515,6 @@ public class ConnectedPlayer implements MinecraftConnectionAssociation, Player {
       LegacyComponentSerializer
           .legacyAmpersand()
           .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.CONNECTING_SERVER_ERROR
-              .replace("{NL}", "\n")
-              .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
               .replace("{0}", server.getServerInfo().getName())
           );
       // ElytraProxy Start
@@ -561,8 +548,6 @@ public class ConnectedPlayer implements MinecraftConnectionAssociation, Player {
           LegacyComponentSerializer
               .legacyAmpersand()
               .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.MOVED_TO_NEW_SERVER
-                  .replace("{NL}", "\n")
-                  .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
                   .replace("{0}", server.getServerInfo().getName())
                   .replace("{1}", LegacyComponentSerializer.legacySection().serialize(disconnectReason))
               ), safe);
@@ -579,8 +564,6 @@ public class ConnectedPlayer implements MinecraftConnectionAssociation, Player {
           LegacyComponentSerializer
               .legacyAmpersand()
               .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.CANT_CONNECT
-                  .replace("{NL}", "\n")
-                  .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
                   .replace("{0}", server.getServerInfo().getName())
                   .replace("{1}", LegacyComponentSerializer.legacySection().serialize(disconnectReason))
               ), safe);
@@ -682,8 +665,6 @@ public class ConnectedPlayer implements MinecraftConnectionAssociation, Player {
                             LegacyComponentSerializer
                                 .legacyAmpersand()
                                 .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.MOVED_TO_NEW_SERVER
-                                    .replace("{NL}", "\n")
-                                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
                                     .replace("{0}", originalEvent.getServer().getServerInfo().getName())
                                     .replace("{1}", LegacyComponentSerializer.legacySection().serialize(friendlyReason))
                                 );
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/HandshakeSessionHandler.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/HandshakeSessionHandler.java
index aa1e8754..b14d7298 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/HandshakeSessionHandler.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/HandshakeSessionHandler.java
@@ -36,14 +36,10 @@ import com.velocitypowered.proxy.protocol.packet.LegacyDisconnect;
 import com.velocitypowered.proxy.protocol.packet.LegacyHandshake;
 import com.velocitypowered.proxy.protocol.packet.LegacyPing;
 import io.netty.buffer.ByteBuf;
-import java.net.InetAddress;
 import java.net.InetSocketAddress;
 import java.util.Optional;
 import net.elytrium.elytraproxy.config.Settings;
 import net.kyori.adventure.text.Component;
-import net.kyori.adventure.text.TextComponent;
-import net.kyori.adventure.text.TranslatableComponent;
-import net.kyori.adventure.text.format.NamedTextColor;
 import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -80,10 +76,7 @@ public class HandshakeSessionHandler implements MinecraftSessionHandler {
     ));*/
         LegacyComponentSerializer
             .legacyAmpersand()
-            .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.EXTREMELY_OLD_CLIENT
-                .replace("{NL}", "\n")
-                .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-            )));
+            .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.EXTREMELY_OLD_CLIENT)));
     // ElytraProxy End
     return true;
   }
@@ -94,7 +87,8 @@ public class HandshakeSessionHandler implements MinecraftSessionHandler {
         cleanVhost(handshake.getServerAddress()), handshake);
     StateRegistry nextState = getStateForProtocol(handshake.getNextStatus());
     if (nextState == null) {
-      LOGGER.error("{} provided invalid protocol {}", ic, handshake.getNextStatus());
+      // ElytraProxy - really spams to console :(
+      // LOGGER.error("{} provided invalid protocol {}", ic, handshake.getNextStatus());
       connection.close(true);
     } else {
       connection.setState(nextState);
@@ -142,10 +136,7 @@ public class HandshakeSessionHandler implements MinecraftSessionHandler {
       ic.disconnectQuietly(//Component.translatable("velocity.error.logging-in-too-fast"));
           LegacyComponentSerializer
               .legacyAmpersand()
-              .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.LOGGING_IN_TOO_FAST
-                  .replace("{NL}", "\n")
-                  .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-              ));
+              .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.LOGGING_IN_TOO_FAST));
       return;
     }
     */
@@ -162,10 +153,7 @@ public class HandshakeSessionHandler implements MinecraftSessionHandler {
           "velocity.error.modern-forwarding-needs-new-client"));*/
           LegacyComponentSerializer
               .legacyAmpersand()
-              .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.MODERN_FORWARDING_NEEDS_NEW_CLIENT
-                  .replace("{NL}", "\n")
-                  .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-              ));
+              .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.MODERN_FORWARDING_NEEDS_NEW_CLIENT));
       // ElytraProxy End
       return;
     }
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/LoginSessionHandler.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/LoginSessionHandler.java
index e150a591..acf75461 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/LoginSessionHandler.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/LoginSessionHandler.java
@@ -44,7 +44,6 @@ import com.velocitypowered.proxy.config.VelocityConfiguration;
 import com.velocitypowered.proxy.connection.MinecraftConnection;
 import com.velocitypowered.proxy.connection.MinecraftSessionHandler;
 import com.velocitypowered.proxy.protocol.StateRegistry;
-import com.velocitypowered.proxy.protocol.packet.Disconnect;
 import com.velocitypowered.proxy.protocol.packet.EncryptionRequest;
 import com.velocitypowered.proxy.protocol.packet.EncryptionResponse;
 import com.velocitypowered.proxy.protocol.packet.ServerLogin;
@@ -56,7 +55,6 @@ import java.security.GeneralSecurityException;
 import java.security.KeyPair;
 import java.security.MessageDigest;
 import java.util.Arrays;
-import java.util.Locale;
 import java.util.Optional;
 import java.util.UUID;
 import java.util.concurrent.CompletableFuture;
@@ -65,9 +63,7 @@ import java.util.concurrent.ThreadLocalRandom;
 import net.elytrium.elytraproxy.ElytraProxy;
 import net.elytrium.elytraproxy.config.Settings;
 import net.kyori.adventure.text.Component;
-import net.kyori.adventure.text.format.NamedTextColor;
 import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
-import net.kyori.adventure.translation.GlobalTranslator;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.asynchttpclient.ListenableFuture;
@@ -88,7 +84,7 @@ public class LoginSessionHandler implements MinecraftSessionHandler {
   private @MonotonicNonNull ConnectedPlayer connectedPlayer;
 
   LoginSessionHandler(VelocityServer server, MinecraftConnection mcConnection,
-      InitialInboundConnection inbound) {
+                      InitialInboundConnection inbound) {
     this.server = Preconditions.checkNotNull(server, "server");
     this.mcConnection = Preconditions.checkNotNull(mcConnection, "mcConnection");
     this.inbound = Preconditions.checkNotNull(inbound, "inbound");
@@ -161,10 +157,7 @@ public class LoginSessionHandler implements MinecraftSessionHandler {
                 NamedTextColor.RED));*/
                 LegacyComponentSerializer
                     .legacyAmpersand()
-                    .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.ONLINE_MODE_ONLY
-                        .replace("{NL}", "\n")
-                        .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                    ));
+                    .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.ONLINE_MODE_ONLY));
             // ElytraProxy End
           } else {
             // Something else went wrong
@@ -209,14 +202,32 @@ public class LoginSessionHandler implements MinecraftSessionHandler {
             return;
           }
 
-          if (!result.isForceOfflineMode() && (server.getConfiguration().isOnlineMode() || result
-              .isOnlineModeAllowed())) {
-            // Request encryption.
-            EncryptionRequest request = generateEncryptionRequest();
-            this.verify = Arrays.copyOf(request.getVerifyToken(), 4);
-            mcConnection.write(request);
+          InetSocketAddress adr = inbound.getRemoteAddress();
+          if (!result.isForceOfflineMode()
+              && (server.getConfiguration().isOnlineMode() || result.isOnlineModeAllowed())
+              // Reduce amount of Mojang API when player is not checked
+              && !server.getElytraProxy().shouldCheck(login.getUsername(), adr.getAddress())) {
+            if (Settings.IMP.AUTH.ENABLE) {
+              ListenableFuture<Response> isPremiumResponse = server.getElytraProxy()
+                  .isPremiumRequest(login.getUsername()).execute();
+
+              isPremiumResponse.addListener(() -> {
+                try {
+                  if (isPremiumResponse.get().getStatusCode() == 200) {
+                    requestEncryption();
+                  } else {
+                    initializeOfflineMode();
+                  }
+                } catch (InterruptedException | ExecutionException e) {
+                  logger.error("Unable to authenticate with Mojang", e);
+                  mcConnection.close(true);
+                }
+              }, mcConnection.eventLoop());
+            } else {
+              requestEncryption();
+            }
           } else {
-            initializePlayer(GameProfile.forOfflinePlayer(login.getUsername()), false);
+            initializeOfflineMode();
           }
         }, mcConnection.eventLoop())
         .exceptionally((ex) -> {
@@ -225,6 +236,16 @@ public class LoginSessionHandler implements MinecraftSessionHandler {
         });
   }
 
+  private void requestEncryption() {
+    EncryptionRequest request = generateEncryptionRequest();
+    this.verify = Arrays.copyOf(request.getVerifyToken(), 4);
+    mcConnection.write(request);
+  }
+
+  private void initializeOfflineMode() {
+    initializePlayer(GameProfile.forOfflinePlayer(login.getUsername()), false);
+  }
+
   private EncryptionRequest generateEncryptionRequest() {
     byte[] verify = new byte[4];
     ThreadLocalRandom.current().nextBytes(verify);
@@ -260,23 +281,10 @@ public class LoginSessionHandler implements MinecraftSessionHandler {
         player.disconnect0(
             LegacyComponentSerializer
                 .legacyAmpersand()
-                .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.ALREADY_CONNECTED_PROXY
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                ), true);
+                .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.ALREADY_CONNECTED_PROXY), true);
         // BotFilter BackPort
         return/* CompletableFuture.completedFuture(null)*/;
       }
-      /*
-      SkinSetup setup = server.getElytraProxy()
-          .getDatabase()
-          .getItem("skins", ImmutableMap.of("uuid", player.getUniqueId()), SkinSetup.class);
-      if (setup != null) {
-        List<GameProfile.Property> playerProfile = player.getGameProfileProperties();
-        playerProfile.add(new GameProfile.Property("textures", setup.texture, setup.signature));
-        player.setGameProfileProperties(playerProfile);
-      }
-      */
 
       logger.info("{} has connected", player);
 
@@ -310,20 +318,14 @@ public class LoginSessionHandler implements MinecraftSessionHandler {
         player.disconnect0(
             LegacyComponentSerializer
                 .legacyAmpersand()
-                .deserialize(Settings.IMP.MAIN_SETTINGS.MAINTENANCE.DISCONNECT_REASON
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                ), true);
+                .deserialize(Settings.IMP.MAIN_SETTINGS.MAINTENANCE.DISCONNECT_REASON), true);
         return;
       }
       if (Settings.IMP.MAIN_SETTINGS.BANNED_PROTOCOLS.contains(mcConnection.getProtocolVersion().getProtocol())) {
         player.disconnect0(
             LegacyComponentSerializer
                 .legacyAmpersand()
-                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK.PROTOCOL_BLOCKED
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                ), true);
+                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK.PROTOCOL_BLOCKED), true);
         return;
       }
       if (Settings.IMP.MAIN_SETTINGS.HOSTNAMES_MANAGER.ENABLE_CHECK_ON_CONNECTION) {
@@ -333,7 +335,7 @@ public class LoginSessionHandler implements MinecraftSessionHandler {
         preLoginCheck(player);
       } else {
         completeLoginProtocol(player, true);
-        initialize(player);
+        authOrInitialize(player);
       }
       // ElytraProxy End
     }, mcConnection.eventLoop()).exceptionally((ex) -> {
@@ -348,19 +350,12 @@ public class LoginSessionHandler implements MinecraftSessionHandler {
       player.disconnect0(
           LegacyComponentSerializer
               .legacyAmpersand()
-              .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK.NICK_BLOCKED
-                  .replace("{NL}", "\n")
-                  .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-              ), true);
+              .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK.NICK_BLOCKED), true);
       server.getElytraProxy().getStatistics().addBlockedConnection();
       server.getElytraProxy().getStatistics().addBlockedBots();
       return;
     }
     injectBotFilterOrFinishLogin(player);
-
-    // temp
-    //completeLoginProtocol(player, true);
-    //initialize(player);
   }
 
   // BotFilter BackPort Start
@@ -369,7 +364,7 @@ public class LoginSessionHandler implements MinecraftSessionHandler {
       server.getElytraProxy().setupPipelineAndStartCheck(player, this);
     } else {
       completeLoginProtocol(player, true);
-      initialize(player);
+      authOrInitialize(player);
     }
   }
 
@@ -449,6 +444,19 @@ public class LoginSessionHandler implements MinecraftSessionHandler {
     }
   }
 
+  // ElytraProxy Start
+  public void authOrInitialize(ConnectedPlayer player) {
+    if (Settings.IMP.AUTH.ENABLE && server.getElytraProxy().shouldAuth(player)) {
+      if (Settings.IMP.AUTH.ONLINE_MODE_NEED_AUTH || !player.isOnlineMode()) {
+        server.getElytraProxy().auth(player, this);
+        return;
+      }
+    }
+
+    player.getConnection().setSessionHandler(this);
+    initialize(player);
+  }
+  // ElytraProxy End
 
   public void initialize(ConnectedPlayer player) {
     mcConnection.setAssociation(player);
@@ -492,10 +500,7 @@ public class LoginSessionHandler implements MinecraftSessionHandler {
                     player.disconnect0(/*Component.translatable("velocity.error.already-connected-proxy"),*/
                         LegacyComponentSerializer
                             .legacyAmpersand()
-                            .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.ALREADY_CONNECTED_PROXY
-                                .replace("{NL}", "\n")
-                                .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                            ), true);
+                            .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.ALREADY_CONNECTED_PROXY), true);
                     return;
                   }
 
@@ -524,20 +529,17 @@ public class LoginSessionHandler implements MinecraftSessionHandler {
     return server.getEventManager().fire(event)
         .thenRunAsync(() -> {
           Optional<RegisteredServer> toTry = event.getInitialServer();
-          if (!toTry.isPresent()) {
+          if (toTry.isEmpty()) {
             // ElytraProxy Start
             player.disconnect0(/*Component.translatable("velocity.error.no-available-servers",
                 NamedTextColor.RED), true);*/
                 LegacyComponentSerializer
                     .legacyAmpersand()
-                    .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.NO_AVAILABLE_SERVERS
-                        .replace("{NL}", "\n")
-                        .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                    ), true);
+                    .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.NO_AVAILABLE_SERVERS), true);
             // ElytraProxy End
             return;
           }
-          player.createConnectionRequest(toTry.get()).fireAndForget();
+          player.createConnectionRequest(toTry.get()).connect();
         }, mcConnection.eventLoop());
   }
 
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/StatusSessionHandler.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/StatusSessionHandler.java
index 59b85a29..7022c8e9 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/StatusSessionHandler.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/StatusSessionHandler.java
@@ -86,9 +86,7 @@ public class StatusSessionHandler implements MinecraftSessionHandler {
             (Settings.IMP.MAIN_SETTINGS.MAINTENANCE.ENABLED
                 ? Settings.IMP.MAIN_SETTINGS.MAINTENANCE.PING_VERSION
                 : Settings.IMP.MAIN_SETTINGS.PING_VERSION)
-                    .replace('&', '§')
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)),
+                    .replace('&', '§')),
         new ServerPing.Players(/*server.getPlayerCount(), configuration.getShowMaxPlayers(),
             ImmutableList.of()),*/
             Settings.IMP.MAIN_SETTINGS.MAINTENANCE.ENABLED
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/util/ConnectionMessages.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/util/ConnectionMessages.java
index d3b99647..b16d750f 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/util/ConnectionMessages.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/util/ConnectionMessages.java
@@ -25,24 +25,15 @@ public class ConnectionMessages {
 
   public static final Component ALREADY_CONNECTED = LegacyComponentSerializer
       .legacyAmpersand()
-      .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.ALREADY_CONNECTED
-          .replace("{NL}", "\n")
-          .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-      );
+      .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.ALREADY_CONNECTED);
 
   public static final Component IN_PROGRESS = LegacyComponentSerializer
       .legacyAmpersand()
-      .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.ALREADY_CONNECTING
-          .replace("{NL}", "\n")
-          .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-      );
+      .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.ALREADY_CONNECTING);
 
   public static final Component INTERNAL_SERVER_CONNECTION_ERROR = LegacyComponentSerializer
       .legacyAmpersand()
-      .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.INTERNAL_SERVER_CONNECTION_ERROR
-          .replace("{NL}", "\n")
-          .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-      );
+      .deserialize(Settings.IMP.MESSAGES.VELOCITY.ERROR.INTERNAL_SERVER_CONNECTION_ERROR);
 
   private ConnectionMessages() {
     throw new AssertionError();
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/console/VelocityConsole.java b/proxy/src/main/java/com/velocitypowered/proxy/console/VelocityConsole.java
index 38361f27..2962473b 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/console/VelocityConsole.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/console/VelocityConsole.java
@@ -127,10 +127,7 @@ public final class VelocityConsole extends SimpleTerminalConsole implements Cons
         sendMessage(
             LegacyComponentSerializer
                 .legacyAmpersand()
-                .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.COMMAND_DOES_NOT_EXIST
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                ));
+                .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.COMMAND_DOES_NOT_EXIST));
       }
     } catch (Exception e) {
       logger.error("An error occurred while running this command.", e);
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/StateRegistry.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/StateRegistry.java
index 69022934..b8600c51 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/StateRegistry.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/StateRegistry.java
@@ -18,21 +18,6 @@
 package com.velocitypowered.proxy.protocol;
 
 import static com.google.common.collect.Iterables.getLast;
-import static com.velocitypowered.api.network.ProtocolVersion.MINECRAFT_1_12;
-import static com.velocitypowered.api.network.ProtocolVersion.MINECRAFT_1_12_1;
-import static com.velocitypowered.api.network.ProtocolVersion.MINECRAFT_1_13;
-import static com.velocitypowered.api.network.ProtocolVersion.MINECRAFT_1_14;
-import static com.velocitypowered.api.network.ProtocolVersion.MINECRAFT_1_15;
-import static com.velocitypowered.api.network.ProtocolVersion.MINECRAFT_1_16;
-import static com.velocitypowered.api.network.ProtocolVersion.MINECRAFT_1_16_2;
-import static com.velocitypowered.api.network.ProtocolVersion.MINECRAFT_1_16_4;
-import static com.velocitypowered.api.network.ProtocolVersion.MINECRAFT_1_17;
-import static com.velocitypowered.api.network.ProtocolVersion.MINECRAFT_1_7_2;
-import static com.velocitypowered.api.network.ProtocolVersion.MINECRAFT_1_8;
-import static com.velocitypowered.api.network.ProtocolVersion.MINECRAFT_1_9;
-import static com.velocitypowered.api.network.ProtocolVersion.MINECRAFT_1_9_4;
-import static com.velocitypowered.api.network.ProtocolVersion.MINIMUM_VERSION;
-import static com.velocitypowered.api.network.ProtocolVersion.SUPPORTED_VERSIONS;
 import static com.velocitypowered.proxy.protocol.ProtocolUtils.Direction;
 
 import com.velocitypowered.api.network.ProtocolVersion;
@@ -73,9 +58,11 @@ import io.netty.util.collection.IntObjectHashMap;
 import io.netty.util.collection.IntObjectMap;
 import it.unimi.dsi.fastutil.objects.Object2IntMap;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
+import java.util.ArrayList;
 import java.util.Collections;
 import java.util.EnumMap;
 import java.util.EnumSet;
+import java.util.List;
 import java.util.Map;
 import java.util.Objects;
 import java.util.function.Supplier;
@@ -86,20 +73,20 @@ public enum StateRegistry {
   HANDSHAKE {
     {
       serverbound.register(Handshake.class, Handshake::new,
-          map(0x00, MINECRAFT_1_7_2, false));
+          map(0x00, ProtocolVersion.MINECRAFT_1_7_2, false));
     }
   },
   STATUS {
     {
       serverbound.register(StatusRequest.class, () -> StatusRequest.INSTANCE,
-          map(0x00, MINECRAFT_1_7_2, false));
+          map(0x00, ProtocolVersion.MINECRAFT_1_7_2, false));
       serverbound.register(StatusPing.class, StatusPing::new,
-          map(0x01, MINECRAFT_1_7_2, false));
+          map(0x01, ProtocolVersion.MINECRAFT_1_7_2, false));
 
       clientbound.register(StatusResponse.class, StatusResponse::new,
-          map(0x00, MINECRAFT_1_7_2, false));
+          map(0x00, ProtocolVersion.MINECRAFT_1_7_2, false));
       clientbound.register(StatusPing.class, StatusPing::new,
-          map(0x01, MINECRAFT_1_7_2, false));
+          map(0x01, ProtocolVersion.MINECRAFT_1_7_2, false));
     }
   },
   PLAY {
@@ -108,197 +95,196 @@ public enum StateRegistry {
       clientbound.fallback = false;
 
       serverbound.register(TabCompleteRequest.class, TabCompleteRequest::new,
-          map(0x14, MINECRAFT_1_7_2, false),
-          map(0x01, MINECRAFT_1_9, false),
-          map(0x02, MINECRAFT_1_12, false),
-          map(0x01, MINECRAFT_1_12_1, false),
-          map(0x05, MINECRAFT_1_13, false),
-          map(0x06, MINECRAFT_1_14, false));
+          map(0x14, ProtocolVersion.MINECRAFT_1_7_2, false),
+          map(0x01, ProtocolVersion.MINECRAFT_1_9, false),
+          map(0x02, ProtocolVersion.MINECRAFT_1_12, false),
+          map(0x01, ProtocolVersion.MINECRAFT_1_12_1, false),
+          map(0x05, ProtocolVersion.MINECRAFT_1_13, false),
+          map(0x06, ProtocolVersion.MINECRAFT_1_14, false));
       serverbound.register(Chat.class, Chat::new,
-          map(0x01, MINECRAFT_1_7_2, false),
-          map(0x02, MINECRAFT_1_9, false),
-          map(0x03, MINECRAFT_1_12, false),
-          map(0x02, MINECRAFT_1_12_1, false),
-          map(0x03, MINECRAFT_1_14, false));
+          map(0x01, ProtocolVersion.MINECRAFT_1_7_2, false),
+          map(0x02, ProtocolVersion.MINECRAFT_1_9, false),
+          map(0x03, ProtocolVersion.MINECRAFT_1_12, false),
+          map(0x02, ProtocolVersion.MINECRAFT_1_12_1, false),
+          map(0x03, ProtocolVersion.MINECRAFT_1_14, false));
       serverbound.register(ClientSettings.class, ClientSettings::new,
-          map(0x15, MINECRAFT_1_7_2, false),
-          map(0x04, MINECRAFT_1_9, false),
-          map(0x05, MINECRAFT_1_12, false),
-          map(0x04, MINECRAFT_1_12_1, false),
-          map(0x05, MINECRAFT_1_14, false));
+          map(0x15, ProtocolVersion.MINECRAFT_1_7_2, false),
+          map(0x04, ProtocolVersion.MINECRAFT_1_9, false),
+          map(0x05, ProtocolVersion.MINECRAFT_1_12, false),
+          map(0x04, ProtocolVersion.MINECRAFT_1_12_1, false),
+          map(0x05, ProtocolVersion.MINECRAFT_1_14, false));
       serverbound.register(PluginMessage.class, PluginMessage::new,
-          map(0x17, MINECRAFT_1_7_2, false),
-          map(0x09, MINECRAFT_1_9, false),
-          map(0x0A, MINECRAFT_1_12, false),
-          map(0x09, MINECRAFT_1_12_1, false),
-          map(0x0A, MINECRAFT_1_13, false),
-          map(0x0B, MINECRAFT_1_14, false),
-          map(0x0A, MINECRAFT_1_17, false));
+          map(0x17, ProtocolVersion.MINECRAFT_1_7_2, false),
+          map(0x09, ProtocolVersion.MINECRAFT_1_9, false),
+          map(0x0A, ProtocolVersion.MINECRAFT_1_12, false),
+          map(0x09, ProtocolVersion.MINECRAFT_1_12_1, false),
+          map(0x0A, ProtocolVersion.MINECRAFT_1_13, false),
+          map(0x0B, ProtocolVersion.MINECRAFT_1_14, false),
+          map(0x0A, ProtocolVersion.MINECRAFT_1_17, false));
       serverbound.register(KeepAlive.class, KeepAlive::new,
-          map(0x00, MINECRAFT_1_7_2, false),
-          map(0x0B, MINECRAFT_1_9, false),
-          map(0x0C, MINECRAFT_1_12, false),
-          map(0x0B, MINECRAFT_1_12_1, false),
-          map(0x0E, MINECRAFT_1_13, false),
-          map(0x0F, MINECRAFT_1_14, false),
-          map(0x10, MINECRAFT_1_16, false),
-          map(0x0F, MINECRAFT_1_17, false));
+          map(0x00, ProtocolVersion.MINECRAFT_1_7_2, false),
+          map(0x0B, ProtocolVersion.MINECRAFT_1_9, false),
+          map(0x0C, ProtocolVersion.MINECRAFT_1_12, false),
+          map(0x0B, ProtocolVersion.MINECRAFT_1_12_1, false),
+          map(0x0E, ProtocolVersion.MINECRAFT_1_13, false),
+          map(0x0F, ProtocolVersion.MINECRAFT_1_14, false),
+          map(0x10, ProtocolVersion.MINECRAFT_1_16, false),
+          map(0x0F, ProtocolVersion.MINECRAFT_1_17, false));
       serverbound.register(ResourcePackResponse.class, ResourcePackResponse::new,
-          map(0x19, MINECRAFT_1_8, false),
-          map(0x16, MINECRAFT_1_9, false),
-          map(0x18, MINECRAFT_1_12, false),
-          map(0x1D, MINECRAFT_1_13, false),
-          map(0x1F, MINECRAFT_1_14, false),
-          map(0x20, MINECRAFT_1_16, false),
-          map(0x21, MINECRAFT_1_16_2, false));
+          map(0x19, ProtocolVersion.MINECRAFT_1_8, false),
+          map(0x16, ProtocolVersion.MINECRAFT_1_9, false),
+          map(0x18, ProtocolVersion.MINECRAFT_1_12, false),
+          map(0x1D, ProtocolVersion.MINECRAFT_1_13, false),
+          map(0x1F, ProtocolVersion.MINECRAFT_1_14, false),
+          map(0x20, ProtocolVersion.MINECRAFT_1_16, false),
+          map(0x21, ProtocolVersion.MINECRAFT_1_16_2, false));
       clientbound.register(BossBar.class, BossBar::new,
-          map(0x0C, MINECRAFT_1_9, false),
-          map(0x0D, MINECRAFT_1_15, false),
-          map(0x0C, MINECRAFT_1_16, false),
-          map(0x0D, MINECRAFT_1_17, false));
+          map(0x0C, ProtocolVersion.MINECRAFT_1_9, false),
+          map(0x0D, ProtocolVersion.MINECRAFT_1_15, false),
+          map(0x0C, ProtocolVersion.MINECRAFT_1_16, false),
+          map(0x0D, ProtocolVersion.MINECRAFT_1_17, false));
       clientbound.register(Chat.class, Chat::new,
-          map(0x02, MINECRAFT_1_7_2, true),
-          map(0x0F, MINECRAFT_1_9, true),
-          map(0x0E, MINECRAFT_1_13, true),
-          map(0x0F, MINECRAFT_1_15, true),
-          map(0x0E, MINECRAFT_1_16, true),
-          map(0x0F, MINECRAFT_1_17, true));
+          map(0x02, ProtocolVersion.MINECRAFT_1_7_2, true),
+          map(0x0F, ProtocolVersion.MINECRAFT_1_9, true),
+          map(0x0E, ProtocolVersion.MINECRAFT_1_13, true),
+          map(0x0F, ProtocolVersion.MINECRAFT_1_15, true),
+          map(0x0E, ProtocolVersion.MINECRAFT_1_16, true),
+          map(0x0F, ProtocolVersion.MINECRAFT_1_17, true));
       clientbound.register(TabCompleteResponse.class, TabCompleteResponse::new,
-          map(0x3A, MINECRAFT_1_7_2, false),
-          map(0x0E, MINECRAFT_1_9, false),
-          map(0x10, MINECRAFT_1_13, false),
-          map(0x11, MINECRAFT_1_15, false),
-          map(0x10, MINECRAFT_1_16, false),
-          map(0x0F, MINECRAFT_1_16_2, false),
-          map(0x11, MINECRAFT_1_17, false));
+          map(0x3A, ProtocolVersion.MINECRAFT_1_7_2, false),
+          map(0x0E, ProtocolVersion.MINECRAFT_1_9, false),
+          map(0x10, ProtocolVersion.MINECRAFT_1_13, false),
+          map(0x11, ProtocolVersion.MINECRAFT_1_15, false),
+          map(0x10, ProtocolVersion.MINECRAFT_1_16, false),
+          map(0x0F, ProtocolVersion.MINECRAFT_1_16_2, false),
+          map(0x11, ProtocolVersion.MINECRAFT_1_17, false));
       clientbound.register(AvailableCommands.class, AvailableCommands::new,
-          map(0x11, MINECRAFT_1_13, false),
-          map(0x12, MINECRAFT_1_15, false),
-          map(0x11, MINECRAFT_1_16, false),
-          map(0x10, MINECRAFT_1_16_2, false),
-          map(0x12, MINECRAFT_1_17, false));
+          map(0x11, ProtocolVersion.MINECRAFT_1_13, false),
+          map(0x12, ProtocolVersion.MINECRAFT_1_15, false),
+          map(0x11, ProtocolVersion.MINECRAFT_1_16, false),
+          map(0x10, ProtocolVersion.MINECRAFT_1_16_2, false),
+          map(0x12, ProtocolVersion.MINECRAFT_1_17, false));
       clientbound.register(PluginMessage.class, PluginMessage::new,
-          map(0x3F, MINECRAFT_1_7_2, false),
-          map(0x18, MINECRAFT_1_9, false),
-          map(0x19, MINECRAFT_1_13, false),
-          map(0x18, MINECRAFT_1_14, false),
-          map(0x19, MINECRAFT_1_15, false),
-          map(0x18, MINECRAFT_1_16, false),
-          map(0x17, MINECRAFT_1_16_2, false),
-          map(0x18, MINECRAFT_1_17, false));
+          map(0x3F, ProtocolVersion.MINECRAFT_1_7_2, false),
+          map(0x18, ProtocolVersion.MINECRAFT_1_9, false),
+          map(0x19, ProtocolVersion.MINECRAFT_1_13, false),
+          map(0x18, ProtocolVersion.MINECRAFT_1_14, false),
+          map(0x19, ProtocolVersion.MINECRAFT_1_15, false),
+          map(0x18, ProtocolVersion.MINECRAFT_1_16, false),
+          map(0x17, ProtocolVersion.MINECRAFT_1_16_2, false),
+          map(0x18, ProtocolVersion.MINECRAFT_1_17, false));
       clientbound.register(Disconnect.class, Disconnect::new,
-          map(0x40, MINECRAFT_1_7_2, false),
-          map(0x1A, MINECRAFT_1_9, false),
-          map(0x1B, MINECRAFT_1_13, false),
-          map(0x1A, MINECRAFT_1_14, false),
-          map(0x1B, MINECRAFT_1_15, false),
-          map(0x1A, MINECRAFT_1_16, false),
-          map(0x19, MINECRAFT_1_16_2, false),
-          map(0x1A, MINECRAFT_1_17, false));
+          map(0x40, ProtocolVersion.MINECRAFT_1_7_2, false),
+          map(0x1A, ProtocolVersion.MINECRAFT_1_9, false),
+          map(0x1B, ProtocolVersion.MINECRAFT_1_13, false),
+          map(0x1A, ProtocolVersion.MINECRAFT_1_14, false),
+          map(0x1B, ProtocolVersion.MINECRAFT_1_15, false),
+          map(0x1A, ProtocolVersion.MINECRAFT_1_16, false),
+          map(0x19, ProtocolVersion.MINECRAFT_1_16_2, false),
+          map(0x1A, ProtocolVersion.MINECRAFT_1_17, false));
       clientbound.register(KeepAlive.class, KeepAlive::new,
-          map(0x00, MINECRAFT_1_7_2, false),
-          map(0x1F, MINECRAFT_1_9, false),
-          map(0x21, MINECRAFT_1_13, false),
-          map(0x20, MINECRAFT_1_14, false),
-          map(0x21, MINECRAFT_1_15, false),
-          map(0x20, MINECRAFT_1_16, false),
-          map(0x1F, MINECRAFT_1_16_2, false),
-          map(0x21, MINECRAFT_1_17, false));
+          map(0x00, ProtocolVersion.MINECRAFT_1_7_2, false),
+          map(0x1F, ProtocolVersion.MINECRAFT_1_9, false),
+          map(0x21, ProtocolVersion.MINECRAFT_1_13, false),
+          map(0x20, ProtocolVersion.MINECRAFT_1_14, false),
+          map(0x21, ProtocolVersion.MINECRAFT_1_15, false),
+          map(0x20, ProtocolVersion.MINECRAFT_1_16, false),
+          map(0x1F, ProtocolVersion.MINECRAFT_1_16_2, false),
+          map(0x21, ProtocolVersion.MINECRAFT_1_17, false));
       clientbound.register(JoinGame.class, JoinGame::new,
-          map(0x01, MINECRAFT_1_7_2, false),
-          map(0x23, MINECRAFT_1_9, false),
-          map(0x25, MINECRAFT_1_13, false),
-          map(0x25, MINECRAFT_1_14, false),
-          map(0x26, MINECRAFT_1_15, false),
-          map(0x25, MINECRAFT_1_16, false),
-          map(0x24, MINECRAFT_1_16_2, false),
-          map(0x26, MINECRAFT_1_17, false));
+          map(0x01, ProtocolVersion.MINECRAFT_1_7_2, false),
+          map(0x23, ProtocolVersion.MINECRAFT_1_9, false),
+          map(0x25, ProtocolVersion.MINECRAFT_1_13, false),
+          map(0x25, ProtocolVersion.MINECRAFT_1_14, false),
+          map(0x26, ProtocolVersion.MINECRAFT_1_15, false),
+          map(0x25, ProtocolVersion.MINECRAFT_1_16, false),
+          map(0x24, ProtocolVersion.MINECRAFT_1_16_2, false),
+          map(0x26, ProtocolVersion.MINECRAFT_1_17, false));
       clientbound.register(Respawn.class, Respawn::new,
-          map(0x07, MINECRAFT_1_7_2, true),
-          map(0x33, MINECRAFT_1_9, true),
-          map(0x34, MINECRAFT_1_12, true),
-          map(0x35, MINECRAFT_1_12_1, true),
-          map(0x38, MINECRAFT_1_13, true),
-          map(0x3A, MINECRAFT_1_14, true),
-          map(0x3B, MINECRAFT_1_15, true),
-          map(0x3A, MINECRAFT_1_16, true),
-          map(0x39, MINECRAFT_1_16_2, true),
-          map(0x3D, MINECRAFT_1_17, true));
+          map(0x07, ProtocolVersion.MINECRAFT_1_7_2, true),
+          map(0x33, ProtocolVersion.MINECRAFT_1_9, true),
+          map(0x34, ProtocolVersion.MINECRAFT_1_12, true),
+          map(0x35, ProtocolVersion.MINECRAFT_1_12_1, true),
+          map(0x38, ProtocolVersion.MINECRAFT_1_13, true),
+          map(0x3A, ProtocolVersion.MINECRAFT_1_14, true),
+          map(0x3B, ProtocolVersion.MINECRAFT_1_15, true),
+          map(0x3A, ProtocolVersion.MINECRAFT_1_16, true),
+          map(0x39, ProtocolVersion.MINECRAFT_1_16_2, true),
+          map(0x3D, ProtocolVersion.MINECRAFT_1_17, true));
       clientbound.register(ResourcePackRequest.class, ResourcePackRequest::new,
-          map(0x48, MINECRAFT_1_8, false),
-          map(0x32, MINECRAFT_1_9, false),
-          map(0x33, MINECRAFT_1_12, false),
-          map(0x34, MINECRAFT_1_12_1, false),
-          map(0x37, MINECRAFT_1_13, false),
-          map(0x39, MINECRAFT_1_14, false),
-          map(0x3A, MINECRAFT_1_15, false),
-          map(0x39, MINECRAFT_1_16, false),
-          map(0x38, MINECRAFT_1_16_2, false),
-          map(0x3C, MINECRAFT_1_17, false));
+          map(0x48, ProtocolVersion.MINECRAFT_1_8, false),
+          map(0x32, ProtocolVersion.MINECRAFT_1_9, false),
+          map(0x33, ProtocolVersion.MINECRAFT_1_12, false),
+          map(0x34, ProtocolVersion.MINECRAFT_1_12_1, false),
+          map(0x37, ProtocolVersion.MINECRAFT_1_13, false),
+          map(0x39, ProtocolVersion.MINECRAFT_1_14, false),
+          map(0x3A, ProtocolVersion.MINECRAFT_1_15, false),
+          map(0x39, ProtocolVersion.MINECRAFT_1_16, false),
+          map(0x38, ProtocolVersion.MINECRAFT_1_16_2, false),
+          map(0x3C, ProtocolVersion.MINECRAFT_1_17, false));
       clientbound.register(HeaderAndFooter.class, HeaderAndFooter::new,
-          map(0x47, MINECRAFT_1_8, true),
-          map(0x48, MINECRAFT_1_9, true),
-          map(0x47, MINECRAFT_1_9_4, true),
-          map(0x49, MINECRAFT_1_12, true),
-          map(0x4A, MINECRAFT_1_12_1, true),
-          map(0x4E, MINECRAFT_1_13, true),
-          map(0x53, MINECRAFT_1_14, true),
-          map(0x54, MINECRAFT_1_15, true),
-          map(0x53, MINECRAFT_1_16, true),
-          map(0x5E, MINECRAFT_1_17, true));
+          map(0x47, ProtocolVersion.MINECRAFT_1_8, true),
+          map(0x48, ProtocolVersion.MINECRAFT_1_9, true),
+          map(0x47, ProtocolVersion.MINECRAFT_1_9_4, true),
+          map(0x49, ProtocolVersion.MINECRAFT_1_12, true),
+          map(0x4A, ProtocolVersion.MINECRAFT_1_12_1, true),
+          map(0x4E, ProtocolVersion.MINECRAFT_1_13, true),
+          map(0x53, ProtocolVersion.MINECRAFT_1_14, true),
+          map(0x54, ProtocolVersion.MINECRAFT_1_15, true),
+          map(0x53, ProtocolVersion.MINECRAFT_1_16, true),
+          map(0x5E, ProtocolVersion.MINECRAFT_1_17, true));
       clientbound.register(LegacyTitlePacket.class, LegacyTitlePacket::new,
-          map(0x45, MINECRAFT_1_8, true),
-          map(0x45, MINECRAFT_1_9, true),
-          map(0x47, MINECRAFT_1_12, true),
-          map(0x48, MINECRAFT_1_12_1, true),
-          map(0x4B, MINECRAFT_1_13, true),
-          map(0x4F, MINECRAFT_1_14, true),
-          map(0x50, MINECRAFT_1_15, true),
-          map(0x4F, MINECRAFT_1_16, MINECRAFT_1_16_4, true));
+          map(0x45, ProtocolVersion.MINECRAFT_1_8, true),
+          map(0x45, ProtocolVersion.MINECRAFT_1_9, true),
+          map(0x47, ProtocolVersion.MINECRAFT_1_12, true),
+          map(0x48, ProtocolVersion.MINECRAFT_1_12_1, true),
+          map(0x4B, ProtocolVersion.MINECRAFT_1_13, true),
+          map(0x4F, ProtocolVersion.MINECRAFT_1_14, true),
+          map(0x50, ProtocolVersion.MINECRAFT_1_15, true),
+          map(0x4F, ProtocolVersion.MINECRAFT_1_16, ProtocolVersion.MINECRAFT_1_16_4, true));
       clientbound.register(TitleSubtitlePacket.class, TitleSubtitlePacket::new,
-          map(0x57, MINECRAFT_1_17, true));
+          map(0x57, ProtocolVersion.MINECRAFT_1_17, true));
       clientbound.register(TitleTextPacket.class, TitleTextPacket::new,
-          map(0x59, MINECRAFT_1_17, true));
+          map(0x59, ProtocolVersion.MINECRAFT_1_17, true));
       clientbound.register(TitleActionbarPacket.class, TitleActionbarPacket::new,
-          map(0x41, MINECRAFT_1_17, true));
+          map(0x41, ProtocolVersion.MINECRAFT_1_17, true));
       clientbound.register(TitleTimesPacket.class, TitleTimesPacket::new,
-          map(0x5A, MINECRAFT_1_17, true));
+          map(0x5A, ProtocolVersion.MINECRAFT_1_17, true));
       clientbound.register(TitleClearPacket.class, TitleClearPacket::new,
-          map(0x10, MINECRAFT_1_17, true));
+          map(0x10, ProtocolVersion.MINECRAFT_1_17, true));
       clientbound.register(PlayerListItem.class, PlayerListItem::new,
-          map(0x38, MINECRAFT_1_7_2, false),
-          map(0x2D, MINECRAFT_1_9, false),
-          map(0x2E, MINECRAFT_1_12_1, false),
-          map(0x30, MINECRAFT_1_13, false),
-          map(0x33, MINECRAFT_1_14, false),
-          map(0x34, MINECRAFT_1_15, false),
-          map(0x33, MINECRAFT_1_16, false),
-          map(0x32, MINECRAFT_1_16_2, false),
-          map(0x36, MINECRAFT_1_17, false));
+          map(0x38, ProtocolVersion.MINECRAFT_1_7_2, false),
+          map(0x2D, ProtocolVersion.MINECRAFT_1_9, false),
+          map(0x2E, ProtocolVersion.MINECRAFT_1_12_1, false),
+          map(0x30, ProtocolVersion.MINECRAFT_1_13, false),
+          map(0x33, ProtocolVersion.MINECRAFT_1_14, false),
+          map(0x34, ProtocolVersion.MINECRAFT_1_15, false),
+          map(0x33, ProtocolVersion.MINECRAFT_1_16, false),
+          map(0x32, ProtocolVersion.MINECRAFT_1_16_2, false),
+          map(0x36, ProtocolVersion.MINECRAFT_1_17, false));
     }
   },
   LOGIN {
     {
       serverbound.register(ServerLogin.class, ServerLogin::new,
-          map(0x00, MINECRAFT_1_7_2, false));
+          map(0x00, ProtocolVersion.MINECRAFT_1_7_2, false));
       serverbound.register(EncryptionResponse.class, EncryptionResponse::new,
-          map(0x01, MINECRAFT_1_7_2, false));
+          map(0x01, ProtocolVersion.MINECRAFT_1_7_2, false));
       serverbound.register(LoginPluginResponse.class, LoginPluginResponse::new,
-          map(0x02, MINECRAFT_1_13, false));
+          map(0x02, ProtocolVersion.MINECRAFT_1_13, false));
       clientbound.register(Disconnect.class, Disconnect::new,
-          map(0x00, MINECRAFT_1_7_2, false));
+          map(0x00, ProtocolVersion.MINECRAFT_1_7_2, false));
       clientbound.register(EncryptionRequest.class, EncryptionRequest::new,
-          map(0x01, MINECRAFT_1_7_2, false));
+          map(0x01, ProtocolVersion.MINECRAFT_1_7_2, false));
       clientbound.register(ServerLoginSuccess.class, ServerLoginSuccess::new,
-          map(0x02, MINECRAFT_1_7_2, false));
+          map(0x02, ProtocolVersion.MINECRAFT_1_7_2, false));
       clientbound.register(SetCompression.class, SetCompression::new,
-          map(0x03, MINECRAFT_1_8, false));
+          map(0x03, ProtocolVersion.MINECRAFT_1_8, false));
       clientbound.register(LoginPluginMessage.class, LoginPluginMessage::new,
-          map(0x04, MINECRAFT_1_13, false));
+          map(0x04, ProtocolVersion.MINECRAFT_1_13, false));
     }
-  }, BotFilter {
-
-  };
+  },
+  VIRTUAL {};
 
   public static final int STATUS_ID = 1;
   public static final int LOGIN_ID = 2;
@@ -329,7 +315,7 @@ public enum StateRegistry {
       ProtocolRegistry registry = versions.get(version);
       if (registry == null) {
         if (fallback) {
-          return getProtocolRegistry(MINIMUM_VERSION);
+          return getProtocolRegistry(ProtocolVersion.MINIMUM_VERSION);
         }
         throw new IllegalArgumentException("Could not find data for protocol version " + version);
       }
@@ -338,7 +324,7 @@ public enum StateRegistry {
 
     // BotFilter backport: Make public
     public <P extends MinecraftPacket> void register(Class<P> clazz, Supplier<P> packetSupplier,
-        PacketMapping... mappings) {
+                                                     PacketMapping... mappings) {
       if (mappings.length == 0) {
         throw new IllegalArgumentException("At least one mapping must be provided.");
       }
@@ -360,9 +346,9 @@ public enum StateRegistry {
         }
         ProtocolVersion to = current == next ? lastValid != null
             ? lastValid
-            : getLast(SUPPORTED_VERSIONS) : next.protocolVersion;
+            : getLast(ProtocolVersion.SUPPORTED_VERSIONS) : next.protocolVersion;
 
-        if (from.compareTo(to) >= 0 && from != getLast(SUPPORTED_VERSIONS)) {
+        if (from.compareTo(to) >= 0 && from != getLast(ProtocolVersion.SUPPORTED_VERSIONS)) {
           throw new IllegalArgumentException(String.format(
               "Next mapping version (%s) should be lower then current (%s)", to, from));
         }
@@ -396,6 +382,17 @@ public enum StateRegistry {
       }
     }
 
+    public PacketMapping[] getMappingsForPacket(Class<? extends MinecraftPacket> packet, boolean encodeOnly) {
+      ProtocolVersion from = ProtocolVersion.MINIMUM_VERSION;
+      ProtocolVersion to = ProtocolVersion.MAXIMUM_VERSION;
+      List<PacketMapping> mappings = new ArrayList<>();
+      for (ProtocolVersion protocol : EnumSet.range(from, to)) {
+        int id = getProtocolRegistry(protocol).getPacketId(packet);
+        mappings.add(new PacketMapping(id, protocol, null, encodeOnly));
+      }
+      return mappings.toArray(new PacketMapping[0]);
+    }
+
     public class ProtocolRegistry {
 
       public final ProtocolVersion version;
@@ -469,7 +466,7 @@ public enum StateRegistry {
     private final @Nullable ProtocolVersion lastValidProtocolVersion;
 
     PacketMapping(int id, ProtocolVersion protocolVersion,
-        ProtocolVersion lastValidProtocolVersion, boolean packetDecoding) {
+                  ProtocolVersion lastValidProtocolVersion, boolean packetDecoding) {
       this.id = id;
       this.protocolVersion = protocolVersion;
       this.lastValidProtocolVersion = lastValidProtocolVersion;
@@ -530,7 +527,7 @@ public enum StateRegistry {
    */
   // BotFilter backport: Make public
   public static PacketMapping map(int id, ProtocolVersion version,
-      ProtocolVersion lastValidProtocolVersion, boolean encodeOnly) {
+                                  ProtocolVersion lastValidProtocolVersion, boolean encodeOnly) {
     return new PacketMapping(id, version, lastValidProtocolVersion, encodeOnly);
   }
 }
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/netty/GS4QueryHandler.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/netty/GS4QueryHandler.java
index 68eaebde..ba38d065 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/netty/GS4QueryHandler.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/netty/GS4QueryHandler.java
@@ -109,9 +109,7 @@ public class GS4QueryHandler extends SimpleChannelInboundHandler<DatagramPacket>
             Settings.IMP.MAIN_SETTINGS.MAINTENANCE.ENABLED
                 ? Settings.IMP.MAIN_SETTINGS.MAINTENANCE.PING_VERSION
                 : Settings.IMP.MAIN_SETTINGS.PING_VERSION)
-                    .replace('&', '§')
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX))
+                    .replace('&', '§'))
         .plugins(
             server.getConfiguration().shouldQueryShowPlugins()
                 ? getRealPluginInformation()
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java
index 9899ef0c..31b25644 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java
@@ -75,6 +75,10 @@ public class JoinGame implements MinecraftPacket {
     this.dimension = dimension;
   }
 
+  public void setPartialHashedSeed(long partialHashedSeed) {
+    this.partialHashedSeed = partialHashedSeed;
+  }
+
   public long getPartialHashedSeed() {
     return partialHashedSeed;
   }
@@ -159,6 +163,10 @@ public class JoinGame implements MinecraftPacket {
     this.biomeRegistry = biomeRegistry;
   }
 
+  public void setCurrentDimensionData(DimensionData dimensionData) {
+    this.currentDimensionData = dimensionData;
+  }
+
   public DimensionData getCurrentDimensionData() {
     return currentDimensionData;
   }
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/ElytraProxy.java b/proxy/src/main/java/net/elytrium/elytraproxy/ElytraProxy.java
index 6fbbf64a..51bf41c8 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/ElytraProxy.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/ElytraProxy.java
@@ -21,37 +21,47 @@ import com.velocitypowered.api.command.CommandManager;
 import com.velocitypowered.api.command.CommandSource;
 import com.velocitypowered.api.proxy.InboundConnection;
 import com.velocitypowered.proxy.VelocityServer;
-import com.velocitypowered.proxy.connection.MinecraftConnection;
 import com.velocitypowered.proxy.connection.client.ConnectedPlayer;
 import com.velocitypowered.proxy.connection.client.LoginSessionHandler;
-import com.velocitypowered.proxy.network.Connections;
+import com.velocitypowered.proxy.protocol.StateRegistry;
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
-import io.netty.channel.ChannelPipeline;
 import java.io.BufferedReader;
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStreamReader;
+import java.net.InetAddress;
+import java.net.InetSocketAddress;
 import java.net.URL;
 import java.net.URLConnection;
+import java.net.http.HttpClient;
 import java.nio.charset.StandardCharsets;
+import java.sql.SQLException;
+import java.util.HashMap;
+import java.util.Locale;
+import java.util.concurrent.ExecutionException;
 import lombok.Getter;
 import lombok.ToString;
-import net.elytrium.elytraproxy.botfilter.captcha.CaptchaGeneration;
-import net.elytrium.elytraproxy.botfilter.protocol.cache.netty.MultiplePreparedPacketsEncoder;
-import net.elytrium.elytraproxy.botfilter.protocol.cache.netty.PreparedPacketEncoder;
-import net.elytrium.elytraproxy.botfilter.server.BotFilterSessionHandler;
-import net.elytrium.elytraproxy.botfilter.server.VirtualServer;
+import net.elytrium.elytraproxy.auth.handler.AuthSessionHandler;
+import net.elytrium.elytraproxy.auth.model.RegisteredPlayer;
+import net.elytrium.elytraproxy.botfilter.CaptchaGeneration;
+import net.elytrium.elytraproxy.botfilter.handler.BotFilterSessionHandler;
 import net.elytrium.elytraproxy.commands.AlertCommand;
 import net.elytrium.elytraproxy.commands.ElytraProxyCommand;
 import net.elytrium.elytraproxy.commands.FindCommand;
 import net.elytrium.elytraproxy.commands.SendCommand;
 import net.elytrium.elytraproxy.config.Settings;
 import net.elytrium.elytraproxy.database.Database;
+import net.elytrium.elytraproxy.database.MySqlDatabase;
 import net.elytrium.elytraproxy.stats.Statistics;
+import net.elytrium.elytraproxy.virtual.protocol.VirtualProtocol;
+import net.elytrium.elytraproxy.virtual.server.VirtualServer;
 import net.kyori.adventure.identity.Identity;
 import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.asynchttpclient.BoundRequestBuilder;
+import org.asynchttpclient.ListenableFuture;
+import org.asynchttpclient.Response;
 
 @Getter
 @ToString
@@ -62,52 +72,54 @@ public class ElytraProxy {
   private final Logger logger = LogManager.getLogger("ElytraProxy");
   private Database database;
 
-  // BotFilter start
-  private final Logger bfLogger = LogManager.getLogger("BotFilter");
-
   private final VelocityServer velocityServer;
   private final VirtualServer virtualServer;
   private final Statistics statistics;
-  // BotFilter end
+
+  private final HashMap<String, InetAddress> cachedBotChecks = new HashMap<>();
+  private final HashMap<String, InetAddress> cachedAuthChecks = new HashMap<>();
+  private final HttpClient httpClient = HttpClient.newBuilder()
+      .version(HttpClient.Version.HTTP_2)
+      .build();
+
+  static {
+    VirtualProtocol.init();
+  }
 
   public ElytraProxy(VelocityServer velocityServer) {
     Settings.IMP.reload(new File("ElytraProxy", "config.yml"));
+    initDatabase(velocityServer);
     statistics = new Statistics();
     statistics.startUpdating();
     // BotFilter start
+    CaptchaGeneration.init();
     this.velocityServer = velocityServer;
     this.virtualServer = new VirtualServer(this);
     this.virtualServer.reload();
-    CaptchaGeneration.init();
     // BotFilter end
     registerCommand(velocityServer);
-    //initDatabase(velocityServer);
     checkForUpdates();
     logger.info("ElytraProxy was loaded.");
   }
 
-  ///**
-  // * Initializes database, creates missing tables.
-  // * Инициализирует базу данных, создает отсутствующие таблицы.
-  // */
-  /*
+  /**
+   * Initializes database, creates missing tables.
+   * Инициализирует базу данных, создает отсутствующие таблицы.
+   */
+
   public void initDatabase(VelocityServer server) {
-    try {
-      MysqlConfig config = getConfig().getMySql();
-      database = new MySqlDatabase(config.hostname, config.database, config.user, config.password);
-
-      database.makeTable("skins", ImmutableMap.of(
-              "uuid", "VARCHAR(36)",
-              "texture", "VARCHAR(256)",
-              "signature", "VARCHAR(256)"
-      ));
-    } catch (SQLException e) {
-      logger.error(e);
-      logger.error("больно" getConfig().getMessages().error.mysqlLoadFailed );
-      server.shutdown();
+    Settings.DATABASE config = Settings.IMP.DATABASE;
+    if (config.ENABLED) {
+      try {
+        database = new MySqlDatabase(config.HOSTNAME, config.DATABASE, config.USER, config.PASSWORD);
+        database.makeTable(Settings.IMP.AUTH.TABLE, RegisteredPlayer.getDatabaseItem());
+      } catch (SQLException e) {
+        logger.error(e);
+        logger.error(Settings.IMP.MESSAGES.ELYTRAPROXY.DB_FAILURE);
+        server.shutdown();
+      }
     }
   }
-  */
 
   /**
    * Initializes ElytraProxy commands.
@@ -128,48 +140,118 @@ public class ElytraProxy {
   }
 
   public boolean shouldCheck(ConnectedPlayer player) {
-    return true;
+    InetSocketAddress adr = (InetSocketAddress) player.getConnection().getRemoteAddress();
+    return shouldCheck(player.getUsername(), adr.getAddress());
+  }
+
+  public boolean shouldCheck(String nickname, InetAddress ip) {
+    if (!Settings.IMP.ANTIBOT.ENABLE) {
+      return false;
+    }
+    if (Settings.IMP.ANTIBOT.CACHE_SUCCEED_USERS) {
+      if (cachedBotChecks.containsKey(nickname)) {
+        return !ip.equals(cachedBotChecks.get(nickname));
+      } else {
+        return true;
+      }
+    } else {
+      return true;
+    }
+  }
+
+  public boolean shouldAuth(ConnectedPlayer player) {
+    if (Settings.IMP.AUTH.CACHE_AUTH_USERS) {
+      if (cachedAuthChecks.containsKey(player.getUsername())) {
+        InetSocketAddress adr = (InetSocketAddress) player.getConnection().getRemoteAddress();
+        return !adr.getAddress().equals(cachedAuthChecks.get(player.getUsername()));
+      } else {
+        return true;
+      }
+    } else {
+      return true;
+    }
+  }
+
+  public void cacheSucceedUser(ConnectedPlayer player) {
+    if (Settings.IMP.ANTIBOT.CACHE_SUCCEED_USERS) {
+      cachedBotChecks.remove(player.getUsername());
+      InetSocketAddress adr = (InetSocketAddress) player.getConnection().getRemoteAddress();
+      cachedBotChecks.put(player.getUsername(), adr.getAddress());
+    }
+  }
+
+  public void cacheAuthUser(ConnectedPlayer player) {
+    if (Settings.IMP.AUTH.CACHE_AUTH_USERS) {
+      cachedAuthChecks.remove(player.getUsername());
+      InetSocketAddress adr = (InetSocketAddress) player.getConnection().getRemoteAddress();
+      cachedAuthChecks.put(player.getUsername(), adr.getAddress());
+    }
   }
 
   public void setupPipelineAndStartCheck(ConnectedPlayer player, LoginSessionHandler handler) {
     try {
-      if (!player.isOnlineMode() && velocityServer.getConfiguration().isOnlineMode()) {
+      BotFilterSessionHandler botFilterSessionHandler =
+          new BotFilterSessionHandler(player, handler, virtualServer);
+
+      virtualServer.spawnPlayer(botFilterSessionHandler);
+    } catch (Throwable t) {
+      logger.error("Error", t);
+    }
+  }
+
+  public void auth(ConnectedPlayer player, LoginSessionHandler handler) {
+    if (player.getConnection().getState() != StateRegistry.VIRTUAL) {
+      player.getConnection().setState(StateRegistry.PLAY);
+    }
+    String nickname = player.getUsername().toLowerCase(Locale.ROOT);
+    for (char character : nickname.toCharArray()) {
+      if (!Settings.IMP.AUTH.ALLOWED_NICKNAME_CHARS.contains(String.valueOf(character))) {
+        player.getConnection().closeWith(virtualServer.getPackets().getNicknameInvalid());
         return;
       }
+    }
 
-      BotFilterSessionHandler sessionHandler = new BotFilterSessionHandler(player, handler,
-          virtualServer);
-      bfLogger.info(sessionHandler.getPlayer().getUsername());
+    if (!Settings.IMP.AUTH.ONLINE_MODE_NEED_AUTH) {
+      ListenableFuture<Response> isPremiumResponse = isPremiumRequest(nickname).execute();
 
-      MinecraftConnection connection = sessionHandler.getPlayer().getConnection();
-      connection.setSessionHandler(sessionHandler);
+      isPremiumResponse.addListener(() -> {
+        try {
+          if (isPremiumResponse.get().getStatusCode() == 200) {
+            player.getConnection().closeWith(virtualServer.getPackets().getNicknamePremium());
+          } else {
+            sendToAuthServer(player, handler, nickname);
+          }
+        } catch (InterruptedException | ExecutionException e) {
+          logger.error("Unable to authenticate with Mojang", e);
+          player.getConnection().close(true);
+        }
+      }, player.getConnection().eventLoop());
+    }
+  }
 
-      ChannelPipeline pipeline = connection.getChannel().pipeline();
-      System.out.println("pre changed");
-      if (sessionHandler.getPlayer().isOnlineMode()) {
-        pipeline.addAfter(Connections.CIPHER_ENCODER, "prepared-encoder",
-            PreparedPacketEncoder.getEncoder(connection.getProtocolVersion(), true));
-      } else {
-        pipeline.addFirst("prepared-encoder",
-            PreparedPacketEncoder.getEncoder(connection.getProtocolVersion(), false));
-        pipeline.addFirst("multipleprepared-encoder",
-            MultiplePreparedPacketsEncoder.getEncoder(connection.getProtocolVersion()));
-      }
-      System.out.println("changed");
+  public BoundRequestBuilder isPremiumRequest(String nickname) {
+    return velocityServer.getAsyncHttpClient()
+        .prepareGet("https://api.mojang.com/users/profiles/minecraft/" + nickname);
+  }
+
+  private void sendToAuthServer(ConnectedPlayer player, LoginSessionHandler handler, String nickname) {
+    try {
+      AuthSessionHandler authSessionHandler =
+          new AuthSessionHandler(player, handler, virtualServer, nickname);
 
-      virtualServer.spawnPlayer(sessionHandler);
+      virtualServer.spawnPlayer(authSessionHandler);
     } catch (Throwable t) {
-      bfLogger.error("Error", t);
+      logger.error("Error", t);
     }
   }
 
   public void checkHostname(ConnectedPlayer player, InboundConnection inbound, HostnameCheckType type) {
     boolean isLogin = (type == HostnameCheckType.LOGIN);
     if (isLogin) {
-      if (!player.getVirtualHost().isPresent()) {
+      if (player.getVirtualHost().isEmpty()) {
         return;
       }
-      if (!inbound.getVirtualHost().isPresent()) {
+      if (inbound.getVirtualHost().isEmpty()) {
         return;
       }
     }
@@ -235,19 +317,13 @@ public class ElytraProxy {
       source.sendMessage(Identity.nil(),
           LegacyComponentSerializer
               .legacyAmpersand()
-              .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.RELOAD_SUCCESS
-                  .replace("{NL}", "\n")
-                  .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-              ));
+              .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.RELOAD_SUCCESS));
     } catch (Exception e) {
       logger.error("Unable to reload configuration", e);
       source.sendMessage(Identity.nil(),
           LegacyComponentSerializer
               .legacyAmpersand()
-              .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.RELOAD_FAILURE
-                  .replace("{NL}", "\n")
-                  .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-              ));
+              .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.RELOAD_FAILURE));
     }
   }
 
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/auth/handler/AuthSessionHandler.java b/proxy/src/main/java/net/elytrium/elytraproxy/auth/handler/AuthSessionHandler.java
new file mode 100644
index 00000000..f4c1c720
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/auth/handler/AuthSessionHandler.java
@@ -0,0 +1,184 @@
+/*
+ * Copyright (C) 2021 Elytrium
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.auth.handler;
+
+import at.favre.lib.crypto.bcrypt.BCrypt;
+import com.google.common.collect.ImmutableMap;
+import com.velocitypowered.proxy.connection.MinecraftConnection;
+import com.velocitypowered.proxy.connection.MinecraftSessionHandler;
+import com.velocitypowered.proxy.connection.client.ConnectedPlayer;
+import com.velocitypowered.proxy.protocol.packet.Chat;
+import java.net.InetSocketAddress;
+import java.nio.charset.StandardCharsets;
+import java.util.List;
+import java.util.Map;
+import java.util.concurrent.atomic.AtomicInteger;
+import net.elytrium.elytraproxy.auth.model.RegisteredPlayer;
+import net.elytrium.elytraproxy.config.Settings;
+import net.elytrium.elytraproxy.database.Database;
+import net.elytrium.elytraproxy.virtual.server.ServerPackets;
+import net.elytrium.elytraproxy.virtual.server.VirtualServer;
+import net.elytrium.elytraproxy.virtual.server.VirtualSessionHandler;
+
+public class AuthSessionHandler extends VirtualSessionHandler {
+  private final Database database;
+  private final RegisteredPlayer playerInfo;
+  private final ServerPackets packets;
+  private final MinecraftConnection connection;
+  private final String ip;
+
+  private int attempts = Settings.IMP.AUTH.LOGIN_ATTEMPTS;
+
+  public AuthSessionHandler(
+      ConnectedPlayer player, MinecraftSessionHandler originalHandler, VirtualServer virtualServer, String nickname) {
+    super(player, originalHandler, virtualServer);
+    this.database = virtualServer.getElytraProxy().getDatabase();
+    this.packets = virtualServer.getPackets();
+    this.connection = player.getConnection();
+    this.playerInfo = fetchInfo(nickname);
+    this.ip = ((InetSocketAddress) connection.getRemoteAddress()).getAddress().getHostAddress();
+  }
+
+
+  @Override
+  public boolean handle(Chat chat) {
+    String[] args = chat.getMessage().split(" ");
+    if (args.length != 0) {
+      switch (args[0]) {
+        case "/reg":
+        case "/register":
+        case "/r":
+          if (args.length >= 3 && args[1].equals(args[2])) {
+            register(args[1]);
+            finish();
+          } else {
+            sendMessage();
+          }
+          break;
+        case "/log":
+        case "/login":
+        case "/l":
+          if (args.length >= 2) {
+            if (checkPassword(args[1])) {
+              finish();
+            } else if (attempts-- != 0) {
+              connection.write(packets.getWrongPasswordChat());
+            } else {
+              connection.closeWith(packets.getWrongPassword());
+            }
+          }
+          break;
+        default:
+          sendMessage();
+          break;
+      }
+    }
+    return true;
+  }
+
+  @Override
+  public void onSpawn() {
+    virtualServer.loginComplete(this);
+    connection.write(packets.getAuthPosAndLook());
+    if (playerInfo == null) {
+      checkIp();
+    }
+    sendMessage();
+  }
+
+  private RegisteredPlayer fetchInfo(String nickname) {
+    return database.getItem(
+        Settings.IMP.AUTH.TABLE,
+        ImmutableMap.of("nickname", nickname),
+        RegisteredPlayer.class);
+  }
+
+  private boolean checkPassword(String password) {
+    return BCrypt.verifyer().verify(
+        password.getBytes(StandardCharsets.UTF_8),
+        playerInfo.getHash().getBytes(StandardCharsets.UTF_8)
+    ).verified;
+  }
+
+  private void checkIp() {
+    List<RegisteredPlayer> alreadyRegistered = database.getItems(
+        Settings.IMP.AUTH.TABLE,
+        ImmutableMap.of("ip", ip),
+        RegisteredPlayer.class
+    );
+
+    AtomicInteger sizeOfInvalid = new AtomicInteger();
+    long checkDate = System.currentTimeMillis() - Settings.IMP.AUTH.IP_LIMIT_VALID_TIME;
+    Map<String, Object> clearIpMap = ImmutableMap.of("ip", "");
+
+    alreadyRegistered.stream()
+        .filter(e -> e.getRegdate() < checkDate)
+        .map(e -> ImmutableMap.of("nickname", (Object) e.getNickname()))
+        .forEach(e -> {
+          database.updateMap(
+              Settings.IMP.AUTH.TABLE, e, clearIpMap
+          );
+          sizeOfInvalid.getAndIncrement();
+        });
+
+    int sizeOfValid = alreadyRegistered.size() - sizeOfInvalid.get();
+    if (sizeOfValid >= Settings.IMP.AUTH.IP_LIMIT_REGISTRATIONS) {
+      connection.closeWith(packets.getIpLimit());
+    }
+  }
+
+  private void register(String password) {
+    String hash = BCrypt.withDefaults().hashToString(
+        Settings.IMP.AUTH.BCRYPT_COST,
+        password.toCharArray()
+    );
+
+    RegisteredPlayer registeredPlayer = new RegisteredPlayer(
+        nickname,
+        hash,
+        ip,
+        System.currentTimeMillis()
+    );
+
+    database.insert(
+        Settings.IMP.AUTH.TABLE,
+        registeredPlayer,
+        RegisteredPlayer.class,
+        false
+    );
+  }
+
+  private void finish() {
+    disconnected();
+    connection.closeWith(packets.getSuccessfulAuth());
+    // TODO: Fix connection to real server
+    // VirtualServer -> Real Server causes infinite "Loading terrain"
+    // I think it's because Velocity doesn't send Respawn packet on "first" join
+    // connection.setSessionHandler(originalHandler);
+    // ((LoginSessionHandler) originalHandler).initialize(player);
+    virtualServer.getElytraProxy().cacheAuthUser(player);
+  }
+
+  private void sendMessage() {
+    if (playerInfo == null) {
+      connection.write(packets.getRegisterChat());
+    } else {
+      connection.write(packets.getLoginChat());
+    }
+  }
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/auth/model/RegisteredPlayer.java b/proxy/src/main/java/net/elytrium/elytraproxy/auth/model/RegisteredPlayer.java
new file mode 100644
index 00000000..3283c320
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/auth/model/RegisteredPlayer.java
@@ -0,0 +1,46 @@
+/*
+ * Copyright (C) 2021 Elytrium
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.auth.model;
+
+import com.google.common.collect.ImmutableMap;
+import java.util.Map;
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import net.elytrium.elytraproxy.database.DatabaseItem;
+
+@Getter
+@NoArgsConstructor
+@AllArgsConstructor
+public class RegisteredPlayer {
+  public String nickname;
+  public String hash;
+  public String ip;
+  public Long regdate;
+
+  private static final Map<String, String> tableInfo = ImmutableMap.of(
+      "nickname", "VARCHAR(16)",
+      "hash", "VARCHAR(128)",
+      "ip", "VARCHAR(15)",
+      "regdate", "BIGINT UNSIGNED"
+  );
+
+  private static final String primaryKey = "nickname";
+
+  @Getter private static final DatabaseItem databaseItem = new DatabaseItem(tableInfo, primaryKey);
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/captcha/CaptchaGeneration.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/CaptchaGeneration.java
similarity index 90%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/captcha/CaptchaGeneration.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/botfilter/CaptchaGeneration.java
index 4b89bbad..f989c6fe 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/captcha/CaptchaGeneration.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/CaptchaGeneration.java
@@ -17,7 +17,7 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.captcha;
+package net.elytrium.elytraproxy.botfilter;
 
 import java.awt.Color;
 import java.awt.Font;
@@ -35,11 +35,11 @@ import java.util.concurrent.atomic.AtomicInteger;
 import javax.imageio.ImageIO;
 import lombok.SneakyThrows;
 import lombok.experimental.UtilityClass;
-import net.elytrium.elytraproxy.botfilter.captcha.generator.CaptchaPainter;
-import net.elytrium.elytraproxy.botfilter.captcha.generator.map.CraftMapCanvas;
-import net.elytrium.elytraproxy.botfilter.captcha.generator.map.MapPalette;
-import net.elytrium.elytraproxy.botfilter.protocol.cache.CachedCaptcha;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.MapDataPacket;
+import net.elytrium.elytraproxy.botfilter.generator.CaptchaPainter;
+import net.elytrium.elytraproxy.botfilter.generator.map.CraftMapCanvas;
+import net.elytrium.elytraproxy.botfilter.generator.map.MapPalette;
+import net.elytrium.elytraproxy.botfilter.cache.CachedCaptcha;
+import net.elytrium.elytraproxy.virtual.protocol.packet.MapDataPacket;
 import net.elytrium.elytraproxy.config.Settings;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -51,10 +51,10 @@ import org.apache.logging.log4j.Logger;
 @UtilityClass
 public class CaptchaGeneration {
 
+  private static final CraftMapCanvas cachedBackgroundMap = new CraftMapCanvas();
   private final Logger logger = LogManager.getLogger("ElytraProxy");
   private final CaptchaPainter painter = new CaptchaPainter();
   private final List<Font> fonts = new ArrayList<>();
-  private final CraftMapCanvas cachedBackgroundMap = new CraftMapCanvas();
   private final AtomicInteger fontCounter = new AtomicInteger(0);
   private final AtomicInteger colorCounter = new AtomicInteger(0);
 
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/CachedCaptcha.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/cache/CachedCaptcha.java
similarity index 91%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/CachedCaptcha.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/botfilter/cache/CachedCaptcha.java
index 6c7b8d93..d6395cd0 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/CachedCaptcha.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/cache/CachedCaptcha.java
@@ -17,12 +17,12 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.protocol.cache;
+package net.elytrium.elytraproxy.botfilter.cache;
 
 import java.util.ArrayList;
 import java.util.List;
 import java.util.concurrent.atomic.AtomicInteger;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.MapDataPacket;
+import net.elytrium.elytraproxy.virtual.protocol.packet.MapDataPacket;
 
 /**
  * @author Leymooo
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/CaptchaHandler.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/cache/CaptchaHandler.java
similarity index 88%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/CaptchaHandler.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/botfilter/cache/CaptchaHandler.java
index 4adac6ab..3fd7ee02 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/CaptchaHandler.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/cache/CaptchaHandler.java
@@ -17,12 +17,12 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.protocol.cache;
+package net.elytrium.elytraproxy.botfilter.cache;
 
 import lombok.AllArgsConstructor;
 import lombok.Getter;
 import lombok.NoArgsConstructor;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.MapDataPacket;
+import net.elytrium.elytraproxy.virtual.protocol.packet.MapDataPacket;
 
 @NoArgsConstructor
 @AllArgsConstructor
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/captcha/generator/CaptchaPainter.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/generator/CaptchaPainter.java
similarity index 99%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/captcha/generator/CaptchaPainter.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/botfilter/generator/CaptchaPainter.java
index 3b37bc7a..2af5c118 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/captcha/generator/CaptchaPainter.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/generator/CaptchaPainter.java
@@ -17,7 +17,7 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.captcha.generator;
+package net.elytrium.elytraproxy.botfilter.generator;
 
 import java.awt.Color;
 import java.awt.Font;
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/captcha/generator/Rippler.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/generator/Rippler.java
similarity index 98%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/captcha/generator/Rippler.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/botfilter/generator/Rippler.java
index 2f14b2ff..39005a9d 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/captcha/generator/Rippler.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/generator/Rippler.java
@@ -17,7 +17,7 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.captcha.generator;
+package net.elytrium.elytraproxy.botfilter.generator;
 
 import java.awt.image.BufferedImage;
 
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/captcha/generator/map/CraftMapCanvas.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/generator/map/CraftMapCanvas.java
similarity index 93%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/captcha/generator/map/CraftMapCanvas.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/botfilter/generator/map/CraftMapCanvas.java
index d8c43a69..65cc30c6 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/captcha/generator/map/CraftMapCanvas.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/generator/map/CraftMapCanvas.java
@@ -17,12 +17,12 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.captcha.generator.map;
+package net.elytrium.elytraproxy.botfilter.generator.map;
 
 import java.awt.image.BufferedImage;
 import java.util.Arrays;
 import lombok.Getter;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.MapDataPacket;
+import net.elytrium.elytraproxy.virtual.protocol.packet.MapDataPacket;
 
 @Getter
 public class CraftMapCanvas {
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/captcha/generator/map/MapPalette.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/generator/map/MapPalette.java
similarity index 97%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/captcha/generator/map/MapPalette.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/botfilter/generator/map/MapPalette.java
index 8190a5d4..e1ca4215 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/captcha/generator/map/MapPalette.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/generator/map/MapPalette.java
@@ -17,7 +17,7 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.captcha.generator.map;
+package net.elytrium.elytraproxy.botfilter.generator.map;
 
 import java.awt.image.BufferedImage;
 import java.util.HashMap;
@@ -143,9 +143,9 @@ public final class MapPalette {
   }
 
   private static Color simplifyRGB(int rgb) {
-    int r = ((rgb & 0xff0000) >>> 16) / 5 * 5;
-    int g = ((rgb & 0xff00) >>> 8) / 5 * 5;
-    int b = (rgb & 0xff) / 5 * 5;
+    int r = ((rgb & 0xff0000) >>> 16);
+    int g = ((rgb & 0xff00) >>> 8);
+    int b = (rgb & 0xff);
 
     return new Color(r, g, b);
   }
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/handler/BotFilterSessionHandler.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/handler/BotFilterSessionHandler.java
new file mode 100644
index 00000000..a6bc6e5c
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/handler/BotFilterSessionHandler.java
@@ -0,0 +1,345 @@
+/*
+ * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
+ *
+ * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.botfilter.handler;
+
+import com.velocitypowered.proxy.connection.MinecraftConnection;
+import com.velocitypowered.proxy.connection.client.ConnectedPlayer;
+import com.velocitypowered.proxy.connection.client.LoginSessionHandler;
+import com.velocitypowered.proxy.protocol.MinecraftPacket;
+import com.velocitypowered.proxy.protocol.packet.Chat;
+import com.velocitypowered.proxy.protocol.packet.ClientSettings;
+import com.velocitypowered.proxy.protocol.packet.PluginMessage;
+import com.velocitypowered.proxy.protocol.util.PluginMessageUtil;
+import io.netty.buffer.ByteBuf;
+import java.util.Objects;
+import lombok.Getter;
+import lombok.Setter;
+import net.elytrium.elytraproxy.botfilter.cache.CachedCaptcha;
+import net.elytrium.elytraproxy.botfilter.cache.CaptchaHandler;
+import net.elytrium.elytraproxy.config.Settings;
+import net.elytrium.elytraproxy.stats.Statistics;
+import net.elytrium.elytraproxy.virtual.protocol.packet.SetExp;
+import net.elytrium.elytraproxy.virtual.server.ServerPackets;
+import net.elytrium.elytraproxy.virtual.server.VirtualServer;
+import net.elytrium.elytraproxy.virtual.server.world.chunk.SimpleChunk;
+import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
+import org.apache.logging.log4j.Logger;
+
+@Getter
+public class BotFilterSessionHandler extends FallingCheckHandler {
+
+  public static final long TOTAL_TICKS = Settings.IMP.ANTIBOT.FALLING_CHECK_TICKS;
+  private static final long TOTAL_TIME = (TOTAL_TICKS * 50) - 100;
+
+  private final Statistics statistics;
+  private final Logger logger;
+  private final ServerPackets packets;
+  private final MinecraftConnection connection;
+  private final MinecraftPacket fallingCheckPos;
+  private final MinecraftPacket fallingCheckChunk;
+  private final double captchaY = Settings.IMP.ANTIBOT.CAPTCHA_COORDS.Y;
+  @Setter
+  private String captchaAnswer;
+  private int ignoredTicks = 0;
+  private long joinTime = System.currentTimeMillis();
+  private int attempts = Settings.IMP.ANTIBOT.CAPTCHA_ATTEMPTS;
+  private boolean startedListening = false;
+  private int nonValidPacketsSize = 0;
+  @Getter
+  private CheckState state = CheckState.valueOf(Settings.IMP.ANTIBOT.CHECK_STATE);
+  private boolean checkedBySettings = false;
+  private boolean checkedByBrand = false;
+
+  public BotFilterSessionHandler(ConnectedPlayer player, LoginSessionHandler originalHandler, VirtualServer virtualServer) {
+    super(player.getProtocolVersion(), player, originalHandler, virtualServer);
+    this.statistics = virtualServer.getElytraProxy().getStatistics();
+    this.logger = virtualServer.getElytraProxy().getLogger();
+    this.packets = virtualServer.getPackets();
+    this.connection = player.getConnection();
+    this.fallingCheckPos = packets.createPlayerPosAndLookPacket(validX, validY, validZ);
+    this.fallingCheckChunk = packets.createChunkDataPacket(
+        new SimpleChunk(Math.floorDiv(validX, 16), Math.floorDiv(validZ, 16)));
+  }
+
+  @Override
+  public boolean handle(Chat chat) {
+    if (state == CheckState.CAPTCHA_POSITION || state == CheckState.ONLY_CAPTCHA) {
+      String message = chat.getMessage();
+      if (message.length() > 256) {
+        return false;
+      } else if (message.equals(captchaAnswer)) {
+        finishCheck();
+      } else if (--attempts != 0) {
+        sendCaptcha();
+      } else {
+        statistics.addBlockedBots();
+        connection.closeWith(packets.getCaptchaFailed());
+      }
+    }
+    return true;
+  }
+
+  @Override
+  public boolean handle(PluginMessage packet) {
+    if (PluginMessageUtil.isMcBrand(packet) && !checkedByBrand) {
+      logger.info("{} has client brand {}", player,
+          PluginMessageUtil.readBrandMessage(packet.content()));
+      checkedByBrand = true;
+    }
+    return true;
+  }
+
+  @Override
+  public boolean handle(ClientSettings packet) {
+    if ((!checkedBySettings) && Settings.IMP.ANTIBOT.CHECK_CLIENT_SETTINGS) {
+      if (packet.toString().contains("null")) {
+        logger.error("{} -> " + packet, player);
+        player.disconnect(
+            LegacyComponentSerializer
+                .legacyAmpersand()
+                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK.CLIENT_CHECK_SETTINGS));
+        logger.error("{} has null in settings packet", player);
+        statistics.addBlockedConnection();
+        statistics.addBlockedBots();
+      } else if (!packet.isChatColors()) {
+        logger.error("{} -> " + packet, player);
+        player.disconnect(
+            LegacyComponentSerializer
+                .legacyAmpersand()
+                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK.CLIENT_CHECK_SETTINGS_CHAT_COLOR));
+        logger.error("{} doesn't send isChatColors packet",
+            player);
+        statistics.addBlockedConnection();
+        statistics.addBlockedBots();
+      } else if (packet.getSkinParts() == 0) {
+        logger.error("{} -> " + packet, player);
+        player.disconnect(
+            LegacyComponentSerializer
+                .legacyAmpersand()
+                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK.CLIENT_CHECK_SETTINGS_SKIN_PARTS));
+        logger.error("{} doesn't send skin parts packet",
+            player);
+        statistics.addBlockedConnection();
+        statistics.addBlockedBots();
+      }
+    }
+    checkedBySettings = true;
+    return true;
+  }
+
+  @Override
+  public void handleUnknown(ByteBuf packet) {
+    if (packet.readableBytes() > 2048) {
+      statistics.addBlockedBots();
+      connection.closeWith(packets.getTooBigPacket());
+    }
+  }
+
+  private void finishCheck() {
+    if (System.currentTimeMillis() - joinTime < TOTAL_TIME && state != CheckState.ONLY_CAPTCHA) {
+      if (state == CheckState.CAPTCHA_POSITION && ticks < TOTAL_TICKS) {
+        connection.write(packets.getResetSlot());
+        state = CheckState.ONLY_POSITION;
+      } else {
+        if (state == CheckState.CAPTCHA_ON_POSITION_FAILED) {
+          changeStateToCaptcha();
+        } else {
+          statistics.addBlockedBots();
+          connection.closeWith(packets.getFallingCheckFailed());
+        }
+      }
+      return;
+    }
+    kickIfCheckNotPassed();
+    state = CheckState.SUCCESSFULLY;
+    disconnected();
+    // connection.write(packets.getSuccessfulChat());
+    // ((LoginSessionHandler) originalHandler).authOrInitialize(player);
+    connection.closeWith(packets.getSuccessfulBotFilter());
+    virtualServer.getElytraProxy().cacheSucceedUser(player);
+  }
+
+  @Override
+  public void onMove() {
+    if (!startedListening && state != CheckState.ONLY_CAPTCHA) {
+      if (x == validX && z == validZ) {
+        startedListening = true;
+        connection.write(packets.getBotFilterBrand());
+      }
+      if (nonValidPacketsSize > Settings.IMP.ANTIBOT.NON_VALID_POSITION_XZ_ATTEMPTS) {
+        fallingCheckFailed();
+        return;
+      }
+      lastY = validY;
+      nonValidPacketsSize++;
+    }
+    if (startedListening) {
+      if (lastY == captchaY || onGround) {
+        return;
+      }
+      if (state == CheckState.ONLY_CAPTCHA) {
+        if (lastY != y && waitingTeleportId == -1) {
+          resetPosition(true);
+        }
+        return;
+      }
+      if (lastY - y == 0) {
+        ignoredTicks++;
+        return;
+      }
+      if (ticks >= TOTAL_TICKS) {
+        if (state == CheckState.CAPTCHA_POSITION) {
+          changeStateToCaptcha();
+        } else {
+          finishCheck();
+        }
+        return;
+      }
+      // System.out.println("lastY=" + lastY + "; y=" + y + "; diff=" + (lastY - y) + ";" +
+      //     " need=" + getLoadedChunkSpeed(ticks) + "; ticks=" + ticks +
+      //     "; x=" + x + "; z=" + z + "; vx=" + validX + "; vz=" + validZ);
+      if (ignoredTicks > Settings.IMP.ANTIBOT.NON_VALID_POSITION_Y_ATTEMPTS) {
+        fallingCheckFailed();
+        return;
+      }
+      if ((x != validX && z != validZ) || checkY()) {
+        fallingCheckFailed();
+        return;
+      }
+      if (state == CheckState.CAPTCHA_POSITION && waitingTeleportId == -1) {
+        resetPosition(false);
+      }
+      if ((state == CheckState.CAPTCHA_ON_POSITION_FAILED || state == CheckState.ONLY_POSITION)) {
+        SetExp expBuf = packets.getExperience().get(ticks);
+        if (expBuf != null) {
+          connection.write(expBuf);
+        }
+      }
+      ticks++;
+    }
+  }
+
+  @Override
+  public void onSpawn() {
+    ((LoginSessionHandler) originalHandler).completeLoginProtocol(player, false);
+    virtualServer.loginComplete(this);
+    if (state == BotFilterSessionHandler.CheckState.ONLY_CAPTCHA) {
+      sendCaptcha();
+      connection.write(packets.getCaptchaPosAndLook());
+      packets.getWorldPacket().forEach(connection::write);
+    } else if (state == BotFilterSessionHandler.CheckState.CAPTCHA_POSITION) {
+      sendCaptcha();
+      connection.write(fallingCheckPos);
+      connection.write(fallingCheckChunk);
+    } else if (state == BotFilterSessionHandler.CheckState.ONLY_POSITION
+        || state == BotFilterSessionHandler.CheckState.CAPTCHA_ON_POSITION_FAILED) {
+      connection.write(fallingCheckPos);
+      connection.write(fallingCheckChunk);
+    }
+    connection.flush();
+  }
+
+  private void sendCaptcha() {
+    CaptchaHandler captchaHandler = CachedCaptcha.randomCaptcha();
+    String captchaAnswer = captchaHandler.getAnswer();
+    setCaptchaAnswer(captchaAnswer);
+    connection.write(packets.getSetSlot());
+    connection.write(captchaHandler.getMap());
+    connection.write(packets.getCheckingCaptchaChat());
+  }
+
+  private boolean checkY() {
+    double speed = getLoadedChunkSpeed(ticks);
+    return (Math.abs(lastY - y - speed) > Settings.IMP.ANTIBOT.MAX_VALID_POSITION_DIFFERENCE);
+  }
+
+  private void fallingCheckFailed() {
+    if (state == CheckState.CAPTCHA_ON_POSITION_FAILED) {
+      changeStateToCaptcha();
+      return;
+    }
+    statistics.addBlockedBots();
+    connection.closeWith(packets.getFallingCheckFailed());
+  }
+
+  private void resetPosition(boolean disableFall) {
+    connection.write(packets.getWorldPacket());
+    if (disableFall) {
+      connection.write(packets.getNoAbilities());
+    }
+    connection.write(packets.getCaptchaPosAndLook());
+    connection.flush();
+    waitingTeleportId = 9876;
+  }
+
+  private void changeStateToCaptcha() {
+    state = CheckState.ONLY_CAPTCHA;
+    joinTime = System.currentTimeMillis() + 3500;
+    resetPosition(true);
+    if (captchaAnswer == null) {
+      sendCaptcha();
+    }
+  }
+
+  private void kickIfCheckNotPassed() {
+    if ((!checkedBySettings) && Settings.IMP.ANTIBOT.CHECK_CLIENT_SETTINGS) {
+      player.disconnect(
+          LegacyComponentSerializer
+              .legacyAmpersand()
+              .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK.CLIENT_CHECK_SETTINGS));
+      statistics.addBlockedConnection();
+      statistics.addBlockedBots();
+    }
+    if ((!checkedByBrand) && Settings.IMP.ANTIBOT.CHECK_CLIENT_BRAND) {
+      player.disconnect(
+          LegacyComponentSerializer
+              .legacyAmpersand()
+              .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.KICK.CLIENT_CHECK_BRAND));
+      statistics.addBlockedConnection();
+      statistics.addBlockedBots();
+    }
+  }
+
+  @Override
+  public boolean equals(Object o) {
+    if (this == o) {
+      return true;
+    }
+    if (o == null || getClass() != o.getClass()) {
+      return false;
+    }
+    BotFilterSessionHandler that = (BotFilterSessionHandler) o;
+    return player.getUsername().equals(that.player.getUsername());
+  }
+
+  @Override
+  public int hashCode() {
+    return Objects.hash(player.getUsername());
+  }
+
+  public enum CheckState {
+    ONLY_POSITION,
+    ONLY_CAPTCHA,
+    CAPTCHA_POSITION,
+    CAPTCHA_ON_POSITION_FAILED,
+    SUCCESSFULLY,
+    FAILED
+  }
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/FallingCheckHandler.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/handler/FallingCheckHandler.java
similarity index 53%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/FallingCheckHandler.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/botfilter/handler/FallingCheckHandler.java
index 58655740..5de8e7b5 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/FallingCheckHandler.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/handler/FallingCheckHandler.java
@@ -17,36 +17,61 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.server;
+package net.elytrium.elytraproxy.botfilter.handler;
 
 import com.velocitypowered.api.network.ProtocolVersion;
 import com.velocitypowered.proxy.connection.MinecraftSessionHandler;
+import com.velocitypowered.proxy.connection.client.ConnectedPlayer;
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.Player;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.PlayerPosition;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.PlayerPositionAndLook;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.TeleportConfirm;
+import java.util.concurrent.ThreadLocalRandom;
+import net.elytrium.elytraproxy.config.Settings;
+import net.elytrium.elytraproxy.virtual.protocol.packet.Player;
+import net.elytrium.elytraproxy.virtual.protocol.packet.PlayerPosition;
+import net.elytrium.elytraproxy.virtual.protocol.packet.PlayerPositionAndLook;
+import net.elytrium.elytraproxy.virtual.protocol.packet.TeleportConfirm;
+import net.elytrium.elytraproxy.virtual.server.VirtualServer;
+import net.elytrium.elytraproxy.virtual.server.VirtualSessionHandler;
 
 @SuppressFBWarnings(value = "URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD",
-    justification = "ща пока x, z и teleportId не юзаются но скорее всего потом заюзаем")
-public class FallingCheckHandler implements MinecraftSessionHandler {
+    justification = "ща пока teleportId не юзается но скорее всего потом заюзаем")
+public abstract class FallingCheckHandler extends VirtualSessionHandler {
+  private static final double[] loadedChunkSpeedCache = new double[Settings.IMP.ANTIBOT.FALLING_CHECK_TICKS];
 
-  public double x = 0;
-  public double y = 0;
-  public double z = 0;
+  static {
+    for (int i = 0; i < Settings.IMP.ANTIBOT.FALLING_CHECK_TICKS; ++i) {
+      loadedChunkSpeedCache[i] = -((Math.pow(0.98, i) - 1) * 3.92);
+    }
+  }
+
+  public double x;
+  public double y;
+  public double z;
   public boolean onGround = false;
 
   public int teleportId = -1;
 
   public int waitingTeleportId = 9876;
 
-  public double lastY = 0;
-  public int ticks = 0;
+  public double lastY;
+  public int validX;
+  public int validY;
+  public int validZ;
+  public int ticks = 1;
 
   public final ProtocolVersion version;
 
-  public FallingCheckHandler(ProtocolVersion version) {
+  public FallingCheckHandler(
+      ProtocolVersion version, ConnectedPlayer player,
+      MinecraftSessionHandler sessionHandler, VirtualServer virtualServer) {
+    super(player, sessionHandler, virtualServer);
     this.version = version;
+    validX = ThreadLocalRandom.current().nextInt(16384) + 256;
+    validY = ThreadLocalRandom.current().nextInt(256);
+    validZ = ThreadLocalRandom.current().nextInt(16384) + 256;
+
+    x = validX;
+    y = validY;
+    z = validZ;
   }
 
   @Override
@@ -75,7 +100,7 @@ public class FallingCheckHandler implements MinecraftSessionHandler {
   @Override
   public boolean handle(PlayerPositionAndLook posRot) {
     if (version.isBeforeOrEq(ProtocolVersion.MINECRAFT_1_8)
-        && posRot.getX() == 7 && posRot.getY() == 450 && posRot.getZ() == 7
+        && posRot.getX() == validX && posRot.getY() == validY && posRot.getZ() == validZ
         && waitingTeleportId == 9876) {
       ticks = 0;
       y = -1;
@@ -102,15 +127,13 @@ public class FallingCheckHandler implements MinecraftSessionHandler {
     return true;
   }
 
-  public void onMove() {
-    throw new UnsupportedOperationException("Method is not overrided");
-  }
+  public abstract void onMove();
 
-  public static double getSpeed(int ticks) {
-    return formatDouble(-((Math.pow(0.98, ticks) - 1) * 3.92));
+  public static double getLoadedChunkSpeed(int ticks) {
+    if (ticks == -1) return 0;
+    return loadedChunkSpeedCache[ticks];
   }
 
-  public static double formatDouble(double d) {
-    return Math.floor(d * 100) / 100;
-  }
+  @Override
+  public abstract void onSpawn();
 }
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/ByteBufCreator.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/ByteBufCreator.java
deleted file mode 100644
index eaddde7a..00000000
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/ByteBufCreator.java
+++ /dev/null
@@ -1,52 +0,0 @@
-/*
- * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
- *
- * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package net.elytrium.elytraproxy.botfilter.protocol.cache;
-
-import com.velocitypowered.natives.compression.VelocityCompressor;
-import com.velocitypowered.natives.util.BufferPreference;
-import com.velocitypowered.natives.util.Natives;
-import io.netty.buffer.ByteBuf;
-import io.netty.buffer.Unpooled;
-
-public class ByteBufCreator {
-
-  private static boolean directBuffers = false;
-
-  static {
-    VelocityCompressor compressor = Natives.compress.get().create(1);
-    if (compressor.preferredBufferType() == BufferPreference.DIRECT_PREFERRED
-        || compressor.preferredBufferType() == BufferPreference.DIRECT_REQUIRED) {
-      directBuffers = true;
-    }
-    compressor.close();
-  }
-
-  public static ByteBuf newBuffer() {
-    return directBuffers ? Unpooled.directBuffer() : Unpooled.buffer();
-  }
-
-  public static ByteBuf newBuffer(int length) {
-    return directBuffers ? Unpooled.directBuffer(length) : Unpooled.buffer(length);
-  }
-
-  public static boolean isDirectBufferPreferred() {
-    return directBuffers;
-  }
-}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/MultiplePreparedPackets.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/MultiplePreparedPackets.java
deleted file mode 100644
index 6bd66bff..00000000
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/MultiplePreparedPackets.java
+++ /dev/null
@@ -1,100 +0,0 @@
-/*
- * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
- *
- * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package net.elytrium.elytraproxy.botfilter.protocol.cache;
-
-import com.google.common.base.Preconditions;
-import com.velocitypowered.api.network.ProtocolVersion;
-import com.velocitypowered.proxy.connection.MinecraftConnection;
-import io.netty.buffer.ByteBuf;
-import java.util.EnumMap;
-import java.util.EnumSet;
-import java.util.HashSet;
-import java.util.Map;
-
-public class MultiplePreparedPackets {
-
-  private final Map<ProtocolVersion, ByteBuf> multiplePayloadBuf = new EnumMap<>(
-      ProtocolVersion.class);
-  private final PreparedPacket[] onlineModePackets;
-
-  public MultiplePreparedPackets(PreparedPacket... preparedPackets) {
-    for (PreparedPacket packet : preparedPackets) {
-      Preconditions.checkState(packet.isFinished(), "PreparedPacket is not adapted");
-    }
-    onlineModePackets = preparedPackets;
-    createOfflineModePayload(preparedPackets);
-  }
-
-  private void createOfflineModePayload(PreparedPacket... preparedPackets) {
-    for (ProtocolVersion protocolVersion : EnumSet
-        .range(ProtocolVersion.MINIMUM_VERSION, ProtocolVersion.MAXIMUM_VERSION)) {
-      ByteBuf multiple = ByteBufCreator.newBuffer();
-      for (PreparedPacket preparedPacket : preparedPackets) {
-        ByteBuf buf = preparedPacket.getBuffer(protocolVersion);
-        if (buf == null) {
-          continue;
-        }
-        multiple.writeBytes(buf);
-        buf.release();
-      }
-
-      if (multiple.readableBytes() == 0) {
-        multiple.release();
-        continue;
-      }
-      //Deduplicate
-      for (ByteBuf byteBuf : multiplePayloadBuf.values()) {
-        if (byteBuf.equals(multiple)) {
-          multiple.release();
-          multiple = byteBuf;
-          break;
-        }
-      }
-      multiplePayloadBuf.put(protocolVersion, multiple);
-    }
-  }
-
-  public void write(MinecraftConnection connection, boolean onlineMode) {
-    if (onlineMode) {
-      for (PreparedPacket preparedPacket : onlineModePackets) {
-        preparedPacket.selfWrite(connection, false);
-      }
-    } else {
-      connection.delayedWrite(this);
-    }
-  }
-
-  public ByteBuf getBuffer(ProtocolVersion protocolVersion) {
-    return multiplePayloadBuf.get(protocolVersion).retainedSlice();
-  }
-
-  public int getBuffetLength(ProtocolVersion protocolVersion) {
-    return multiplePayloadBuf.get(protocolVersion).readableBytes();
-  }
-
-  public void release() {
-    for (PreparedPacket preparedPacket : onlineModePackets) {
-      preparedPacket.releaseBuffers();
-    }
-    for (ByteBuf byteBuf : new HashSet<>(multiplePayloadBuf.values())) {
-      byteBuf.release();
-    }
-  }
-}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/PacketCompressor.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/PacketCompressor.java
deleted file mode 100644
index 97590be3..00000000
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/PacketCompressor.java
+++ /dev/null
@@ -1,69 +0,0 @@
-/*
- * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
- *
- * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package net.elytrium.elytraproxy.botfilter.protocol.cache;
-
-import com.velocitypowered.natives.compression.VelocityCompressor;
-import com.velocitypowered.natives.util.Natives;
-import com.velocitypowered.proxy.config.VelocityConfiguration;
-import com.velocitypowered.proxy.protocol.ProtocolUtils;
-import io.netty.buffer.ByteBuf;
-import io.netty.buffer.Unpooled;
-import java.util.function.Supplier;
-
-public class PacketCompressor {
-
-  private final ThreadLocal<VelocityCompressor> compressors = ThreadLocal
-      .withInitial(() -> Natives.compress.get().create(12));
-  private final Supplier<VelocityConfiguration> velocityConfiguration;
-
-  /**
-   * Constructs VelocityPacketCompressor.
-   *
-   * @param velocityConfiguration configuration
-   */
-  public PacketCompressor(Supplier<VelocityConfiguration> velocityConfiguration) {
-    this.velocityConfiguration = velocityConfiguration;
-
-  }
-
-  public boolean isCompressionEnabled() {
-    return velocityConfiguration.get().getCompressionThreshold() >= 0;
-  }
-
-  public boolean shouldCompress(int i) {
-    return isCompressionEnabled() && i >= velocityConfiguration.get().getCompressionThreshold();
-  }
-
-  public ByteBuf compress(ByteBuf source) {
-    VelocityCompressor compressor = compressors.get();
-    ByteBuf destination =
-        ByteBufCreator.isDirectBufferPreferred() ? Unpooled.directBuffer() : Unpooled.buffer();
-    int uncompressed = source.readableBytes();
-    ProtocolUtils.writeVarInt(destination, uncompressed);
-    try {
-      compressor.deflate(source, destination);
-    } catch (Exception e) {
-      throw new RuntimeException(e);
-    } finally {
-      source.release();
-    }
-    return destination;
-  }
-}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/PreparedPacket.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/PreparedPacket.java
deleted file mode 100644
index 9d2e722d..00000000
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/PreparedPacket.java
+++ /dev/null
@@ -1,217 +0,0 @@
-/*
- * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
- *
- * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package net.elytrium.elytraproxy.botfilter.protocol.cache;
-
-import com.velocitypowered.api.network.ProtocolVersion;
-import com.velocitypowered.proxy.connection.MinecraftConnection;
-import com.velocitypowered.proxy.protocol.MinecraftPacket;
-import com.velocitypowered.proxy.protocol.ProtocolUtils;
-import com.velocitypowered.proxy.protocol.ProtocolUtils.Direction;
-import com.velocitypowered.proxy.protocol.StateRegistry;
-import io.netty.buffer.ByteBuf;
-import io.netty.util.ReferenceCountUtil;
-import java.util.EnumMap;
-import java.util.EnumSet;
-import java.util.HashSet;
-import java.util.Map;
-import java.util.Map.Entry;
-import net.elytrium.elytraproxy.botfilter.protocol.BotFilterProtocol;
-
-public class PreparedPacket<T extends MinecraftPacket> {
-
-  static {
-    BotFilterProtocol.init();
-  }
-
-  private final Map<ProtocolVersion, ByteBufHolder> packets =
-      new EnumMap<>(ProtocolVersion.class);
-  private boolean finished = false;
-
-  public PreparedPacket() {
-  }
-
-  public void prepareSinge(T packet, ProtocolVersion version) {
-    prepare(packet, version, version);
-  }
-
-  public void prepareSinge(T packet, ProtocolVersion version, StateRegistry protocol) {
-    prepare(packet, version, version, protocol);
-  }
-
-  public void prepare(T packet) {
-    prepare(packet, ProtocolVersion.MINIMUM_VERSION, ProtocolVersion.MAXIMUM_VERSION);
-  }
-
-  public void prepare(T packet, ProtocolVersion from) {
-    prepare(packet, from, ProtocolVersion.MAXIMUM_VERSION);
-  }
-
-  public void prepare(T packet, ProtocolVersion from, StateRegistry protocol) {
-    prepare(packet, from, ProtocolVersion.MAXIMUM_VERSION, protocol);
-  }
-
-  public void prepare(T packet, ProtocolVersion from, ProtocolVersion to) {
-    prepare(packet, from, to, StateRegistry.BotFilter);
-  }
-
-  public void prepare(T packet, ProtocolVersion from, ProtocolVersion to, StateRegistry protocol) {
-    for (ProtocolVersion protocolVersion : EnumSet.range(from, to)) {
-      ByteBuf buf = encodePacket(packet, protocolVersion, protocol);
-      ByteBufHolder holder = getHolder(buf, protocolVersion);
-      packets.put(protocolVersion, holder);
-    }
-  }
-
-  /*
-  public void preparePacketAndCopy(T packet, ProtocolVersion start, ProtocolVersion end,
-      StateRegistry protocol) {
-    ByteBuf buf = encodePacket(packet, start, protocol);
-    ByteBufHolder holder = new ByteBufHolder(start.isBefore(ProtocolVersion.MINECRAFT_1_8), buf);
-    for (ProtocolVersion protocolVersion : EnumSet.range(start, end)) {
-      prepared.put(protocolVersion, holder);
-    }
-  }
-  */
-
-  private ByteBuf encodePacket(T packet, ProtocolVersion version, StateRegistry protocol) {
-    int id = getPacketId(packet, version, protocol);
-    ByteBuf byteBuf = ByteBufCreator.newBuffer();
-    ProtocolUtils.writeVarInt(byteBuf, id);
-    packet.encode(byteBuf, Direction.CLIENTBOUND, version);
-    return byteBuf;
-  }
-
-  private int getPacketId(T packet, ProtocolVersion version, StateRegistry protocol) {
-    try {
-      return protocol.clientbound.getProtocolRegistry(version).getPacketId(packet.getClass());
-    } catch (Exception e) {
-      return protocol.clientbound.getProtocolRegistry(version).getPacketId(
-          (Class<? extends MinecraftPacket>) packet.getClass().getSuperclass());
-    }
-  }
-
-  public ByteBuf getBuffer(ProtocolVersion version) {
-    ByteBufHolder holder = packets.get(version);
-    return holder == null ? null : holder.byteBuf.retainedSlice();
-  }
-
-  public int getBufferLength(ProtocolVersion version) {
-    ByteBufHolder holder = packets.get(version);
-    return holder == null ? 0 : holder.byteBuf.readableBytes();
-  }
-
-  public void selfWrite(MinecraftConnection mc, boolean flush) {
-    if (packets.containsKey(mc.getProtocolVersion())) {
-      if (flush) {
-        mc.write(this);
-      } else {
-        mc.delayedWrite(this);
-      }
-    }
-  }
-
-  public boolean isFinished() {
-    return finished;
-  }
-
-  private ByteBufHolder getHolder(ByteBuf buf, ProtocolVersion version) {
-    if (version.isBefore(ProtocolVersion.MINECRAFT_1_8)) {
-      ByteBufHolder holder = packets.get(ProtocolVersion.MINECRAFT_1_7_2);
-      if (holder != null && holder.byteBuf.equals(buf)) {
-        buf.release();
-        return holder;
-      }
-      return new ByteBufHolder(true, buf);
-    }
-
-    for (ByteBufHolder holder : new HashSet<>(packets.values())) {
-      if (!holder.mc1_7 && holder.byteBuf.equals(buf)) {
-        buf.release();
-        return holder;
-      }
-    }
-    return new ByteBufHolder(false, buf);
-  }
-
-  public void processCompress(PacketCompressor packetCompressor) {
-    if (finished) {
-      throw new IllegalStateException("Packet compression does not allowed after adapt");
-    }
-    for (Entry<ProtocolVersion, ByteBufHolder> prepared : packets.entrySet()) {
-      ByteBufHolder holder = prepared.getValue();
-      if (holder.mc1_7 || holder.compressed) {
-        continue;
-      }
-      ByteBuf current = holder.byteBuf;
-      ByteBuf newBuf;
-      int bytes = current.readableBytes();
-      holder.compressed = true;
-      if (packetCompressor.shouldCompress(bytes)) {
-        newBuf = packetCompressor.compress(current);
-      } else {
-        newBuf = ByteBufCreator.newBuffer(2 + current.readableBytes());
-        ProtocolUtils.writeVarInt(newBuf, 0);
-        newBuf.writeBytes(current);
-      }
-      newBuf.capacity(newBuf.readableBytes());
-      holder.byteBuf = newBuf;
-    }
-  }
-
-  public void finish() {
-    for (Entry<ProtocolVersion, ByteBufHolder> prepared : packets.entrySet()) {
-      ByteBufHolder holder = prepared.getValue();
-      if (holder.varint) {
-        continue;
-      }
-      ByteBuf current = holder.byteBuf;
-      ByteBuf buf = ByteBufCreator.newBuffer(5 + current.readableBytes());
-      ProtocolUtils.writeVarInt(buf, current.readableBytes());
-      buf.writeBytes(current);
-      buf.capacity(buf.readableBytes());
-      ReferenceCountUtil.safeRelease(current);
-      holder.byteBuf = buf;
-      holder.varint = true;
-    }
-    finished = true;
-  }
-
-  public void releaseBuffers() {
-    for (ByteBufHolder holder : new HashSet<>(packets.values())) {
-      holder.byteBuf.release();
-    }
-  }
-
-  private static class ByteBufHolder {
-
-    private final boolean mc1_7;
-    private ByteBuf byteBuf;
-    private boolean compressed = false;
-    private boolean varint = false;
-
-    public ByteBufHolder(boolean mc1_7, ByteBuf byteBuf) {
-      this.mc1_7 = mc1_7;
-      this.byteBuf = byteBuf;
-      if (mc1_7) {
-        compressed = true;
-      }
-    }
-  }
-}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/netty/MultiplePreparedPacketsEncoder.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/netty/MultiplePreparedPacketsEncoder.java
deleted file mode 100644
index dfd775ca..00000000
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/netty/MultiplePreparedPacketsEncoder.java
+++ /dev/null
@@ -1,70 +0,0 @@
-/*
- * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
- *
- * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package net.elytrium.elytraproxy.botfilter.protocol.cache.netty;
-
-import com.velocitypowered.api.network.ProtocolVersion;
-import io.netty.buffer.ByteBuf;
-import io.netty.channel.ChannelHandler.Sharable;
-import io.netty.channel.ChannelHandlerContext;
-import io.netty.handler.codec.MessageToMessageEncoder;
-import java.util.EnumMap;
-import java.util.List;
-import java.util.Map;
-import lombok.RequiredArgsConstructor;
-import net.elytrium.elytraproxy.botfilter.protocol.cache.MultiplePreparedPackets;
-
-@Sharable
-@RequiredArgsConstructor
-public class MultiplePreparedPacketsEncoder extends
-    MessageToMessageEncoder<MultiplePreparedPackets> {
-
-  private static Map<ProtocolVersion, MultiplePreparedPacketsEncoder> encoders = new EnumMap<>(
-      ProtocolVersion.class);
-
-  static {
-    for (ProtocolVersion version : ProtocolVersion.SUPPORTED_VERSIONS) {
-      encoders.put(version, new MultiplePreparedPacketsEncoder(version));
-    }
-  }
-
-  private final ProtocolVersion protocolVersion;
-
-  @Override
-  protected void encode(ChannelHandlerContext ctx, MultiplePreparedPackets msg, List<Object> out)
-      throws Exception {
-    System.out.println("Processing multiple encoder");
-    ByteBuf buf = msg.getBuffer(protocolVersion);
-    out.add(buf);
-  }
-
-  /*
-  @Override
-  protected ByteBuf allocateBuffer(ChannelHandlerContext ctx, MultiplePreparedPackets msg,
-      boolean preferDirect) throws Exception {
-    int length = msg.getBuffetLength(protocolVersion);
-    return ByteBufCreator.isDirectBufferPreferred() ? ctx.alloc().directBuffer(length)
-        : ctx.alloc().heapBuffer(length);
-  }
-  */
-
-  public static MultiplePreparedPacketsEncoder getEncoder(ProtocolVersion version) {
-    return encoders.get(version);
-  }
-}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/netty/PreparedPacketEncoder.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/netty/PreparedPacketEncoder.java
deleted file mode 100644
index 93811e4d..00000000
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/cache/netty/PreparedPacketEncoder.java
+++ /dev/null
@@ -1,77 +0,0 @@
-/*
- * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
- *
- * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package net.elytrium.elytraproxy.botfilter.protocol.cache.netty;
-
-import com.google.common.collect.HashBasedTable;
-import com.google.common.collect.Table;
-import com.velocitypowered.api.network.ProtocolVersion;
-import com.velocitypowered.natives.encryption.JavaVelocityCipher;
-import com.velocitypowered.natives.util.Natives;
-import com.velocitypowered.proxy.protocol.ProtocolUtils;
-import io.netty.buffer.ByteBuf;
-import io.netty.channel.ChannelHandler.Sharable;
-import io.netty.channel.ChannelHandlerContext;
-import io.netty.handler.codec.MessageToMessageEncoder;
-import java.util.List;
-import lombok.RequiredArgsConstructor;
-import net.elytrium.elytraproxy.botfilter.protocol.cache.PreparedPacket;
-
-@Sharable
-@RequiredArgsConstructor
-public class PreparedPacketEncoder extends MessageToMessageEncoder<PreparedPacket> {
-
-  private static final boolean IS_JAVA_CIPHER = Natives.cipher.get() == JavaVelocityCipher.FACTORY;
-  private static Table<ProtocolVersion, Boolean, PreparedPacketEncoder> encoders = HashBasedTable
-      .create(ProtocolVersion.SUPPORTED_VERSIONS.size(), 2);
-
-  static {
-    for (ProtocolVersion version : ProtocolVersion.SUPPORTED_VERSIONS) {
-      encoders.put(version, true, new PreparedPacketEncoder(version, true));
-      encoders.put(version, false, new PreparedPacketEncoder(version, false));
-    }
-  }
-
-  private final ProtocolVersion protocolVersion;
-  private final boolean onlineMode;
-
-  @Override
-  protected void encode(ChannelHandlerContext ctx, PreparedPacket msg, List<Object> out)
-      throws Exception {
-    System.out.println("Processing prepared");
-    System.out.println("Sent prepared id "
-        + ProtocolUtils.readVarInt(msg.getBuffer(protocolVersion)));
-    ByteBuf buf = msg.getBuffer(protocolVersion);
-    out.add(buf);
-  }
-
-  /*
-  @Override
-  protected ByteBuf allocateBuffer(ChannelHandlerContext ctx, PreparedPacket msg,
-      boolean preferDirect) throws Exception {
-    int length = msg.getBufferLength(protocolVersion);
-    boolean direct = onlineMode ? IS_JAVA_CIPHER : ByteBufCreator.isDirectBufferPreferred();
-    return direct ? ctx.alloc().directBuffer(length) : ctx.alloc().heapBuffer(length);
-  }
-  */
-
-  public static PreparedPacketEncoder getEncoder(ProtocolVersion version, boolean onlineMode) {
-    return encoders.get(version, onlineMode);
-  }
-}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/data/registry/Dimension.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/data/registry/Dimension.java
deleted file mode 100644
index 69ce35c9..00000000
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/data/registry/Dimension.java
+++ /dev/null
@@ -1,97 +0,0 @@
-/*
- * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
- *
- * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package net.elytrium.elytraproxy.botfilter.protocol.data.registry;
-
-import com.velocitypowered.api.network.ProtocolVersion;
-import lombok.AllArgsConstructor;
-import lombok.Data;
-import lombok.NonNull;
-import net.kyori.adventure.nbt.CompoundBinaryTag;
-import net.kyori.adventure.nbt.CompoundBinaryTag.Builder;
-
-@AllArgsConstructor
-@Data
-public class Dimension {
-
-  public static Dimension getDimension(String modernKey, int id) {
-    return new Dimension(modernKey, id, false, true,
-        0.0f, null, false, "minecraft:infiniburn_nether",
-        false, true, true, modernKey, true, 0, 256, 256, 1.0f, false, false);
-  }
-
-  @NonNull
-  private final String key;
-  private final int id;
-
-  private final boolean piglinSafe;
-  private final boolean natural;
-  private final float ambientLight;
-  private final Long fixedTime;
-  private final boolean shrunk;
-  @NonNull
-  private final String infiniburn;
-  private final boolean respawnAnchorWorks;
-  private final boolean hasSkylight;
-  private final boolean bedWorks;
-  @NonNull
-  private final String effects;
-  private final boolean hasRaids;
-  private final int minY;
-  private final int height;
-  private final int logicalHeight;
-  private final float coordinateScale;
-  private final boolean ultrawarm;
-  private final boolean hasCeiling;
-
-
-  public CompoundBinaryTag encodeAttributes(ProtocolVersion protocolVersion) {
-    Builder tag = CompoundBinaryTag.builder()
-        .putString("name", key)
-        .putBoolean("natural", natural)
-        .putBoolean("has_skylight", hasSkylight)
-        .putBoolean("has_ceiling", hasCeiling);
-    if (fixedTime != null) {
-      tag.putLong("fixed_time", fixedTime);
-    }
-
-    tag.putBoolean("shrunk", shrunk)
-        .putFloat("ambient_light", ambientLight)
-        .putBoolean("ultrawarm", ultrawarm)
-        .putBoolean("has_raids", hasRaids)
-        .putBoolean("respawn_anchor_works", respawnAnchorWorks)
-        .putBoolean("bed_works", bedWorks)
-        .putBoolean("piglin_safe", piglinSafe)
-        .putString("infiniburn", infiniburn)
-        .putInt("logical_height", logicalHeight);
-
-    if (protocolVersion.isAfterOrEq(ProtocolVersion.MINECRAFT_1_16_2)) {
-      tag.remove("name")
-          .remove("shrunk")
-          .putString("effects", effects)
-          .putFloat("coordinate_scale", coordinateScale);
-    }
-    if (protocolVersion.isAfterOrEq(ProtocolVersion.MINECRAFT_1_17)) {
-      tag.putInt("min_y", minY);
-      tag.putInt("height", height);
-    }
-
-    return tag.build();
-  }
-}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/data/registry/DimensionRegistry.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/data/registry/DimensionRegistry.java
deleted file mode 100644
index 6fa56c9e..00000000
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/data/registry/DimensionRegistry.java
+++ /dev/null
@@ -1,134 +0,0 @@
-/*
- * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
- *
- * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package net.elytrium.elytraproxy.botfilter.protocol.data.registry;
-
-import com.google.common.base.Preconditions;
-import com.velocitypowered.api.network.ProtocolVersion;
-import com.velocitypowered.proxy.connection.registry.DimensionInfo;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Map.Entry;
-import java.util.Set;
-import java.util.stream.Collectors;
-import net.kyori.adventure.nbt.BinaryTagTypes;
-import net.kyori.adventure.nbt.CompoundBinaryTag;
-import net.kyori.adventure.nbt.ListBinaryTag;
-
-public class DimensionRegistry {
-
-  private final Map<Dimension, List<Biome>> dimensions = new HashMap<>();
-  private Dimension activeDimension;
-  private DimensionInfo activeDimensionInfo;
-
-  public void addDimension(Dimension dimension, List<Biome> biomes) {
-    Preconditions.checkNotNull(dimension);
-    Preconditions.checkNotNull(biomes);
-    Preconditions.checkState(!biomes.isEmpty());
-    dimensions.put(dimension, biomes);
-  }
-
-  public void removeDimension(Dimension dimension) {
-    dimensions.remove(dimension);
-  }
-
-  public Dimension getDimension(int id) {
-    return dimensions.keySet().stream().filter(dim -> dim.getId() == id).findAny().orElse(null);
-  }
-
-  public Dimension getDimension(String key) {
-    return dimensions.keySet().stream().filter(dim -> key.equals(dim.getKey())).findAny()
-        .orElse(null);
-  }
-
-  public List<Biome> getBiomes(Dimension dimension) {
-    return dimensions.get(dimension);
-  }
-
-  public List<String> getWorldNames() {
-    return dimensions.keySet().stream().map(dim -> dim.getKey()).collect(Collectors.toList());
-  }
-
-  public Dimension getActiveDimension() {
-    return activeDimension;
-  }
-
-  public void setActiveDimension(Dimension activeDimension) {
-    Preconditions
-        .checkState(dimensions.containsKey(activeDimension), "Dimension does not registered");
-    this.activeDimension = activeDimension;
-  }
-
-  public DimensionInfo getActiveDimensionInfo() {
-    return activeDimensionInfo;
-  }
-
-  public void setActiveDimensionInfo(DimensionInfo activeDimensionInfo) {
-    Preconditions.checkState(activeDimension != null, "Active dimension does not set");
-    this.activeDimensionInfo = activeDimensionInfo;
-  }
-
-  public CompoundBinaryTag encode(ProtocolVersion protocolVersion) {
-    ListBinaryTag.Builder<CompoundBinaryTag> dimensionsBuilder = ListBinaryTag
-        .builder(BinaryTagTypes.COMPOUND);
-    for (Entry<Dimension, List<Biome>> dimensionEntry : dimensions.entrySet()) {
-      Dimension dimension = dimensionEntry.getKey();
-      CompoundBinaryTag attributes = dimension.encodeAttributes(protocolVersion);
-      if (protocolVersion.isBeforeOrEq(ProtocolVersion.MINECRAFT_1_16_1)) {
-        dimensionsBuilder.add(attributes);
-      } else {
-        CompoundBinaryTag dimensionData = CompoundBinaryTag.builder()
-            .putString("name", dimension.getKey())
-            .putInt("id", dimension.getId())
-            .put("element", attributes).build();
-        dimensionsBuilder.add(dimensionData);
-      }
-    }
-    if (protocolVersion.isBeforeOrEq(ProtocolVersion.MINECRAFT_1_16_1)) {
-      return CompoundBinaryTag.builder().put("dimension", dimensionsBuilder.build()).build();
-    } else {
-      CompoundBinaryTag encodedDimensions = CompoundBinaryTag.builder()
-          .putString("type", "minecraft:dimension_type")
-          .put("value", dimensionsBuilder.build())
-          .build();
-      return CompoundBinaryTag.builder()
-          .put("minecraft:dimension_type", encodedDimensions)
-          .put("minecraft:worldgen/biome", createBiomeRegistry(dimensions.values())).build();
-    }
-  }
-
-  private CompoundBinaryTag createBiomeRegistry(Collection<List<Biome>> allBiomes) {
-    Set<Biome> biomes = new HashSet<>();
-    for (List<Biome> biomeLise : allBiomes) {
-      biomes.addAll(biomeLise);
-    }
-
-    ListBinaryTag.Builder<CompoundBinaryTag> biomesBuilder = ListBinaryTag
-        .builder(BinaryTagTypes.COMPOUND);
-    for (Biome biome : biomes) {
-      biomesBuilder.add(biome.encodeBiome());
-    }
-    return CompoundBinaryTag.builder()
-        .putString("type", "minecraft:worldgen/biome")
-        .put("value", biomesBuilder.build()).build();
-  }
-}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/JoinGame.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/JoinGame.java
deleted file mode 100644
index ab8d3f63..00000000
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/JoinGame.java
+++ /dev/null
@@ -1,109 +0,0 @@
-/*
- * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
- *
- * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package net.elytrium.elytraproxy.botfilter.protocol.packet;
-
-import com.velocitypowered.api.network.ProtocolVersion;
-import com.velocitypowered.proxy.connection.registry.DimensionInfo;
-import com.velocitypowered.proxy.protocol.MinecraftPacket;
-import com.velocitypowered.proxy.protocol.ProtocolUtils;
-import io.netty.buffer.ByteBuf;
-import lombok.AllArgsConstructor;
-import lombok.Builder;
-import lombok.Data;
-import lombok.NoArgsConstructor;
-import net.elytrium.elytraproxy.botfilter.protocol.data.registry.DimensionRegistry;
-
-@Data
-@Builder
-@NoArgsConstructor
-@AllArgsConstructor
-public class JoinGame implements MinecraftPacket {
-
-  private int entityId;
-  private short gamemode;
-  private int dimension;
-  private long partialHashedSeed;
-  private short difficulty;
-  private boolean hardcore;
-  private int maxPlayers;
-  private String levelType;
-  private int viewDistance;
-  private boolean reducedDebugInfo;
-  private boolean showRespawnScreen;
-  private DimensionRegistry dimensionRegistry;
-  private short previousGamemode;
-
-  @Override
-  public void encode(ByteBuf buf, ProtocolUtils.Direction direction, ProtocolVersion version) {
-    buf.writeInt(entityId);
-    if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_16_2)) {
-      buf.writeBoolean(hardcore);
-      buf.writeByte(gamemode);
-    } else {
-      buf.writeByte(hardcore ? gamemode | 0x8 : gamemode);
-    }
-    DimensionInfo dimensionInfo = dimensionRegistry.getActiveDimensionInfo();
-    if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_16)) {
-      buf.writeByte(previousGamemode);
-      ProtocolUtils.writeStringArray(buf,
-          dimensionRegistry.getWorldNames().toArray(new String[0])); //worldNames
-      ProtocolUtils.writeCompoundTag(buf, dimensionRegistry.encode(version));
-      if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_16_2)) {
-        ProtocolUtils.writeCompoundTag(buf,
-            dimensionRegistry.getActiveDimension().encodeAttributes(version));
-        ProtocolUtils.writeString(buf, dimensionInfo.getRegistryIdentifier());
-      } else {
-        ProtocolUtils.writeString(buf, dimensionInfo.getRegistryIdentifier());
-        ProtocolUtils.writeString(buf, dimensionInfo.getLevelName());
-      }
-    } else if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_9_1)) {
-      buf.writeInt(dimension);
-    } else {
-      buf.writeByte(dimension);
-    }
-    if (version.isBeforeOrEq(ProtocolVersion.MINECRAFT_1_13_2)) {
-      buf.writeByte(difficulty);
-    }
-    if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_15)) {
-      buf.writeLong(partialHashedSeed);
-    }
-    if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_16_2)) {
-      ProtocolUtils.writeVarInt(buf, maxPlayers);
-    } else {
-      buf.writeByte(maxPlayers);
-    }
-    if (version.isBefore(ProtocolVersion.MINECRAFT_1_16)) {
-      ProtocolUtils.writeString(buf, levelType);
-    }
-    if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_14)) {
-      ProtocolUtils.writeVarInt(buf, viewDistance);
-    }
-    if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_8)) {
-      buf.writeBoolean(reducedDebugInfo);
-    }
-    if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_15)) {
-      buf.writeBoolean(showRespawnScreen);
-    }
-    if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_16)) {
-      buf.writeBoolean(dimensionInfo.isDebugType());
-      buf.writeBoolean(dimensionInfo.isFlat());
-    }
-  }
-}
\ No newline at end of file
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/UpdateViewPosition.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/UpdateViewPosition.java
deleted file mode 100644
index c97e6185..00000000
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/UpdateViewPosition.java
+++ /dev/null
@@ -1,49 +0,0 @@
-/*
- * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
- *
- * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package net.elytrium.elytraproxy.botfilter.protocol.packet;
-
-import com.velocitypowered.api.network.ProtocolVersion;
-import com.velocitypowered.proxy.protocol.MinecraftPacket;
-import com.velocitypowered.proxy.protocol.ProtocolUtils;
-import com.velocitypowered.proxy.protocol.ProtocolUtils.Direction;
-import io.netty.buffer.ByteBuf;
-import lombok.AllArgsConstructor;
-import lombok.Getter;
-import lombok.NoArgsConstructor;
-import lombok.Setter;
-import lombok.ToString;
-
-@Getter
-@Setter
-@AllArgsConstructor
-@NoArgsConstructor
-@ToString
-public class UpdateViewPosition implements MinecraftPacket {
-
-  private int chunkX;
-  private int chunkZ;
-
-  @Override
-  public void encode(ByteBuf buf, Direction direction, ProtocolVersion protocolVersion) {
-    System.out.println("Processing upd view pos packet");
-    ProtocolUtils.writeVarInt(buf, chunkX);
-    ProtocolUtils.writeVarInt(buf, chunkZ);
-  }
-}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/world/UpdateLight.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/world/UpdateLight.java
deleted file mode 100644
index aa4e35f6..00000000
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/world/UpdateLight.java
+++ /dev/null
@@ -1,125 +0,0 @@
-/*
- * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
- *
- * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package net.elytrium.elytraproxy.botfilter.protocol.packet.world;
-
-import com.velocitypowered.api.network.ProtocolVersion;
-import com.velocitypowered.proxy.protocol.MinecraftPacket;
-import com.velocitypowered.proxy.protocol.ProtocolUtils;
-import com.velocitypowered.proxy.protocol.ProtocolUtils.Direction;
-import io.netty.buffer.ByteBuf;
-import java.util.BitSet;
-import net.elytrium.elytraproxy.botfilter.protocol.util.mcprotocollib.NibbleArray3d;
-import net.elytrium.elytraproxy.botfilter.server.world.chunk.ChunkSnapshot;
-import net.elytrium.elytraproxy.botfilter.server.world.chunk.LightSection;
-
-public class UpdateLight implements MinecraftPacket {
-
-  private final ChunkSnapshot chunk;
-  private final NibbleArray3d[] skyLight = new NibbleArray3d[18];
-  private final NibbleArray3d[] blockLight = new NibbleArray3d[18];
-  private int skyLightMask = 0;
-  private int blockLightMask = 0;
-  private int emptySkyLightMask = 0;
-  private int emptyBlockLightMask = 0;
-
-  private int skyLightArrayCount;
-  private int blockLightArrayCount;
-
-  public UpdateLight() {
-    chunk = null;
-  }
-
-  public UpdateLight(ChunkSnapshot chunkSnapshot) {
-    this.chunk = chunkSnapshot;
-    prepareLighting();
-  }
-
-  @Override
-  public void encode(ByteBuf buf, Direction direction, ProtocolVersion version) {
-    ProtocolUtils.writeVarInt(buf, chunk.getX());
-    ProtocolUtils.writeVarInt(buf, chunk.getZ());
-
-    if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_16)) {
-      buf.writeBoolean(true); //trust edges
-    }
-
-    if (version.isBefore(ProtocolVersion.MINECRAFT_1_17)) {
-      ProtocolUtils.writeVarInt(buf, skyLightMask);
-      ProtocolUtils.writeVarInt(buf, blockLightMask);
-      ProtocolUtils.writeVarInt(buf, emptySkyLightMask);
-      ProtocolUtils.writeVarInt(buf, emptyBlockLightMask);
-    } else {
-      write117Mask(buf, skyLightMask);
-      write117Mask(buf, blockLightMask);
-      write117Mask(buf, emptySkyLightMask);
-      write117Mask(buf, emptyBlockLightMask);
-    }
-
-    if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_17)) {
-      ProtocolUtils.writeVarInt(buf, skyLightArrayCount);
-    }
-    for (NibbleArray3d array3d : skyLight) {
-      if (array3d != null) {
-        ProtocolUtils.writeByteArray(buf, array3d.getData());
-      }
-    }
-    if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_17)) {
-      ProtocolUtils.writeVarInt(buf, blockLightArrayCount);
-    }
-    for (NibbleArray3d nibbleArray3d : blockLight) {
-      if (nibbleArray3d != null) {
-        ProtocolUtils.writeByteArray(buf, nibbleArray3d.getData());
-      }
-    }
-  }
-
-  private void prepareLighting() {
-
-    LightSection[] lightSections = chunk.getLight();
-
-    for (int i = 0; i < lightSections.length; i++) {
-      LightSection section = lightSections[i];
-      if (section.getSkyLight() == LightSection.NO_LIGHT) {
-        emptySkyLightMask |= 1 << i;
-      } else if (section.getSkyLight() != LightSection.ALL_LIGHT) {
-        skyLightMask |= 1 << i;
-        skyLight[i] = section.getSkyLight();
-        skyLightArrayCount++;
-      }
-
-      if (section.getBlockLight() != LightSection.NO_LIGHT) {
-        blockLightMask |= 1 << i;
-        blockLight[i] = section.getBlockLight();
-        blockLightArrayCount++;
-      } else {
-        emptyBlockLightMask |= 1 << i;
-      }
-    }
-  }
-
-  private static void write117Mask(ByteBuf buf, int mask) {
-    BitSet bitSet = BitSet.valueOf(new long[] {mask});
-    long[] mk = bitSet.toLongArray();
-    ProtocolUtils.writeVarInt(buf, mk.length);
-    for (long m : mk) {
-      buf.writeLong(m);
-    }
-  }
-}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/BotFilterSessionHandler.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/BotFilterSessionHandler.java
deleted file mode 100644
index eb400ce2..00000000
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/BotFilterSessionHandler.java
+++ /dev/null
@@ -1,191 +0,0 @@
-/*
- * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
- *
- * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package net.elytrium.elytraproxy.botfilter.server;
-
-import com.velocitypowered.proxy.connection.client.ConnectedPlayer;
-import com.velocitypowered.proxy.connection.client.LoginSessionHandler;
-import com.velocitypowered.proxy.protocol.packet.Chat;
-import io.netty.buffer.ByteBuf;
-import java.util.Objects;
-import lombok.Getter;
-import lombok.Setter;
-import net.elytrium.elytraproxy.botfilter.protocol.cache.PreparedPacket;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.SetExp;
-import net.elytrium.elytraproxy.config.Settings;
-
-@Getter
-public class BotFilterSessionHandler extends FallingCheckHandler {
-
-  public static final int TOTAL_TICKS = 100;
-  private static final long TOTAL_TIME = (TOTAL_TICKS * 50) - 100;
-
-  private final ConnectedPlayer player;
-  private final LoginSessionHandler originalHandler;
-  private final VirtualServer virtualServer;
-  @Setter
-  private String captchaAnswer;
-  private int aticks = 0;
-  private long joinTime = System.currentTimeMillis();
-  private int attempts = Settings.IMP.ANTIBOT.CAPTCHA_ATTEMPTS;
-  private CheckState state = CheckState.ONLY_CAPTCHA/*CAPTCHA_ON_POSITION_FAILED*/;
-
-  public BotFilterSessionHandler(ConnectedPlayer player, LoginSessionHandler originalHandler, VirtualServer virtualServer) {
-    super(player.getProtocolVersion());
-    this.player = player;
-    this.originalHandler = originalHandler;
-    this.virtualServer = virtualServer;
-  }
-
-  @Override
-  public void disconnected() {
-    virtualServer.disconnected(this);
-  }
-
-  @Override
-  public void deactivated() {
-    virtualServer.disconnected(this);
-  }
-
-  @Override
-  public boolean handle(Chat chat) {
-    String message = chat.getMessage();
-    if (message.length() > 256) {
-      return false;
-    } else if (message.equals(captchaAnswer)) {
-      finishCheck();
-    } else if (--attempts != 0) {
-      virtualServer.sendCaptcha(this);
-    } else {
-      virtualServer.getElytraProxy().getStatistics().addBlockedBots();
-      player.getConnection().closeWith(virtualServer.getPackets().getCaptchaFailed());
-    }
-    return true;
-  }
-
-  @Override
-  public void handleUnknown(ByteBuf packet) {
-    if (packet.readableBytes() > 2048) {
-      virtualServer.getElytraProxy().getStatistics().addBlockedBots();
-      player.getConnection().closeWith(virtualServer.getPackets().getFallingCheckFailed());
-    }
-  }
-
-  private void finishCheck() {
-    if (System.currentTimeMillis() - joinTime < TOTAL_TIME && state != CheckState.ONLY_CAPTCHA) {
-      if (state == CheckState.CAPTCHA_POSITION && aticks < TOTAL_TICKS) {
-        player.getConnection().write(virtualServer.getPackets().getResetSlot());
-        state = CheckState.ONLY_POSITION;
-      } else {
-        if (state == CheckState.CAPTCHA_ON_POSITION_FAILED) {
-          changeStateToCaptcha();
-        } else {
-          virtualServer.getElytraProxy().getStatistics().addBlockedBots();
-          player.getConnection().closeWith(virtualServer.getPackets().getFallingCheckFailed());
-        }
-      }
-      return;
-    }
-    state = CheckState.SUCCESSFULLY;
-    System.out.println("Finishing check");
-    player.getConnection().write(virtualServer.getPackets().getSuccessfulChat());
-    player.getConnection().setSessionHandler(originalHandler);
-    originalHandler.initialize(player);
-    //fakeServer.getBotFilter().restoreOriginalHandlers(user);
-    //afterCheck.run();
-  }
-
-  @Override
-  public void onMove() {
-    if (lastY == -1 || onGround) {
-      return;
-    }
-    if (state == CheckState.ONLY_CAPTCHA) {
-      if (lastY != y && waitingTeleportId == -1) {
-        resetPosition(true);
-      }
-      return;
-    }
-    if (formatDouble(lastY - y) != getSpeed(ticks)) {
-      virtualServer.getElytraProxy().getStatistics().addBlockedBots();
-      player.getConnection().closeWith(virtualServer.getPackets().getFallingCheckFailed());
-      return;
-    }
-    if (y <= 60 && state == CheckState.CAPTCHA_POSITION && waitingTeleportId == -1) {
-      resetPosition(false);
-    }
-    if (aticks >= TOTAL_TICKS && state != CheckState.CAPTCHA_POSITION) {
-      finishCheck();
-      return;
-    }
-    if (state == CheckState.CAPTCHA_ON_POSITION_FAILED || state == CheckState.ONLY_POSITION) {
-      PreparedPacket<SetExp> expBuf = virtualServer.getPackets().getExperience().get(aticks);
-      if (expBuf != null) {
-        System.out.println("Sent expBuf");
-        player.getConnection().write(expBuf);
-      }
-    }
-    ticks++;
-    aticks++;
-  }
-
-  private void resetPosition(boolean disableFall) {
-    if (disableFall) {
-      System.out.println("Sent noAbil");
-      player.getConnection().write(virtualServer.getPackets().getNoAbilities());
-    }
-    waitingTeleportId = 9876;
-    System.out.println("Sent posAndLook");
-    player.getConnection().write(virtualServer.getPackets().getCaptchaPosAndLook());
-  }
-
-  private void changeStateToCaptcha() {
-    state = CheckState.ONLY_CAPTCHA;
-    joinTime = System.currentTimeMillis() + 3500;
-    System.out.println("Sent chat captcha");
-    resetPosition(true);
-    virtualServer.sendCaptcha(this);
-  }
-
-  @Override
-  public boolean equals(Object o) {
-    if (this == o) {
-      return true;
-    }
-    if (o == null || getClass() != o.getClass()) {
-      return false;
-    }
-    BotFilterSessionHandler that = (BotFilterSessionHandler) o;
-    return player.getUsername().equals(that.player.getUsername());
-  }
-
-  @Override
-  public int hashCode() {
-    return Objects.hash(player.getUsername());
-  }
-
-  public enum CheckState {
-    ONLY_POSITION,
-    ONLY_CAPTCHA,
-    CAPTCHA_POSITION,
-    CAPTCHA_ON_POSITION_FAILED,
-    SUCCESSFULLY,
-    FAILED
-  }
-}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/ServerPackets.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/ServerPackets.java
deleted file mode 100644
index ac056b4d..00000000
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/ServerPackets.java
+++ /dev/null
@@ -1,278 +0,0 @@
-/*
- * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
- *
- * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package net.elytrium.elytraproxy.botfilter.server;
-
-import com.google.common.collect.ImmutableList;
-import com.velocitypowered.api.network.ProtocolVersion;
-import com.velocitypowered.proxy.connection.registry.DimensionInfo;
-import com.velocitypowered.proxy.protocol.ProtocolUtils;
-import com.velocitypowered.proxy.protocol.StateRegistry;
-import com.velocitypowered.proxy.protocol.packet.Chat;
-import com.velocitypowered.proxy.protocol.packet.Disconnect;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-import lombok.Getter;
-import net.elytrium.elytraproxy.botfilter.protocol.cache.MultiplePreparedPackets;
-import net.elytrium.elytraproxy.botfilter.protocol.cache.PacketCompressor;
-import net.elytrium.elytraproxy.botfilter.protocol.cache.PreparedPacket;
-import net.elytrium.elytraproxy.botfilter.protocol.data.registry.Biome;
-import net.elytrium.elytraproxy.botfilter.protocol.data.registry.Dimension;
-import net.elytrium.elytraproxy.botfilter.protocol.data.registry.DimensionRegistry;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.JoinGame;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.PlayerAbilities;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.PlayerPositionAndLook;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.SetExp;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.SetSlot;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.UpdateViewPosition;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.world.ChunkData;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.world.UpdateLight;
-import net.elytrium.elytraproxy.botfilter.server.world.VirtualWorld;
-import net.elytrium.elytraproxy.botfilter.server.world.chunk.SimpleChunk;
-import net.elytrium.elytraproxy.config.Settings;
-import net.kyori.adventure.text.Component;
-import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
-
-@SuppressWarnings("rawtypes")
-@Getter
-public class ServerPackets {
-
-  private final PacketCompressor packetCompressor;
-  private final VirtualServer virtualServer;
-  private VirtualWorld virtualWorld;
-  private MultiplePreparedPackets spawnPackets;
-  private PreparedPacket<Disconnect> alreadyConnected;
-  private PreparedPacket<Disconnect> tooBigPacket;
-  private PreparedPacket<Disconnect> captchaFailed;
-  private PreparedPacket<Disconnect> fallingCheckFailed;
-  private PreparedPacket<SetSlot> setSlot;
-  private PreparedPacket<SetSlot> resetSlot;
-  private PreparedPacket<Chat> checkingChat;
-  private PreparedPacket<Chat> checkingCaptchaChat;
-  private PreparedPacket<Chat> successfulChat;
-  private PreparedPacket<PlayerPositionAndLook> captchaPosAndLook;
-  private PreparedPacket<PlayerAbilities> noAbilities;
-  private List<PreparedPacket<SetExp>> experience;
-
-  public ServerPackets(PacketCompressor packetCompressor, VirtualServer virtualServer) {
-    this.packetCompressor = packetCompressor;
-    this.virtualServer = virtualServer;
-  }
-
-  public void createPackets() {
-    releaseAll();
-    // TODO: Проверять валид ли ид
-    String key = Settings.IMP.ANTIBOT.BOTFILTER_DIMENSION.MODERN_KEY;
-    int dimensionId = Settings.IMP.ANTIBOT.BOTFILTER_DIMENSION.ID;
-    Dimension dimension = Dimension.getDimension(key, dimensionId);
-    this.virtualWorld = new VirtualWorld(dimension,
-        new DimensionInfo(key, key, true, false));
-    virtualWorld.setSkyLight(0, 60, 0,
-        (byte) 1); //1.7 workaround //TODO: Maybe broken with new light system realiztion
-
-    /*
-    for (int x = 0; x < 16; x++) {
-      for (int z = 0; z < 16; z++) {
-        virtualWorld.setBlock(x, 40, z, SimpleBlock.GRANITE);
-        virtualWorld.setBlock(x, 60, z, SimpleBlock.GRANITE);
-      }
-    }
-    for (int x = 1; x < 15; x++) {
-      for (int z = 1; z < 15; z++) {
-        if (x % 3 == 0 && z % 3 == 0) {
-          virtualWorld.setBlock(x, 40, z, SimpleBlock.BARRIER);
-          virtualWorld.setBlockLight(x, 41, z, (byte) 15);
-        }
-      }
-    }
-    for (int x = 0; x < 16; x++) {
-      for (int y = 40; y <= 60; y++) {
-        virtualWorld.setBlock(x, y, 0, SimpleBlock.GRANITE);
-        virtualWorld.setBlock(0, y, x, SimpleBlock.GRANITE);
-        virtualWorld.setBlock(x, y, 15, SimpleBlock.GRANITE);
-        virtualWorld.setBlock(15, y, x, SimpleBlock.GRANITE);
-      }
-    }
-    */
-
-    List<PreparedPacket> preparedPackets = new ArrayList<>();
-    preparedPackets.add(createJoinGamePacket());
-    preparedPackets.addAll(createChunksPackets());
-    preparedPackets.addAll(createUpdateLightPackets());
-    preparedPackets.add(createPlayerPosAndLookPacket());
-    spawnPackets = new MultiplePreparedPackets(preparedPackets.toArray(new PreparedPacket[0]));
-
-    experience = createExpPackets();
-    captchaPosAndLook = createPlayerPosAndLookPacket();
-
-    noAbilities = createAbilitiesPacket();
-    alreadyConnected = createDisconnectPacket("&cAlready connected");
-    tooBigPacket = createDisconnectPacket("&cToo big Packet");
-    captchaFailed = createDisconnectPacket(Settings.IMP.ANTIBOT.STRINGS.CAPTCHA_FAILED);
-    fallingCheckFailed = createDisconnectPacket(Settings.IMP.ANTIBOT.STRINGS.FALLING_CHECK_FAILED);
-    setSlot = createSetSlotPacket(0, 36, 358, 1, 0);
-    resetSlot = createSetSlotPacket(0, 36, -1, 0, 0);
-    virtualWorld = null;
-
-    checkingChat = createChatPacket(Settings.IMP.ANTIBOT.STRINGS.CHECKING);
-    checkingCaptchaChat = createChatPacket(Settings.IMP.ANTIBOT.STRINGS.CHECKING_CAPTCHA);
-    successfulChat = createChatPacket(Settings.IMP.ANTIBOT.STRINGS.SUCCESSFUL);
-  }
-
-  private PreparedPacket<PlayerAbilities> createAbilitiesPacket() {
-    PreparedPacket<PlayerAbilities> packet = new PreparedPacket<>();
-    packet.prepare(new PlayerAbilities((byte) 6, 0f, 0f));
-    return packet;
-  }
-
-  private PreparedPacket<JoinGame> createJoinGamePacket() {
-    String key = Settings.IMP.ANTIBOT.BOTFILTER_DIMENSION.MODERN_KEY;
-    int dimensionId = Settings.IMP.ANTIBOT.BOTFILTER_DIMENSION.ID;
-    Dimension dimension = Dimension.getDimension(key, dimensionId);
-    DimensionRegistry dimensionRegistry = new DimensionRegistry();
-    dimensionRegistry.addDimension(
-        dimension, ImmutableList.of(Biome.PLAINS, Biome.SWAMP, Biome.SWAMP_HILLS));
-    dimensionRegistry.setActiveDimension(dimension);
-    dimensionRegistry.setActiveDimensionInfo(
-        new DimensionInfo(key, key, false, false));
-    PreparedPacket<JoinGame> joinGame = new PreparedPacket<>();
-    joinGame.prepare(JoinGame.builder().entityId(0).gamemode((short) 2).dimension(dimensionId)
-        .partialHashedSeed(1).difficulty((short) 0).maxPlayers(1).levelType("flat").viewDistance(4)
-        .reducedDebugInfo(true).showRespawnScreen(true)
-        .hardcore(Settings.IMP.ANTIBOT.BOTFILTER_DIMENSION.HARDCORE_HEARTS)
-        .dimensionRegistry(dimensionRegistry).build());
-
-    return processCompression(joinGame);
-  }
-
-  private PreparedPacket<PlayerPositionAndLook> createPlayerPosAndLookPacket() {
-    PreparedPacket<PlayerPositionAndLook> playerPosAndLook = new PreparedPacket<>();
-    playerPosAndLook.prepare(new PlayerPositionAndLook(6, 60, 6, 0f, 0f, -133, false, true));
-    return processCompression(playerPosAndLook);
-  }
-
-  private List<PreparedPacket<ChunkData>> createChunksPackets() {
-    List<PreparedPacket<ChunkData>> packets = new ArrayList<>();
-    for (SimpleChunk chunk : virtualWorld.getChunks()) {
-      packets.add(createChunkDataPacket(chunk));
-    }
-    return packets;
-  }
-
-  private List<PreparedPacket<SetExp>> createExpPackets() {
-    List<PreparedPacket<SetExp>> packets = new ArrayList<>();
-    int ticks = BotFilterSessionHandler.TOTAL_TICKS;
-    int interval = 2;
-    float expInterval = 1f / ((float) ticks / (float) interval);
-    SetExp setExp = new SetExp(0, 0, 0);
-    for (int i = 0; i < ticks; i = i + interval) {
-      setExp.setExpBar(setExp.getExpBar() + expInterval);
-      setExp.setLevel(setExp.getLevel() + 1);
-      PreparedPacket<SetExp> expPacket = new PreparedPacket<>();
-      expPacket.prepare(setExp);
-      packets.add(processCompression(expPacket));
-    }
-    return packets;
-  }
-
-  private PreparedPacket<ChunkData> createChunkDataPacket(SimpleChunk chunk) {
-    PreparedPacket<ChunkData> chunkPacket = new PreparedPacket<>();
-    chunkPacket.prepare(new ChunkData(chunk.getFullChunkSnapshot(),
-        chunk.getWorld().getDimension().isHasSkylight()));
-    return processCompression(chunkPacket);
-  }
-
-  private PreparedPacket<SetSlot> createSetSlotPacket(int windowId, int slot, int item, int count, int data) {
-    PreparedPacket<SetSlot> slotPacket = new PreparedPacket<>();
-    slotPacket.prepare(new SetSlot(windowId, slot, item, count, data));
-    return processCompression(slotPacket);
-  }
-
-  private PreparedPacket<Chat> createChatPacket(String text) {
-    PreparedPacket<Chat> chatPacket = new PreparedPacket<>();
-    chatPacket.prepare(new Chat(
-        ProtocolUtils.getJsonChatSerializer(ProtocolVersion.MINIMUM_VERSION).serialize(
-            LegacyComponentSerializer
-                .legacyAmpersand()
-                .deserialize(text)
-        ), Chat.CHAT_TYPE, null
-    ), ProtocolVersion.MINIMUM_VERSION, ProtocolVersion.MINECRAFT_1_15_2, StateRegistry.PLAY);
-    chatPacket.prepare(new Chat(
-        ProtocolUtils.getJsonChatSerializer(ProtocolVersion.MINECRAFT_1_16).serialize(
-            LegacyComponentSerializer
-                .legacyAmpersand()
-                .deserialize(text)
-        ), Chat.CHAT_TYPE, null
-    ), ProtocolVersion.MINECRAFT_1_16, ProtocolVersion.MAXIMUM_VERSION, StateRegistry.PLAY);
-    return processCompression(chatPacket);
-  }
-
-  private List<PreparedPacket<UpdateLight>> createUpdateLightPackets() {
-    List<PreparedPacket<UpdateLight>> packets = new ArrayList<>();
-    for (SimpleChunk chunk : virtualWorld.getChunks()) {
-      packets.add(createUpdateLightPacket(chunk));
-    }
-    return packets;
-  }
-
-  private PreparedPacket<UpdateLight> createUpdateLightPacket(SimpleChunk chunk) {
-    PreparedPacket<UpdateLight> lightPacket = new PreparedPacket<>();
-    lightPacket
-        .prepare(new UpdateLight(chunk.getFullChunkSnapshot()), ProtocolVersion.MINECRAFT_1_14);
-    return processCompression(lightPacket);
-  }
-
-  private PreparedPacket<UpdateViewPosition> createUpdateViewPositionPacket(SimpleChunk chunk) {
-    PreparedPacket<UpdateViewPosition> update = new PreparedPacket<>();
-    update.prepare(new UpdateViewPosition(chunk.getX(), chunk.getZ()),
-        ProtocolVersion.MINECRAFT_1_17);
-    return processCompression(update);
-  }
-
-  private PreparedPacket<Disconnect> createDisconnectPacket(String message) {
-    Component component = LegacyComponentSerializer.legacyAmpersand().deserialize(message);
-    PreparedPacket<Disconnect> disconnect = new PreparedPacket<>();
-    disconnect.prepare(Disconnect.create(component, ProtocolVersion.MINECRAFT_1_7_2),
-        ProtocolVersion.MINECRAFT_1_7_2, ProtocolVersion.MINECRAFT_1_15_2, StateRegistry.LOGIN);
-    disconnect.prepare(Disconnect.create(component, ProtocolVersion.MINECRAFT_1_16),
-        ProtocolVersion.MINECRAFT_1_16, StateRegistry.LOGIN);
-    disconnect.finish();
-    return disconnect;
-  }
-
-  private <T extends PreparedPacket<?>> T processCompression(T preparedPacket) {
-    if (packetCompressor.isCompressionEnabled()) {
-      preparedPacket.processCompress(packetCompressor);
-    }
-    preparedPacket.finish();
-    return preparedPacket;
-  }
-
-  public void releaseAll() {
-    for (PreparedPacket packet : Arrays.asList(alreadyConnected)) {
-      if (packet != null) {
-        packet.releaseBuffers();
-      }
-    }
-    if (spawnPackets != null) {
-      spawnPackets.release();
-    }
-  }
-}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/VirtualServer.java b/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/VirtualServer.java
deleted file mode 100644
index 0c19ad27..00000000
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/VirtualServer.java
+++ /dev/null
@@ -1,88 +0,0 @@
-/*
- * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
- *
- * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package net.elytrium.elytraproxy.botfilter.server;
-
-import com.velocitypowered.proxy.connection.MinecraftConnection;
-import com.velocitypowered.proxy.connection.MinecraftSessionHandler;
-import com.velocitypowered.proxy.connection.client.ConnectedPlayer;
-import com.velocitypowered.proxy.protocol.StateRegistry;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.ConcurrentMap;
-import lombok.Getter;
-import net.elytrium.elytraproxy.ElytraProxy;
-import net.elytrium.elytraproxy.botfilter.protocol.cache.CachedCaptcha;
-import net.elytrium.elytraproxy.botfilter.protocol.cache.CaptchaHandler;
-import net.elytrium.elytraproxy.botfilter.protocol.cache.PacketCompressor;
-
-public class VirtualServer implements MinecraftSessionHandler {
-
-  @Getter
-  private final ElytraProxy elytraProxy;
-  private final ConcurrentMap<String, BotFilterSessionHandler>
-      activeConnections = new ConcurrentHashMap<>();
-  @Getter
-  private final ServerPackets packets;
-
-  public VirtualServer(ElytraProxy elytraProxy) {
-    this.elytraProxy = elytraProxy;
-    this.packets = new ServerPackets(
-        new PacketCompressor(elytraProxy.getVelocityServer()::getConfiguration), this);
-  }
-
-  public void reload() {
-    for (BotFilterSessionHandler session : activeConnections.values()) {
-      session.getPlayer().getConnection().close();
-    }
-    packets.createPackets();
-  }
-
-  public void spawnPlayer(BotFilterSessionHandler user) {
-    String username = user.getPlayer().getUsername().toLowerCase();
-    ConnectedPlayer player = user.getPlayer();
-    MinecraftConnection connection = player.getConnection();
-    if (activeConnections.putIfAbsent(username, user) != null) {
-      connection.closeWith(packets.getAlreadyConnected());
-      //user.closeWith(preparedPackets.getAlreadyConnected());
-      return;
-    }
-    user.getOriginalHandler().completeLoginProtocol(player, false);
-    connection.setState(StateRegistry.BotFilter);
-    packets.getSpawnPackets().write(connection, player.isOnlineMode());
-    sendCaptcha(user);
-    connection.flush();
-  }
-
-  public void sendCaptcha(BotFilterSessionHandler handler) {
-    CaptchaHandler captchaHandler = CachedCaptcha.randomCaptcha();
-    String captchaAnswer = captchaHandler.getAnswer();
-    handler.setCaptchaAnswer(captchaAnswer);
-    MinecraftConnection connection = handler.getPlayer().getConnection();
-    System.out.println("Sent slot captcha");
-    connection.write(packets.getSetSlot());
-    System.out.println("Sent map captcha");
-    connection.write(captchaHandler.getMap());
-    System.out.println("Sent chat captcha");
-    connection.write(packets.getCheckingCaptchaChat());
-  }
-
-  public void disconnected(BotFilterSessionHandler botFilterConnection) {
-    activeConnections.remove(botFilterConnection.getPlayer().getUsername().toLowerCase());
-  }
-}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/commands/AlertCommand.java b/proxy/src/main/java/net/elytrium/elytraproxy/commands/AlertCommand.java
index d1cbb572..f01a0c0e 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/commands/AlertCommand.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/commands/AlertCommand.java
@@ -44,26 +44,17 @@ public class AlertCommand implements SimpleCommand {
       source.sendMessage(
           LegacyComponentSerializer
               .legacyAmpersand()
-              .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.ALERT_MESSAGE_NEEDED
-                  .replace("{NL}", "\n")
-                  .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-              ));
+              .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.ALERT_MESSAGE_NEEDED));
     } else {
       String message = String.join(" ", args);
       Component component = LegacyComponentSerializer
           .legacyAmpersand()
-          .deserialize((Settings.IMP.MESSAGES.ELYTRAPROXY.ALERT_PREFIX + message)
-              .replace("{NL}", "\n")
-              .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-          );
+          .deserialize((Settings.IMP.MESSAGES.ELYTRAPROXY.ALERT_PREFIX + message));
       if (server.getAllPlayers().size() == 0) {
         source.sendMessage(
             LegacyComponentSerializer
                 .legacyAmpersand()
-                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.ALERT_SERVER_EMPTY
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                ));
+                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.ALERT_SERVER_EMPTY));
       } else if (server.getAllPlayers().size() >= 1) {
         if (!(source instanceof Player)) {
           source.sendMessage(component);
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/commands/ElytraProxyCommand.java b/proxy/src/main/java/net/elytrium/elytraproxy/commands/ElytraProxyCommand.java
index eba6bf48..bf1b46e3 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/commands/ElytraProxyCommand.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/commands/ElytraProxyCommand.java
@@ -172,28 +172,19 @@ public class ElytraProxyCommand implements SimpleCommand {
           source.sendMessage(
               LegacyComponentSerializer
                   .legacyAmpersand()
-                  .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.RELOAD_SUCCESS
-                      .replace("{NL}", "\n")
-                      .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                  ));
+                  .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.RELOAD_SUCCESS));
         } else {
           source.sendMessage(
               LegacyComponentSerializer
                   .legacyAmpersand()
-                  .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.RELOAD_FAILURE
-                      .replace("{NL}", "\n")
-                      .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                  ));
+                  .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.RELOAD_FAILURE));
         }
       } catch (Exception e) {
         logger.error("Unable to reload configuration", e);
         source.sendMessage(
             LegacyComponentSerializer
                 .legacyAmpersand()
-                .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.RELOAD_FAILURE
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                ));
+                .deserialize(Settings.IMP.MESSAGES.VELOCITY.COMMAND.RELOAD_FAILURE));
       }
 
       elytraProxy.reload(source);
@@ -224,8 +215,6 @@ public class ElytraProxyCommand implements SimpleCommand {
                   LegacyComponentSerializer
                       .legacyAmpersand()
                       .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.STATS_FORMAT
-                          .replace("{NL}", "\n")
-                          .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
                           .replace("{0}", String.valueOf(statistics.getBlockedConnections()))
                           .replace("{1}", String.valueOf(statistics.getConnectionsPerSecond()))
                           .replace("{2}", String.valueOf(statistics.getPingsPerSecond()))
@@ -251,19 +240,13 @@ public class ElytraProxyCommand implements SimpleCommand {
         source.sendMessage(
             LegacyComponentSerializer
                 .legacyAmpersand()
-                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.STATS_DISABLED
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                ));
+                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.STATS_DISABLED));
         playersWithStats.remove(player);
       } else {
         source.sendMessage(
             LegacyComponentSerializer
                 .legacyAmpersand()
-                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.STATS_ENABLED
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                ));
+                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.STATS_ENABLED));
         playersWithStats.add(player);
       }
     }
@@ -287,19 +270,13 @@ public class ElytraProxyCommand implements SimpleCommand {
         source.sendMessage(
             LegacyComponentSerializer
                 .legacyAmpersand()
-                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.COMMAND_SPY_DISABLED
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                ));
+                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.COMMAND_SPY_DISABLED));
         playersWithSpy.remove(player);
       } else {
         source.sendMessage(
             LegacyComponentSerializer
                 .legacyAmpersand()
-                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.COMMAND_SPY_ENABLED
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-                ));
+                .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.COMMAND_SPY_ENABLED));
         playersWithSpy.add(player);
       }
     }
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/commands/FindCommand.java b/proxy/src/main/java/net/elytrium/elytraproxy/commands/FindCommand.java
index 0230c0d7..9d9acf7c 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/commands/FindCommand.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/commands/FindCommand.java
@@ -63,10 +63,7 @@ public class FindCommand implements SimpleCommand {
       source.sendMessage(
           LegacyComponentSerializer
               .legacyAmpersand()
-              .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.FIND_USERNAME_NEEDED
-                  .replace("{NL}", "\n")
-                  .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-              ));
+              .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.FIND_USERNAME_NEEDED));
     } else {
       Optional<Player> player = server.getPlayer(args[0]);
       if (player.isPresent()) {
@@ -76,8 +73,6 @@ public class FindCommand implements SimpleCommand {
             LegacyComponentSerializer
                 .legacyAmpersand()
                 .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.FIND_USER_ONLINE_AT
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
                     .replace("{0}", pl.getUsername())
                     .replace("{1}", srv.getServerInfo().getName())
                 )));
@@ -86,8 +81,6 @@ public class FindCommand implements SimpleCommand {
             LegacyComponentSerializer
                 .legacyAmpersand()
                 .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.USER_NOT_ONLINE
-                    .replace("{NL}", "\n")
-                    .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
                     .replace("{0}", args[0])
                 ));
       }
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/commands/MessageCommand.java b/proxy/src/main/java/net/elytrium/elytraproxy/commands/MessageCommand.java
deleted file mode 100644
index 48a276c8..00000000
--- a/proxy/src/main/java/net/elytrium/elytraproxy/commands/MessageCommand.java
+++ /dev/null
@@ -1,123 +0,0 @@
-/*
- * Copyright (C) 2021 Elytrium
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package net.elytrium.elytraproxy.commands;
-
-import com.google.common.collect.ImmutableList;
-import com.velocitypowered.api.command.CommandSource;
-import com.velocitypowered.api.command.SimpleCommand;
-import com.velocitypowered.api.proxy.Player;
-import com.velocitypowered.api.proxy.ProxyServer;
-import com.velocitypowered.api.proxy.ServerConnection;
-import java.util.Arrays;
-import java.util.List;
-import java.util.Optional;
-import java.util.stream.Collectors;
-import net.elytrium.elytraproxy.config.Settings;
-import net.kyori.adventure.text.Component;
-import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
-
-public class MessageCommand implements SimpleCommand {
-
-  private final ProxyServer server;
-
-  public MessageCommand(ProxyServer server) {
-    this.server = server;
-  }
-
-  @Override
-  public List<String> suggest(final SimpleCommand.Invocation invocation) {
-    final CommandSource source = invocation.source();
-
-    if (source instanceof Player) {
-      Optional<ServerConnection> serverConnection = ((Player) source).getCurrentServer();
-      if (serverConnection.isPresent()) {
-        return serverConnection.get()
-            .getServer()
-            .getPlayersConnected()
-            .stream()
-            .map(Player::getUsername)
-            .collect(Collectors.toList());
-      }
-    }
-    return ImmutableList.of();
-  }
-
-  @Override
-  public void execute(final Invocation invocation) {
-    final CommandSource source = invocation.source();
-    final String[] args = invocation.arguments();
-
-    if (args.length == 0) {
-      source.sendMessage(
-          LegacyComponentSerializer
-              .legacyAmpersand()
-              .deserialize("&cУкажите имя игрока, которому вы хотите отправить сообщение"
-                  .replace("{NL}", "\n")
-                  .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-              ));
-      return;
-    }
-
-    if (args.length == 1) {
-      source.sendMessage(
-          LegacyComponentSerializer
-              .legacyAmpersand()
-              .deserialize("&cУкажите сообщение, которое вы хотите отправить игроку"
-                  .replace("{NL}", "\n")
-                  .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-              ));
-      return;
-    }
-
-    Optional<Player> playerOptional = server.getPlayer(args[0]);
-    if (playerOptional.isPresent()) {
-      Player player = playerOptional.get();
-      String message = String.join(" ", Arrays.copyOfRange(args, 1, args.length - 1));
-      String author = (source instanceof Player)
-          ? ((Player) source).getUsername()
-          : Settings.IMP.MESSAGES.ELYTRAPROXY.IF_CONSOLE
-              .replace("{NL}", "\n")
-              .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX);
-
-      Component component = LegacyComponentSerializer
-          .legacyAmpersand()
-          .deserialize("&d&l[{0}->{1}] {2}"
-              .replace("{NL}", "\n")
-              .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-              .replace("{0}", author)
-              .replace("{1}", player.getUsername())
-              .replace("{2}", message)
-          );
-
-      player.sendMessage(component);
-    } else {
-      source.sendMessage(
-          LegacyComponentSerializer
-              .legacyAmpersand()
-              .deserialize("&cИгрок не найден, или его нет в сети"
-                  .replace("{NL}", "\n")
-                  .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-              ));
-    }
-  }
-
-  @Override
-  public boolean hasPermission(final SimpleCommand.Invocation invocation) {
-    return true;
-  }
-}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/commands/SendCommand.java b/proxy/src/main/java/net/elytrium/elytraproxy/commands/SendCommand.java
index cd45e5c0..4103669d 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/commands/SendCommand.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/commands/SendCommand.java
@@ -77,10 +77,7 @@ public class SendCommand implements SimpleCommand {
       source.sendMessage(
           LegacyComponentSerializer
               .legacyAmpersand()
-              .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.SEND_NOT_ENOUGH_ARGUMENTS
-                  .replace("{NL}", "\n")
-                  .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
-              ));
+              .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.SEND_NOT_ENOUGH_ARGUMENTS));
       return;
     }
 
@@ -92,15 +89,11 @@ public class SendCommand implements SimpleCommand {
 
     String sender = (source instanceof Player)
         ? ((Player) source).getUsername()
-        : Settings.IMP.MESSAGES.ELYTRAPROXY.IF_CONSOLE
-            .replace("{NL}", "\n")
-            .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX);
+        : Settings.IMP.MESSAGES.ELYTRAPROXY.IF_CONSOLE;
 
     Component summoned = LegacyComponentSerializer
         .legacyAmpersand()
         .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.SEND_YOU_GOT_SUMMONED
-            .replace("{NL}", "\n")
-            .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
             .replace("{0}", target.getServerInfo().getName())
             .replace("{1}", sender)
         );
@@ -136,8 +129,6 @@ public class SendCommand implements SimpleCommand {
               LegacyComponentSerializer
                   .legacyAmpersand()
                   .deserialize(Settings.IMP.MESSAGES.ELYTRAPROXY.USER_NOT_ONLINE
-                      .replace("{NL}", "\n")
-                      .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX)
                       .replace("{0}", args[0])
                   ));
         }
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/config/Config.java b/proxy/src/main/java/net/elytrium/elytraproxy/config/Config.java
index 5735fe5b..871941bb 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/config/Config.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/config/Config.java
@@ -96,6 +96,10 @@ public class Config {
       if (value instanceof Configuration) {
         set((Configuration) value, newPath);
         continue;
+      } else if (value instanceof String) {
+        set(newPath, ((String) value).replace("{NL}", "\n")
+            .replace("{PRFX}", Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX));
+        continue;
       }
       set(newPath, value);
     }
@@ -193,7 +197,7 @@ public class Config {
           save(lines, current, value, indent + 2);
         } else {
           lines.add(spacing + toNodeName(field.getName() + ": ")
-              + toYamlString(field.get(instance), spacing));
+              + toYamlString(field, field.get(instance), spacing));
         }
       }
     } catch (RuntimeException e) {
@@ -236,7 +240,10 @@ public class Config {
   public @interface Ignore {
   }
 
-  private String toYamlString(Object value, String spacing) {
+  private String toYamlString(Field field, Object value, String spacing) {
+    if (value == null) {
+      return "null";
+    }
     if (value instanceof List) {
       Collection<?> listValue = (Collection<?>) value;
       if (listValue.isEmpty()) {
@@ -245,7 +252,7 @@ public class Config {
       StringBuilder m = new StringBuilder();
       for (Object obj : listValue) {
         m.append(
-            System.lineSeparator()).append(spacing).append("- ").append(toYamlString(obj, spacing));
+            System.lineSeparator()).append(spacing).append("- ").append(toYamlString(field, obj, spacing));
       }
       return m.toString();
     }
@@ -254,9 +261,15 @@ public class Config {
       if (stringValue.isEmpty()) {
         return "''";
       }
-      return "\"" + stringValue + "\"";
+      String quoted = "\"" + stringValue + "\"";
+      //noinspection ConstantConditions | We don't need to replace when IMP is initalizing
+      if (Settings.IMP == null || field.getName().equalsIgnoreCase("prefix")) {
+        return quoted;
+      }
+      return quoted.replace("\n", "{NL}")
+          .replace(Settings.IMP.MESSAGES.ELYTRAPROXY.PREFIX, "{PRFX}");
     }
-    return value != null ? value.toString() : "null";
+    return value.toString();
   }
 
   /**
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/config/Settings.java b/proxy/src/main/java/net/elytrium/elytraproxy/config/Settings.java
index fe3f41ae..445dba5d 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/config/Settings.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/config/Settings.java
@@ -27,7 +27,7 @@ public class Settings extends Config {
   public static final Settings IMP = new Settings();
 
   @Final
-  public String VERSION = "0.1.2-DEV";
+  public String VERSION = "3.0.1";
 
   @Create
   public MESSAGES MESSAGES;
@@ -57,6 +57,7 @@ public class Settings extends Config {
       public String CONSOLE_LOG_COMMAND_EXECUTIONS_FORMAT = "{0} -> executed command {1}";
       public String RELOAD_SUCCESS = "{PRFX} &fElytraProxy configuration successfully reloaded.";
       public String RELOAD_FAILURE = "{PRFX} &cUnable to reload your ElytraProxy configuration. Check the console for more details.";
+      public String DB_FAILURE = "Unable to connect to database.";
 
       @Create
       public MESSAGES.ELYTRAPROXY.KICK KICK;
@@ -71,9 +72,6 @@ public class Settings extends Config {
         public String CLIENT_CHECK_SETTINGS_SKIN_PARTS = "&cPlease enable any option from the skin customization to join the server.{NL}&eOptions > Skin Customization";
         public String CLIENT_CHECK_BRAND = "&cYour client doesn't send brand packets.";
       }
-      /*
-      public String MYSQL_LOAD_FAILED: "Ошибка при инициализации базы данных. Выключение..."
-      */
     }
 
     @Create
@@ -148,9 +146,9 @@ public class Settings extends Config {
         "{ServerBrand} - returns the server on which the player is located",
         "{ProxyBrand} - returns the proxy original brand"
     })
-    public String BRAND = "{ServerBrand} => {ProxyBrand} (by ElytraDev)";
+    public String BRAND = "{ServerBrand} => {ProxyBrand} (by Elytrium)";
     @Comment("Changes server version in ping request")
-    public String PING_VERSION = "ElytraProxy (by ElytraDev)";
+    public String PING_VERSION = "ElytraProxy (by Elytrium)";
 
     @Create
     public MAIN_SETTINGS.HOSTNAMES_MANAGER HOSTNAMES_MANAGER;
@@ -192,7 +190,16 @@ public class Settings extends Config {
     public boolean ENABLE = true;
     public boolean CHECK_CLIENT_SETTINGS = true;
     public boolean CHECK_CLIENT_BRAND = true;
+    public boolean CACHE_SUCCEED_USERS = true;
     public int CAPTCHA_ATTEMPTS = 2;
+    public int NON_VALID_POSITION_XZ_ATTEMPTS = 10;
+    public int NON_VALID_POSITION_Y_ATTEMPTS = 10;
+    public int FALLING_CHECK_TICKS = 128;
+    public double MAX_VALID_POSITION_DIFFERENCE = 0.01;
+    public String BRAND = "ElytraProxy BotFilter";
+
+    @Comment("Available - ONLY_POSITION, ONLY_CAPTCHA, CAPTCHA_POSITION, CAPTCHA_ON_POSITION_FAILED, SUCCESSFULLY")
+    public String CHECK_STATE = "CAPTCHA_POSITION";
     @Comment({
         "If the player's nickname contains something from this list, hes connection will be rejected",
         "In lowercase"
@@ -224,14 +231,22 @@ public class Settings extends Config {
     public ANTIBOT.BOTFILTER_DIMENSION BOTFILTER_DIMENSION;
 
     public static class BOTFILTER_DIMENSION {
+      @Comment({
+          "Normal dimension - 0",
+          "Cave dimension - 1",
+          "Nether - 2",
+          "The end - 3",
+      })
+      public int ID = 3;
       @Comment({
           "Normal dimension - 0",
           "The end - 1",
           "Nether - 2"
       })
-      public int ID = 1;
+      public int LEGACY_ID = 1;
       @Comment({
           "Normal dimension - minecraft:overworld",
+          "Cave dimension - minecraft:overworld_caves",
           "The end - minecraft:the_end",
           "Nether - minecraft:nether"
       })
@@ -243,22 +258,60 @@ public class Settings extends Config {
     public ANTIBOT.STRINGS STRINGS;
 
     public static class STRINGS {
-      public String CHECKING = "подожди бля";
-      public String CHECKING_CAPTCHA = "введи капчу еблан";
-      public String SUCCESSFUL = "норм ебать";
-      public String CAPTCHA_FAILED = "капча бля не верно введена";
-      public String FALLING_CHECK_FAILED = "хуле не падаем ботяра";
+      public String CHECKING = "{PRFX} Bot-Filter check was started, please wait..";
+      public String CHECKING_CAPTCHA = "{PRFX} Please, solve the captcha";
+      public String SUCCESSFUL = "{PRFX} Successfully passed Bot-Filter check. Please, rejoin the server";
+      public String CAPTCHA_FAILED = "{PRFX} You've mistaken in captcha check. Please, rejoin the server.";
+      public String TOO_BIG_PACKET = "{PRFX} Your client sent too big packet.";
+      public String FALLING_CHECK_FAILED = "{PRFX} Falling Check was failed. Please, rejoin the server.";
+    }
+
+    @Create
+    public ANTIBOT.CAPTCHA_COORDS CAPTCHA_COORDS;
+
+    public static class CAPTCHA_COORDS {
+      public int X = 0;
+      public int Y = 0;
+      public int Z = 0;
     }
   }
 
-  /*
   @Create
   public AUTH AUTH;
 
   public static class AUTH {
     public boolean ENABLE = true;
-    public boolean ONLINE_MODE_REQUIRES_LOGIN = false;
+    public boolean ONLINE_MODE_NEED_AUTH = false;
+    public boolean CACHE_AUTH_USERS = true;
     public String TABLE = "auth";
+    public int BCRYPT_COST = 10;
+    public int LOGIN_ATTEMPTS = 3;
+    public int IP_LIMIT_REGISTRATIONS = 3;
+    @Comment("Time in milliseconds, when ip limit works")
+    public long IP_LIMIT_VALID_TIME = 21600000;
+    public String ALLOWED_NICKNAME_CHARS = "abcdefghijklmnopqrstuvwxyz_0123456789";
+
+    @Create
+    public AUTH.STRINGS STRINGS;
+
+    public static class STRINGS {
+      public String LOGIN = "{PRFX} Please, login using &a/l password";
+      public String PASSWORD_WRONG = "{PRFX} Password is wrong";
+      public String REGISTER = "{PRFX} Please, register using &a/reg password password";
+      public String NICKNAME_PREMIUM = "{PRFX} Your nickname is set on premium account. Please, change your nickname";
+      public String NICKNAME_INVALID = "{PRFX} Your nickname includes forbidden characters. Please, change your nickname";
+      public String IP_LIMIT = "{PRFX} Your IP has reached max registered accounts. If this is an error, restart your router, or wait about 6 hours";
+      public String SUCCESSFUL = "{PRFX} Registration completed successfully. Please rejoin";
+    }
+
+    @Create
+    public AUTH.AUTH_COORDS AUTH_COORDS;
+
+    public static class AUTH_COORDS {
+      public int X = 0;
+      public int Y = 0;
+      public int Z = 0;
+    }
   }
 
   @Create
@@ -266,15 +319,14 @@ public class Settings extends Config {
 
   @Comment("Database settings")
   public static class DATABASE {
-    //@Comment("Тип базы данных, mysql или mysql))")
-    //public String STORAGE_TYPE = "mysql";
-    @Comment("Settings for MYSQL")
+    // @Comment("Тип базы данных, mysql или mysql))")
+    // public String STORAGE_TYPE = "mysql";
+    public boolean ENABLED = true;
     public String HOSTNAME = "127.0.0.1:3306";
     public String USER = "user";
     public String PASSWORD = "password";
     public String DATABASE = "elytraproxy";
   }
-  */
 
   public void reload(File file) {
     load(file);
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/config/helpers/YamlConfiguration.java b/proxy/src/main/java/net/elytrium/elytraproxy/config/helpers/YamlConfiguration.java
index 5dad48c8..1bb31546 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/config/helpers/YamlConfiguration.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/config/helpers/YamlConfiguration.java
@@ -56,26 +56,23 @@ import org.yaml.snakeyaml.representer.Representer;
 @NoArgsConstructor(access = AccessLevel.PACKAGE)
 public class YamlConfiguration extends ConfigurationProvider {
 
-  private final ThreadLocal<Yaml> yaml = new ThreadLocal<Yaml>() {
-    @Override
-    protected Yaml initialValue() {
-      Representer representer = new Representer() {
-        {
-          representers.put(Configuration.class, new Represent() {
-            @Override
-            public Node representData(Object data) {
-              return represent(((Configuration) data).self);
-            }
-          });
-        }
-      };
-
-      DumperOptions options = new DumperOptions();
-      options.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);
-
-      return new Yaml(new Constructor(), representer, options);
-    }
-  };
+  private final ThreadLocal<Yaml> yaml = ThreadLocal.withInitial(() -> {
+    Representer representer = new Representer() {
+      {
+        representers.put(Configuration.class, new Represent() {
+          @Override
+          public Node representData(Object data) {
+            return represent(((Configuration) data).self);
+          }
+        });
+      }
+    };
+
+    DumperOptions options = new DumperOptions();
+    options.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);
+
+    return new Yaml(new Constructor(), representer, options);
+  });
 
   @Override
   public void save(Configuration config, File file) throws IOException {
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/database/Database.java b/proxy/src/main/java/net/elytrium/elytraproxy/database/Database.java
index d5934464..a04b2e34 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/database/Database.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/database/Database.java
@@ -24,8 +24,14 @@ public abstract class Database {
 
   public abstract void query(String query);
 
+  public void makeTable(String table, DatabaseItem databaseItem) { // TODO: Auto make tables with @annotations
+    makeTable(table, databaseItem.getTableInfo(), databaseItem.getPrimaryKey());
+  }
+
   public abstract void makeTable(String table, Map<String, String> keys);
 
+  public abstract void makeTable(String table, Map<String, String> keys, String primaryKey);
+
   public abstract void insertMap(String table, Map<String, Object> toInsert, boolean update);
 
   public abstract void updateMap(String table, Map<String, Object> whereUpdate, Map<String, Object> toUpdate);
@@ -36,6 +42,8 @@ public abstract class Database {
 
   public abstract <T> T getItem(String table, Map<String, Object> where, Class<T> type);
 
+  public abstract <T> List<T> getItems(String table, Map<String, Object> where, Class<T> type);
+
   public abstract <T> List<T> getItems(String table, Class<T> type);
 
   public abstract <T> T queryResult(String query, Class<T> type);
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/database/DatabaseItem.java b/proxy/src/main/java/net/elytrium/elytraproxy/database/DatabaseItem.java
new file mode 100644
index 00000000..41e75f2c
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/database/DatabaseItem.java
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2021 Elytrium
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.database;
+
+import java.util.Map;
+import lombok.Getter;
+
+public class DatabaseItem {
+  @Getter private final Map<String, String> tableInfo;
+  @Getter private final String primaryKey;
+
+  public DatabaseItem(Map<String, String> tableInfo, String primaryKey) {
+    this.tableInfo = tableInfo;
+    this.primaryKey = primaryKey;
+  }
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/database/MySqlDatabase.java b/proxy/src/main/java/net/elytrium/elytraproxy/database/MySqlDatabase.java
index b3c43a25..e8844c94 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/database/MySqlDatabase.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/database/MySqlDatabase.java
@@ -65,23 +65,30 @@ public class MySqlDatabase extends Database {
     }
   }
 
+  @Override
+  public void makeTable(String table, Map<String, String> keys, String primaryKey) {
+    query("CREATE TABLE IF NOT EXISTS " + table + " ("
+        + joinStream(keys.entrySet().stream().map(e -> e.getKey() + " " + e.getValue()))
+        + ", PRIMARY KEY (" + primaryKey + "))");
+  }
+
   @Override
   public void makeTable(String table, Map<String, String> keys) {
     query("CREATE TABLE IF NOT EXISTS " + table + " ("
-        + keyFromStream(keys.entrySet().stream().map(e -> e.getKey() + " " + e.getValue())) + ")");
+        + joinStream(keys.entrySet().stream().map(e -> e.getKey() + " " + e.getValue())) + ")");
   }
 
   @Override
   public void insertMap(String table, Map<String, Object> toInsert, boolean update) {
-    String keyString = keyFromStream(toInsert.keySet().stream().map(s -> s));
+    String keyString = joinStream(toInsert.keySet().stream().map(s -> s));
     String valueString = keyFromStream(toInsert.values().stream());
 
-    String request = "INSERT INTO %s (%s) VALUES(%s)";
+    String request = "INSERT INTO " + table + " (" + keyString + ") VALUES(" + valueString + ")";
     if (update) {
       request += " ON DUPLICATE KEY UPDATE";
     }
 
-    query(String.format(request, table, keyString, valueString));
+    query(request);
   }
 
   @Override
@@ -89,13 +96,13 @@ public class MySqlDatabase extends Database {
     String where = entryFromStream(whereUpdate.entrySet().stream(), " AND ");
     String set = entryFromStream(toUpdate.entrySet().stream(), ", ");
 
-    query(String.format("UPDATE %s SET %s WHERE %s", table, set, where));
+    query("UPDATE " + table + " SET " + set + " WHERE " + where);
   }
 
   @Override
   public void deleteMap(String table, Map<String, Object> whereDelete) {
     String entryString = entryFromStream(whereDelete.entrySet().stream(), " AND ");
-    query(String.format("DELETE FROM %s WHERE %s", table, entryString));
+    query("DELETE FROM " + table + " WHERE " + entryString);
   }
 
   @Override
@@ -111,12 +118,18 @@ public class MySqlDatabase extends Database {
   @Override
   public <T> T getItem(String table, Map<String, Object> where, Class<T> type) {
     String entryString = entryFromStream(where.entrySet().stream(), " AND ");
-    return queryResult(String.format("SELECT * FROM %s WHERE %s", table, entryString), type);
+    return queryResult("SELECT * FROM " + table + " WHERE " + entryString, type);
   }
 
   @Override
   public <T> List<T> getItems(String table, Class<T> type) {
-    return queryResultList(String.format("SELECT * FROM %s", table), type);
+    return queryResultList("SELECT * FROM " + table, type);
+  }
+
+  @Override
+  public <T> List<T> getItems(String table, Map<String, Object> where, Class<T> type) {
+    String entryString = entryFromStream(where.entrySet().stream(), " AND ");
+    return queryResultList("SELECT * FROM " + table + " WHERE " + entryString, type);
   }
 
   @Override
@@ -198,15 +211,20 @@ public class MySqlDatabase extends Database {
     return result;
   }
 
-  private String keyFromStream(Stream<Object> stream) {
+  private String joinStream(Stream<Object> stream) {
     return stream
         .map(Object::toString)
         .collect(Collectors.joining(", "));
   }
 
+  private String keyFromStream(Stream<Object> stream) {
+    return joinStream(stream.map(e -> (e instanceof String) ? "\"" + e + "\"" : e));
+  }
+
   private String entryFromStream(Stream<Map.Entry<String, Object>> stream, String delimiter) {
     return stream
-        .map(entry -> entry.getKey() + " = " + entry.getValue())
+        .map(entry -> entry.getKey() + " = "
+            + ((entry.getValue() instanceof String) ? "\"" + entry.getValue() + "\"" : entry.getValue()))
         .collect(Collectors.joining(delimiter));
   }
 }
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/BotFilterProtocol.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/VirtualProtocol.java
similarity index 52%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/BotFilterProtocol.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/VirtualProtocol.java
index ec03880a..567c9ae8 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/BotFilterProtocol.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/VirtualProtocol.java
@@ -17,41 +17,68 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.protocol;
+package net.elytrium.elytraproxy.virtual.protocol;
 
 import static com.velocitypowered.proxy.protocol.StateRegistry.map;
 
 import com.velocitypowered.api.network.ProtocolVersion;
 import com.velocitypowered.proxy.protocol.StateRegistry;
 import com.velocitypowered.proxy.protocol.packet.Chat;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.JoinGame;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.MapDataPacket;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.Player;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.PlayerAbilities;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.PlayerPosition;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.PlayerPositionAndLook;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.SetExp;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.SetSlot;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.TeleportConfirm;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.UpdateViewPosition;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.world.ChunkData;
-import net.elytrium.elytraproxy.botfilter.protocol.packet.world.UpdateLight;
-
-public class BotFilterProtocol {
+import com.velocitypowered.proxy.protocol.packet.ClientSettings;
+import com.velocitypowered.proxy.protocol.packet.Disconnect;
+import com.velocitypowered.proxy.protocol.packet.JoinGame;
+import com.velocitypowered.proxy.protocol.packet.PluginMessage;
+import com.velocitypowered.proxy.protocol.packet.Respawn;
+import net.elytrium.elytraproxy.virtual.protocol.packet.MapDataPacket;
+import net.elytrium.elytraproxy.virtual.protocol.packet.Player;
+import net.elytrium.elytraproxy.virtual.protocol.packet.PlayerAbilities;
+import net.elytrium.elytraproxy.virtual.protocol.packet.PlayerPosition;
+import net.elytrium.elytraproxy.virtual.protocol.packet.PlayerPositionAndLook;
+import net.elytrium.elytraproxy.virtual.protocol.packet.SetExp;
+import net.elytrium.elytraproxy.virtual.protocol.packet.SetSlot;
+import net.elytrium.elytraproxy.virtual.protocol.packet.TeleportConfirm;
+import net.elytrium.elytraproxy.virtual.protocol.packet.world.ChunkData;
 
+public class VirtualProtocol {
   public static void init() {
-    StateRegistry.BotFilter.clientbound.register(
-        JoinGame.class, JoinGame::new,
-        map(0x01, ProtocolVersion.MINECRAFT_1_7_2, false),
-        map(0x23, ProtocolVersion.MINECRAFT_1_9, false),
-        map(0x25, ProtocolVersion.MINECRAFT_1_13, false),
-        map(0x25, ProtocolVersion.MINECRAFT_1_14, false),
-        map(0x26, ProtocolVersion.MINECRAFT_1_15, false),
-        map(0x25, ProtocolVersion.MINECRAFT_1_16, false),
-        map(0x24, ProtocolVersion.MINECRAFT_1_16_2, false),
-        map(0x26, ProtocolVersion.MINECRAFT_1_17, false)
-    );
-    StateRegistry.BotFilter.clientbound.register(
+    StateRegistry.VIRTUAL.serverbound.register(
+        TeleportConfirm.class, TeleportConfirm::new,
+        map(0x00, ProtocolVersion.MINECRAFT_1_9, true));
+    StateRegistry.VIRTUAL.serverbound.register(
+        PlayerPositionAndLook.class, PlayerPositionAndLook::new,
+        map(0x06, ProtocolVersion.MINECRAFT_1_7_2, false), //TODO: Right 1.7 value
+        map(0x06, ProtocolVersion.MINECRAFT_1_8, false),
+        map(0x0D, ProtocolVersion.MINECRAFT_1_9, false),
+        map(0x0F, ProtocolVersion.MINECRAFT_1_12, false),
+        map(0x0E, ProtocolVersion.MINECRAFT_1_12_1, false),
+        map(0x11, ProtocolVersion.MINECRAFT_1_13, false),
+        map(0x12, ProtocolVersion.MINECRAFT_1_14, false),
+        map(0x13, ProtocolVersion.MINECRAFT_1_16, false),
+        map(0x12, ProtocolVersion.MINECRAFT_1_17, false));
+    StateRegistry.VIRTUAL.serverbound.register(
+        PlayerPosition.class, PlayerPosition::new,
+        map(0x0B, ProtocolVersion.MINECRAFT_1_7_2, false), //TODO: Right 1.7 value
+        map(0x04, ProtocolVersion.MINECRAFT_1_7_6, false), //TODO: Right 1.7 value
+        map(0x04, ProtocolVersion.MINECRAFT_1_8, false),
+        map(0x0C, ProtocolVersion.MINECRAFT_1_9, false),
+        map(0x0E, ProtocolVersion.MINECRAFT_1_12, false),
+        map(0x0D, ProtocolVersion.MINECRAFT_1_12_1, false),
+        map(0x10, ProtocolVersion.MINECRAFT_1_13, false),
+        map(0x11, ProtocolVersion.MINECRAFT_1_14, false),
+        map(0x12, ProtocolVersion.MINECRAFT_1_16, false),
+        map(0x11, ProtocolVersion.MINECRAFT_1_17, false));
+    StateRegistry.VIRTUAL.serverbound.register(
+        Player.class, Player::new,
+        map(0x03, ProtocolVersion.MINECRAFT_1_7_2, false),
+        map(0x03, ProtocolVersion.MINECRAFT_1_8, false),
+        map(0x0F, ProtocolVersion.MINECRAFT_1_9, false),
+        map(0x0D, ProtocolVersion.MINECRAFT_1_12, false),
+        map(0x0C, ProtocolVersion.MINECRAFT_1_12_1, false),
+        map(0x0F, ProtocolVersion.MINECRAFT_1_13, false),
+        map(0x14, ProtocolVersion.MINECRAFT_1_14, false),
+        map(0x15, ProtocolVersion.MINECRAFT_1_16, false),
+        map(0x14, ProtocolVersion.MINECRAFT_1_17, false));
+    StateRegistry.VIRTUAL.clientbound.register(
         PlayerPositionAndLook.class, PlayerPositionAndLook::new,
         map(0x08, ProtocolVersion.MINECRAFT_1_7_2, true),
         map(0x2E, ProtocolVersion.MINECRAFT_1_9, true),
@@ -61,9 +88,8 @@ public class BotFilterProtocol {
         map(0x36, ProtocolVersion.MINECRAFT_1_15, true),
         map(0x35, ProtocolVersion.MINECRAFT_1_16, true),
         map(0x34, ProtocolVersion.MINECRAFT_1_16_2, true),
-        map(0x38, ProtocolVersion.MINECRAFT_1_17, true)
-    );
-    StateRegistry.BotFilter.clientbound.register(
+        map(0x38, ProtocolVersion.MINECRAFT_1_17, true));
+    StateRegistry.VIRTUAL.clientbound.register(
         ChunkData.class, ChunkData::new,
         map(0x21, ProtocolVersion.MINECRAFT_1_7_2, true),
         map(0x21, ProtocolVersion.MINECRAFT_1_8, true),
@@ -73,9 +99,8 @@ public class BotFilterProtocol {
         map(0x22, ProtocolVersion.MINECRAFT_1_15, true),
         map(0x21, ProtocolVersion.MINECRAFT_1_16, true),
         map(0x20, ProtocolVersion.MINECRAFT_1_16_2, true),
-        map(0x22, ProtocolVersion.MINECRAFT_1_17, true)
-    );
-    StateRegistry.BotFilter.clientbound.register(
+        map(0x22, ProtocolVersion.MINECRAFT_1_17, true));
+    StateRegistry.VIRTUAL.clientbound.register(
         SetSlot.class, SetSlot::new,
         map(0x2F, ProtocolVersion.MINECRAFT_1_7_2, true),
         map(0x2F, ProtocolVersion.MINECRAFT_1_8, true),
@@ -85,17 +110,8 @@ public class BotFilterProtocol {
         map(0x17, ProtocolVersion.MINECRAFT_1_15, true),
         map(0x16, ProtocolVersion.MINECRAFT_1_16, true),
         map(0x15, ProtocolVersion.MINECRAFT_1_16_2, true),
-        map(0x16, ProtocolVersion.MINECRAFT_1_17, true)
-    );
-    StateRegistry.BotFilter.clientbound.register(
-        UpdateLight.class, UpdateLight::new,
-        map(0x24, ProtocolVersion.MINECRAFT_1_14, true),
-        map(0x25, ProtocolVersion.MINECRAFT_1_15, true),
-        map(0x24, ProtocolVersion.MINECRAFT_1_16, true),
-        map(0x23, ProtocolVersion.MINECRAFT_1_16_2, true),
-        map(0x25, ProtocolVersion.MINECRAFT_1_17, true)
-    );
-    StateRegistry.BotFilter.clientbound.register(
+        map(0x16, ProtocolVersion.MINECRAFT_1_17, true));
+    StateRegistry.VIRTUAL.clientbound.register(
         MapDataPacket.class, MapDataPacket::new,
         map(0x34, ProtocolVersion.MINECRAFT_1_7_2, true), //TODO: True 1.7 value
         map(0x34, ProtocolVersion.MINECRAFT_1_8, true),
@@ -105,85 +121,54 @@ public class BotFilterProtocol {
         map(0x27, ProtocolVersion.MINECRAFT_1_15, true),
         map(0x26, ProtocolVersion.MINECRAFT_1_16, true),
         map(0x25, ProtocolVersion.MINECRAFT_1_16_2, true),
-        map(0x27, ProtocolVersion.MINECRAFT_1_17, true)
-    );
-    StateRegistry.BotFilter.clientbound.register(
-        UpdateViewPosition.class, UpdateViewPosition::new,
-        map(0x49, ProtocolVersion.MINECRAFT_1_17, true)
-    );
-    StateRegistry.BotFilter.clientbound.register(
+        map(0x27, ProtocolVersion.MINECRAFT_1_17, true));
+    StateRegistry.VIRTUAL.clientbound.register(
         PlayerAbilities.class, PlayerAbilities::new,
-        map(0x39, ProtocolVersion.MINECRAFT_1_7_2, false), //TODO: True 1.7 value
-        map(0x39, ProtocolVersion.MINECRAFT_1_8, false),
-        map(0x2B, ProtocolVersion.MINECRAFT_1_9, false),
-        map(0x2C, ProtocolVersion.MINECRAFT_1_12_1, false),
-        map(0x2E, ProtocolVersion.MINECRAFT_1_13, false),
-        map(0x31, ProtocolVersion.MINECRAFT_1_14, false),
-        map(0x32, ProtocolVersion.MINECRAFT_1_15, false),
-        map(0x31, ProtocolVersion.MINECRAFT_1_16, false),
-        map(0x30, ProtocolVersion.MINECRAFT_1_16_2, false),
-        map(0x32, ProtocolVersion.MINECRAFT_1_17, false)
-    );
-    StateRegistry.BotFilter.clientbound.register(
+        map(0x39, ProtocolVersion.MINECRAFT_1_7_2, true), //TODO: True 1.7 value
+        map(0x39, ProtocolVersion.MINECRAFT_1_8, true),
+        map(0x2B, ProtocolVersion.MINECRAFT_1_9, true),
+        map(0x2C, ProtocolVersion.MINECRAFT_1_12_1, true),
+        map(0x2E, ProtocolVersion.MINECRAFT_1_13, true),
+        map(0x31, ProtocolVersion.MINECRAFT_1_14, true),
+        map(0x32, ProtocolVersion.MINECRAFT_1_15, true),
+        map(0x31, ProtocolVersion.MINECRAFT_1_16, true),
+        map(0x30, ProtocolVersion.MINECRAFT_1_16_2, true),
+        map(0x32, ProtocolVersion.MINECRAFT_1_17, true));
+    StateRegistry.VIRTUAL.clientbound.register(
         SetExp.class, SetExp::new,
-        map(0x2B, ProtocolVersion.MINECRAFT_1_7_2, false),
-        map(0x1F, ProtocolVersion.MINECRAFT_1_8, false),
-        map(0x3D, ProtocolVersion.MINECRAFT_1_9, false),
-        map(0x3F, ProtocolVersion.MINECRAFT_1_12, false),
-        map(0x40, ProtocolVersion.MINECRAFT_1_12_1, false),
-        map(0x43, ProtocolVersion.MINECRAFT_1_13, false),
-        map(0x47, ProtocolVersion.MINECRAFT_1_14, false),
-        map(0x48, ProtocolVersion.MINECRAFT_1_15, false),
-        map(0x51, ProtocolVersion.MINECRAFT_1_17, false)
-    );
-    StateRegistry.BotFilter.serverbound.register(
-        TeleportConfirm.class, TeleportConfirm::new,
-        map(0x00, ProtocolVersion.MINECRAFT_1_9, true)
-    );
-    StateRegistry.BotFilter.serverbound.register(
-        PlayerPositionAndLook.class, PlayerPositionAndLook::new,
-        map(0x06, ProtocolVersion.MINECRAFT_1_7_2, false), //TODO: True 1.7 value
-        map(0x06, ProtocolVersion.MINECRAFT_1_8, false),
-        map(0x0D, ProtocolVersion.MINECRAFT_1_9, false),
-        map(0x0F, ProtocolVersion.MINECRAFT_1_12, false),
-        map(0x0E, ProtocolVersion.MINECRAFT_1_12_1, false),
-        map(0x11, ProtocolVersion.MINECRAFT_1_13, false),
-        map(0x12, ProtocolVersion.MINECRAFT_1_14, false),
-        map(0x13, ProtocolVersion.MINECRAFT_1_16, false),
-        map(0x12, ProtocolVersion.MINECRAFT_1_17, false)
-    );
-    StateRegistry.BotFilter.serverbound.register(
-        PlayerPosition.class, PlayerPosition::new,
-        map(0x0B, ProtocolVersion.MINECRAFT_1_7_2, false), //TODO: True 1.7 value
-        map(0x04, ProtocolVersion.MINECRAFT_1_7_6, false), //TODO: True 1.7 value
-        map(0x04, ProtocolVersion.MINECRAFT_1_8, false),
-        map(0x0C, ProtocolVersion.MINECRAFT_1_9, false),
-        map(0x0E, ProtocolVersion.MINECRAFT_1_12, false),
-        map(0x0D, ProtocolVersion.MINECRAFT_1_12_1, false),
-        map(0x10, ProtocolVersion.MINECRAFT_1_13, false),
-        map(0x11, ProtocolVersion.MINECRAFT_1_14, false),
-        map(0x12, ProtocolVersion.MINECRAFT_1_16, false),
-        map(0x11, ProtocolVersion.MINECRAFT_1_17, false)
-    );
-    StateRegistry.BotFilter.serverbound.register(
-        Player.class, Player::new,
-        map(0x03, ProtocolVersion.MINECRAFT_1_7_2, false),
-        map(0x03, ProtocolVersion.MINECRAFT_1_8, false),
-        map(0x0F, ProtocolVersion.MINECRAFT_1_9, false),
-        map(0x0D, ProtocolVersion.MINECRAFT_1_12, false),
-        map(0x0C, ProtocolVersion.MINECRAFT_1_12_1, false),
-        map(0x0F, ProtocolVersion.MINECRAFT_1_13, false),
-        map(0x14, ProtocolVersion.MINECRAFT_1_14, false),
-        map(0x15, ProtocolVersion.MINECRAFT_1_16, false),
-        map(0x14, ProtocolVersion.MINECRAFT_1_17, false)
-    );
-    StateRegistry.BotFilter.serverbound.register(
+        map(0x2B, ProtocolVersion.MINECRAFT_1_7_2, true),
+        map(0x1F, ProtocolVersion.MINECRAFT_1_8, true),
+        map(0x3D, ProtocolVersion.MINECRAFT_1_9, true),
+        map(0x3F, ProtocolVersion.MINECRAFT_1_12, true),
+        map(0x40, ProtocolVersion.MINECRAFT_1_12_1, true),
+        map(0x43, ProtocolVersion.MINECRAFT_1_13, true),
+        map(0x47, ProtocolVersion.MINECRAFT_1_14, true),
+        map(0x48, ProtocolVersion.MINECRAFT_1_15, true),
+        map(0x51, ProtocolVersion.MINECRAFT_1_17, true));
+
+    StateRegistry.VIRTUAL.serverbound.register(
+        Chat.class, Chat::new,
+        StateRegistry.PLAY.serverbound.getMappingsForPacket(Chat.class, false));
+    StateRegistry.VIRTUAL.serverbound.register(
+        ClientSettings.class, ClientSettings::new,
+        StateRegistry.PLAY.serverbound.getMappingsForPacket(ClientSettings.class, false));
+    StateRegistry.VIRTUAL.serverbound.register(
+        PluginMessage.class, PluginMessage::new,
+        StateRegistry.PLAY.serverbound.getMappingsForPacket(PluginMessage.class, false));
+    StateRegistry.VIRTUAL.clientbound.register(
         Chat.class, Chat::new,
-        map(0x01, ProtocolVersion.MINECRAFT_1_7_2, false),
-        map(0x02, ProtocolVersion.MINECRAFT_1_9, false),
-        map(0x03, ProtocolVersion.MINECRAFT_1_12, false),
-        map(0x02, ProtocolVersion.MINECRAFT_1_12_1, false),
-        map(0x03, ProtocolVersion.MINECRAFT_1_14, false)
-    );
+        StateRegistry.PLAY.clientbound.getMappingsForPacket(Chat.class, true));
+    StateRegistry.VIRTUAL.clientbound.register(
+        JoinGame.class, JoinGame::new,
+        StateRegistry.PLAY.clientbound.getMappingsForPacket(JoinGame.class, true));
+    StateRegistry.VIRTUAL.clientbound.register(
+        Disconnect.class, Disconnect::new,
+        StateRegistry.PLAY.clientbound.getMappingsForPacket(Disconnect.class, true));
+    StateRegistry.VIRTUAL.clientbound.register(
+        PluginMessage.class, PluginMessage::new,
+        StateRegistry.PLAY.clientbound.getMappingsForPacket(PluginMessage.class, true));
+    StateRegistry.VIRTUAL.clientbound.register(
+        Respawn.class, Respawn::new,
+        StateRegistry.PLAY.clientbound.getMappingsForPacket(Respawn.class, true));
   }
 }
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/data/registry/Biome.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/registry/Biome.java
similarity index 90%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/data/registry/Biome.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/registry/Biome.java
index f772e228..be9a81b8 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/data/registry/Biome.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/registry/Biome.java
@@ -17,15 +17,19 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.protocol.data.registry;
+package net.elytrium.elytraproxy.virtual.protocol.data.registry;
 
+import com.google.common.collect.ImmutableList;
+import java.util.List;
+import java.util.stream.Collectors;
 import javax.annotation.Nullable;
 import lombok.Data;
 import lombok.NonNull;
 import lombok.RequiredArgsConstructor;
-import net.elytrium.elytraproxy.botfilter.protocol.data.registry.Biome.Effects.MoodSound;
+import net.elytrium.elytraproxy.virtual.protocol.data.registry.Biome.Effects.MoodSound;
 import net.kyori.adventure.nbt.CompoundBinaryTag;
 import net.kyori.adventure.nbt.CompoundBinaryTag.Builder;
+import net.kyori.adventure.nbt.ListBinaryTag;
 
 public class Biome {
 
@@ -52,6 +56,8 @@ public class Biome {
               .build())
   );
 
+  public static final List<Biome> REGISTERED_BIOMES = ImmutableList.of(PLAINS);
+
   public final String name;
   public final int id;
   public final Element element;
@@ -69,6 +75,14 @@ public class Biome {
         .put("element", element.encode()).build();
   }
 
+  public static CompoundBinaryTag getRegistry() {
+    return CompoundBinaryTag.builder()
+        .putString("type", "minecraft:worldgen/biome")
+        .put("value", ListBinaryTag
+            .from(REGISTERED_BIOMES.stream().map(Biome::encodeBiome)
+                .collect(Collectors.toList()))).build();
+  }
+
   public static class Element {
 
     public final String precipitation;
@@ -80,7 +94,7 @@ public class Biome {
     public final Effects effects;
 
     public Element(String precipitation, float depth, float temperature,
-        float scale, float downfall, String category, Effects effects) {
+                   float scale, float downfall, String category, Effects effects) {
       this.precipitation = precipitation;
       this.depth = depth;
       this.temperature = temperature;
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/data/storage/BlockStorage.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/storage/BlockStorage.java
similarity index 88%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/data/storage/BlockStorage.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/storage/BlockStorage.java
index a79a9abc..7b796797 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/data/storage/BlockStorage.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/storage/BlockStorage.java
@@ -17,13 +17,13 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.protocol.data.storage;
+package net.elytrium.elytraproxy.virtual.protocol.data.storage;
 
 import com.velocitypowered.api.network.ProtocolVersion;
 import io.netty.buffer.ByteBuf;
 import lombok.NonNull;
-import net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock;
-import net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.Version;
+import net.elytrium.elytraproxy.virtual.server.world.SimpleBlock;
+import net.elytrium.elytraproxy.virtual.server.world.SimpleBlock.Version;
 import org.jetbrains.annotations.NotNull;
 
 public interface BlockStorage {
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/data/storage/BlockStorage17.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/storage/BlockStorage17.java
similarity index 90%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/data/storage/BlockStorage17.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/storage/BlockStorage17.java
index 07ca4f7b..2d4801fa 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/data/storage/BlockStorage17.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/storage/BlockStorage17.java
@@ -17,7 +17,7 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.protocol.data.storage;
+package net.elytrium.elytraproxy.virtual.protocol.data.storage;
 
 import com.velocitypowered.api.network.ProtocolVersion;
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
@@ -26,10 +26,10 @@ import java.util.Arrays;
 import lombok.AccessLevel;
 import lombok.NonNull;
 import lombok.RequiredArgsConstructor;
-import net.elytrium.elytraproxy.botfilter.protocol.util.mcprotocollib.NibbleArray3d;
-import net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock;
-import net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.Version;
-import net.elytrium.elytraproxy.botfilter.server.world.chunk.SimpleChunk;
+import net.elytrium.elytraproxy.virtual.protocol.util.mcprotocollib.NibbleArray3d;
+import net.elytrium.elytraproxy.virtual.server.world.SimpleBlock;
+import net.elytrium.elytraproxy.virtual.server.world.SimpleBlock.Version;
+import net.elytrium.elytraproxy.virtual.server.world.chunk.SimpleChunk;
 import org.jetbrains.annotations.NotNull;
 
 @RequiredArgsConstructor(access = AccessLevel.PRIVATE)
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/data/storage/BlockStorage19.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/storage/BlockStorage19.java
similarity index 91%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/data/storage/BlockStorage19.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/storage/BlockStorage19.java
index a1184a5d..f898ed14 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/data/storage/BlockStorage19.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/data/storage/BlockStorage19.java
@@ -17,7 +17,7 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.protocol.data.storage;
+package net.elytrium.elytraproxy.virtual.protocol.data.storage;
 
 import com.velocitypowered.api.network.ProtocolVersion;
 import com.velocitypowered.proxy.protocol.ProtocolUtils;
@@ -30,12 +30,12 @@ import java.util.Map;
 import lombok.AccessLevel;
 import lombok.AllArgsConstructor;
 import lombok.NonNull;
-import net.elytrium.elytraproxy.botfilter.protocol.util.CompactStorage;
-import net.elytrium.elytraproxy.botfilter.protocol.util.mcprotocollib.BitStorage116;
-import net.elytrium.elytraproxy.botfilter.protocol.util.mcprotocollib.BitStorage19;
-import net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock;
-import net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.Version;
-import net.elytrium.elytraproxy.botfilter.server.world.chunk.SimpleChunk;
+import net.elytrium.elytraproxy.virtual.protocol.util.CompactStorage;
+import net.elytrium.elytraproxy.virtual.protocol.util.mcprotocollib.BitStorage116;
+import net.elytrium.elytraproxy.virtual.protocol.util.mcprotocollib.BitStorage19;
+import net.elytrium.elytraproxy.virtual.server.world.SimpleBlock;
+import net.elytrium.elytraproxy.virtual.server.world.SimpleBlock.Version;
+import net.elytrium.elytraproxy.virtual.server.world.chunk.SimpleChunk;
 import org.jetbrains.annotations.NotNull;
 
 @AllArgsConstructor(access = AccessLevel.PRIVATE)
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/MapDataPacket.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/MapDataPacket.java
similarity index 95%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/MapDataPacket.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/MapDataPacket.java
index a8a5fc28..8d00e584 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/MapDataPacket.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/MapDataPacket.java
@@ -17,7 +17,7 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.protocol.packet;
+package net.elytrium.elytraproxy.virtual.protocol.packet;
 
 import com.velocitypowered.api.network.ProtocolVersion;
 import com.velocitypowered.proxy.protocol.MinecraftPacket;
@@ -41,7 +41,6 @@ public class MapDataPacket implements MinecraftPacket {
 
   @Override
   public void encode(ByteBuf buf, ProtocolUtils.Direction direction, ProtocolVersion version) {
-    System.out.println("Processing map data packet");
     ProtocolUtils.writeVarInt(buf, this.mapId);
     buf.writeByte(this.scale);
     if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_9)
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/Player.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/Player.java
similarity index 90%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/Player.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/Player.java
index 5ddf53c0..b0d2521e 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/Player.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/Player.java
@@ -17,7 +17,7 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.protocol.packet;
+package net.elytrium.elytraproxy.virtual.protocol.packet;
 
 import com.velocitypowered.api.network.ProtocolVersion;
 import com.velocitypowered.proxy.connection.MinecraftSessionHandler;
@@ -28,6 +28,7 @@ import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
+import net.elytrium.elytraproxy.virtual.server.VirtualSessionHandler;
 
 @Data
 @NoArgsConstructor
@@ -44,7 +45,7 @@ public class Player implements MinecraftPacket {
 
   @Override
   public boolean handle(MinecraftSessionHandler handler) {
-    handler.handle(this);
+    ((VirtualSessionHandler) handler).handle(this);
     return false;
   }
 }
\ No newline at end of file
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/PlayerAbilities.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/PlayerAbilities.java
similarity index 96%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/PlayerAbilities.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/PlayerAbilities.java
index 7d62902b..5101c6dd 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/PlayerAbilities.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/PlayerAbilities.java
@@ -17,7 +17,7 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.protocol.packet;
+package net.elytrium.elytraproxy.virtual.protocol.packet;
 
 import com.velocitypowered.api.network.ProtocolVersion;
 import com.velocitypowered.proxy.connection.MinecraftSessionHandler;
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/PlayerPosition.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/PlayerPosition.java
similarity index 90%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/PlayerPosition.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/PlayerPosition.java
index 319546d7..2d65f5fe 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/PlayerPosition.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/PlayerPosition.java
@@ -17,7 +17,7 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.protocol.packet;
+package net.elytrium.elytraproxy.virtual.protocol.packet;
 
 import com.velocitypowered.api.network.ProtocolVersion;
 import com.velocitypowered.proxy.connection.MinecraftSessionHandler;
@@ -28,6 +28,7 @@ import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
+import net.elytrium.elytraproxy.virtual.server.VirtualSessionHandler;
 
 @Data
 @NoArgsConstructor
@@ -50,6 +51,6 @@ public class PlayerPosition implements MinecraftPacket {
 
   @Override
   public boolean handle(MinecraftSessionHandler handler) {
-    return handler.handle(this);
+    return ((VirtualSessionHandler) handler).handle(this);
   }
 }
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/PlayerPositionAndLook.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/PlayerPositionAndLook.java
similarity index 93%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/PlayerPositionAndLook.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/PlayerPositionAndLook.java
index 23f3a7cb..6c75fd27 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/PlayerPositionAndLook.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/PlayerPositionAndLook.java
@@ -17,7 +17,7 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.protocol.packet;
+package net.elytrium.elytraproxy.virtual.protocol.packet;
 
 import com.velocitypowered.api.network.ProtocolVersion;
 import com.velocitypowered.proxy.connection.MinecraftSessionHandler;
@@ -30,6 +30,7 @@ import lombok.Getter;
 import lombok.NoArgsConstructor;
 import lombok.Setter;
 import lombok.ToString;
+import net.elytrium.elytraproxy.virtual.server.VirtualSessionHandler;
 
 @Getter
 @Setter
@@ -83,6 +84,6 @@ public class PlayerPositionAndLook implements MinecraftPacket {
 
   @Override
   public boolean handle(MinecraftSessionHandler handler) {
-    return handler.handle(this);
+    return ((VirtualSessionHandler) handler).handle(this);
   }
 }
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/SetExp.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/SetExp.java
similarity index 94%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/SetExp.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/SetExp.java
index cc004a2d..db09ae96 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/SetExp.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/SetExp.java
@@ -17,7 +17,7 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.protocol.packet;
+package net.elytrium.elytraproxy.virtual.protocol.packet;
 
 import com.velocitypowered.api.network.ProtocolVersion;
 import com.velocitypowered.proxy.connection.MinecraftSessionHandler;
@@ -41,7 +41,6 @@ public class SetExp implements MinecraftPacket {
 
   @Override
   public void encode(ByteBuf buf, ProtocolUtils.Direction direction, ProtocolVersion protocolVersion) {
-    System.out.println("Processing set exp packet");
     if (protocolVersion.isAfterOrEq(ProtocolVersion.MINECRAFT_1_8)) {
       buf.writeFloat(this.expBar);
       ProtocolUtils.writeVarInt(buf, this.level);
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/SetSlot.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/SetSlot.java
similarity index 94%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/SetSlot.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/SetSlot.java
index a690bc17..37e7796a 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/SetSlot.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/SetSlot.java
@@ -17,7 +17,7 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.protocol.packet;
+package net.elytrium.elytraproxy.virtual.protocol.packet;
 
 import com.velocitypowered.api.network.ProtocolVersion;
 import com.velocitypowered.proxy.protocol.MinecraftPacket;
@@ -45,6 +45,9 @@ public class SetSlot implements MinecraftPacket {
   @Override
   public void encode(ByteBuf buf, ProtocolUtils.Direction direction, ProtocolVersion version) {
     buf.writeByte(this.windowId);
+    if (version.isAfterOrEq(ProtocolVersion.MINECRAFT_1_17_1)) {
+      ProtocolUtils.writeVarInt(buf, 0);
+    }
     buf.writeShort(this.slot);
     int id = this.item == 358 ? getCaptchaId(version) : this.item;
     boolean present = id > 0;
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/TeleportConfirm.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/TeleportConfirm.java
similarity index 89%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/TeleportConfirm.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/TeleportConfirm.java
index 79b8ea83..e3af0ac8 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/TeleportConfirm.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/TeleportConfirm.java
@@ -17,7 +17,7 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.protocol.packet;
+package net.elytrium.elytraproxy.virtual.protocol.packet;
 
 import com.velocitypowered.api.network.ProtocolVersion;
 import com.velocitypowered.proxy.connection.MinecraftSessionHandler;
@@ -28,6 +28,7 @@ import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
+import net.elytrium.elytraproxy.virtual.server.VirtualSessionHandler;
 
 @Data
 @NoArgsConstructor
@@ -44,6 +45,6 @@ public class TeleportConfirm implements MinecraftPacket {
 
   @Override
   public boolean handle(MinecraftSessionHandler handler) {
-    return handler.handle(this);
+    return ((VirtualSessionHandler) handler).handle(this);
   }
 }
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/world/ChunkData.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/world/ChunkData.java
similarity index 92%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/world/ChunkData.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/world/ChunkData.java
index 806f8d7c..2381cb65 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/packet/world/ChunkData.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/packet/world/ChunkData.java
@@ -17,7 +17,7 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.protocol.packet.world;
+package net.elytrium.elytraproxy.virtual.protocol.packet.world;
 
 import com.google.common.base.Preconditions;
 import com.velocitypowered.api.network.ProtocolVersion;
@@ -36,15 +36,15 @@ import java.util.Map;
 import java.util.Map.Entry;
 import java.util.zip.Deflater;
 import lombok.Getter;
-import net.elytrium.elytraproxy.botfilter.protocol.data.registry.Biome;
-import net.elytrium.elytraproxy.botfilter.protocol.util.CompactStorage;
-import net.elytrium.elytraproxy.botfilter.protocol.util.NetworkSection;
-import net.elytrium.elytraproxy.botfilter.protocol.util.mcprotocollib.BitStorage116;
-import net.elytrium.elytraproxy.botfilter.protocol.util.mcprotocollib.BitStorage19;
-import net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock;
-import net.elytrium.elytraproxy.botfilter.server.world.chunk.ChunkSnapshot;
-import net.elytrium.elytraproxy.botfilter.server.world.chunk.LightSection;
-import net.elytrium.elytraproxy.botfilter.server.world.chunk.SimpleChunk;
+import net.elytrium.elytraproxy.virtual.protocol.data.registry.Biome;
+import net.elytrium.elytraproxy.virtual.protocol.util.CompactStorage;
+import net.elytrium.elytraproxy.virtual.protocol.util.NetworkSection;
+import net.elytrium.elytraproxy.virtual.protocol.util.mcprotocollib.BitStorage116;
+import net.elytrium.elytraproxy.virtual.protocol.util.mcprotocollib.BitStorage19;
+import net.elytrium.elytraproxy.virtual.server.world.SimpleBlock;
+import net.elytrium.elytraproxy.virtual.server.world.chunk.ChunkSnapshot;
+import net.elytrium.elytraproxy.virtual.server.world.chunk.LightSection;
+import net.elytrium.elytraproxy.virtual.server.world.chunk.SimpleChunk;
 import net.kyori.adventure.nbt.CompoundBinaryTag;
 
 public class ChunkData implements MinecraftPacket {
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/util/CompactStorage.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/CompactStorage.java
similarity index 95%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/util/CompactStorage.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/CompactStorage.java
index 0be862f1..aca3b339 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/util/CompactStorage.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/CompactStorage.java
@@ -17,7 +17,7 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.protocol.util;
+package net.elytrium.elytraproxy.virtual.protocol.util;
 
 import com.velocitypowered.api.network.ProtocolVersion;
 import io.netty.buffer.ByteBuf;
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/util/NetworkSection.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/NetworkSection.java
similarity index 91%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/util/NetworkSection.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/NetworkSection.java
index 96a33b4c..7c7ad844 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/util/NetworkSection.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/NetworkSection.java
@@ -17,18 +17,18 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.protocol.util;
+package net.elytrium.elytraproxy.virtual.protocol.util;
 
 import com.velocitypowered.api.network.ProtocolVersion;
 import io.netty.buffer.ByteBuf;
 import java.util.EnumMap;
 import java.util.Map;
 import lombok.NonNull;
-import net.elytrium.elytraproxy.botfilter.protocol.data.storage.BlockStorage;
-import net.elytrium.elytraproxy.botfilter.protocol.util.mcprotocollib.NibbleArray3d;
-import net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock;
-import net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.Version;
-import net.elytrium.elytraproxy.botfilter.server.world.chunk.SimpleSection;
+import net.elytrium.elytraproxy.virtual.protocol.data.storage.BlockStorage;
+import net.elytrium.elytraproxy.virtual.protocol.util.mcprotocollib.NibbleArray3d;
+import net.elytrium.elytraproxy.virtual.server.world.SimpleBlock;
+import net.elytrium.elytraproxy.virtual.server.world.SimpleBlock.Version;
+import net.elytrium.elytraproxy.virtual.server.world.chunk.SimpleSection;
 
 public class NetworkSection {
 
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/util/mcprotocollib/BitStorage116.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/mcprotocollib/BitStorage116.java
similarity index 97%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/util/mcprotocollib/BitStorage116.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/mcprotocollib/BitStorage116.java
index 24f1099f..2e965f4e 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/util/mcprotocollib/BitStorage116.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/mcprotocollib/BitStorage116.java
@@ -22,7 +22,7 @@
  * OR OTHER DEALINGS IN THE SOFTWARE.
  */
 
-package net.elytrium.elytraproxy.botfilter.protocol.util.mcprotocollib;
+package net.elytrium.elytraproxy.virtual.protocol.util.mcprotocollib;
 
 import com.velocitypowered.api.network.ProtocolVersion;
 import com.velocitypowered.proxy.protocol.ProtocolUtils;
@@ -30,7 +30,7 @@ import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import io.netty.buffer.ByteBuf;
 import java.util.Arrays;
 import lombok.Getter;
-import net.elytrium.elytraproxy.botfilter.protocol.util.CompactStorage;
+import net.elytrium.elytraproxy.virtual.protocol.util.CompactStorage;
 
 public class BitStorage116 implements CompactStorage {
 
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/util/mcprotocollib/BitStorage19.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/mcprotocollib/BitStorage19.java
similarity index 96%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/util/mcprotocollib/BitStorage19.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/mcprotocollib/BitStorage19.java
index 9ad241f9..dcf42f5b 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/util/mcprotocollib/BitStorage19.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/mcprotocollib/BitStorage19.java
@@ -22,14 +22,14 @@
  * OR OTHER DEALINGS IN THE SOFTWARE.
  */
 
-package net.elytrium.elytraproxy.botfilter.protocol.util.mcprotocollib;
+package net.elytrium.elytraproxy.virtual.protocol.util.mcprotocollib;
 
 import com.velocitypowered.api.network.ProtocolVersion;
 import com.velocitypowered.proxy.protocol.ProtocolUtils;
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import io.netty.buffer.ByteBuf;
 import java.util.Arrays;
-import net.elytrium.elytraproxy.botfilter.protocol.util.CompactStorage;
+import net.elytrium.elytraproxy.virtual.protocol.util.CompactStorage;
 
 @SuppressFBWarnings({"EI_EXPOSE_REP2", "EI_EXPOSE_REP"})
 public class BitStorage19 implements CompactStorage {
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/util/mcprotocollib/NibbleArray3d.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/mcprotocollib/NibbleArray3d.java
similarity index 97%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/util/mcprotocollib/NibbleArray3d.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/mcprotocollib/NibbleArray3d.java
index 596c987c..896a5bdb 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/protocol/util/mcprotocollib/NibbleArray3d.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/protocol/util/mcprotocollib/NibbleArray3d.java
@@ -22,7 +22,7 @@
  * OR OTHER DEALINGS IN THE SOFTWARE.
  */
 
-package net.elytrium.elytraproxy.botfilter.protocol.util.mcprotocollib;
+package net.elytrium.elytraproxy.virtual.protocol.util.mcprotocollib;
 
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.util.Arrays;
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/ServerPackets.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/ServerPackets.java
new file mode 100644
index 00000000..7883deec
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/ServerPackets.java
@@ -0,0 +1,255 @@
+/*
+ * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
+ *
+ * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.virtual.server;
+
+import com.google.common.collect.ImmutableSet;
+import com.velocitypowered.api.network.ProtocolVersion;
+import com.velocitypowered.proxy.connection.registry.DimensionData;
+import com.velocitypowered.proxy.connection.registry.DimensionInfo;
+import com.velocitypowered.proxy.connection.registry.DimensionRegistry;
+import com.velocitypowered.proxy.protocol.ProtocolUtils;
+import com.velocitypowered.proxy.protocol.packet.Chat;
+import com.velocitypowered.proxy.protocol.packet.Disconnect;
+import com.velocitypowered.proxy.protocol.packet.JoinGame;
+import com.velocitypowered.proxy.protocol.packet.PluginMessage;
+import io.netty.buffer.ByteBuf;
+import io.netty.buffer.ByteBufAllocator;
+import java.util.ArrayList;
+import java.util.List;
+import lombok.Getter;
+import net.elytrium.elytraproxy.botfilter.handler.BotFilterSessionHandler;
+import net.elytrium.elytraproxy.config.Settings;
+import net.elytrium.elytraproxy.virtual.protocol.data.registry.Biome;
+import net.elytrium.elytraproxy.virtual.protocol.packet.PlayerAbilities;
+import net.elytrium.elytraproxy.virtual.protocol.packet.PlayerPositionAndLook;
+import net.elytrium.elytraproxy.virtual.protocol.packet.SetExp;
+import net.elytrium.elytraproxy.virtual.protocol.packet.SetSlot;
+import net.elytrium.elytraproxy.virtual.protocol.packet.world.ChunkData;
+import net.elytrium.elytraproxy.virtual.server.world.VirtualWorld;
+import net.elytrium.elytraproxy.virtual.server.world.chunk.SimpleChunk;
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
+
+@Getter
+public class ServerPackets {
+
+  private final VirtualServer virtualServer;
+  private final String key = Settings.IMP.ANTIBOT.BOTFILTER_DIMENSION.MODERN_KEY;
+  private final String hardcodedBrandString = Settings.IMP.ANTIBOT.BRAND + " (ely.su/github)";
+  private final int dimensionId = Settings.IMP.ANTIBOT.BOTFILTER_DIMENSION.ID;
+  private final int legacyDimensionId = Settings.IMP.ANTIBOT.BOTFILTER_DIMENSION.LEGACY_ID;
+  private DimensionData dimension;
+  private DimensionData legacyDimension;
+  private VirtualWorld virtualWorld;
+  private List<ChunkData> worldPacket;
+  private JoinGame joinPacket;
+  private JoinGame legacyJoinPacket;
+  private Disconnect alreadyConnected;
+  private Disconnect tooBigPacket;
+  private Disconnect captchaFailed;
+  private Disconnect fallingCheckFailed;
+  private SetSlot setSlot;
+  private SetSlot resetSlot;
+  private Chat checkingChat;
+  private Chat checkingCaptchaChat;
+  private Chat loginChat;
+  private Chat registerChat;
+  private Chat wrongPasswordChat;
+  private Disconnect nicknamePremium;
+  private Disconnect nicknameInvalid;
+  private Disconnect ipLimit;
+  private Disconnect wrongPassword;
+  private Disconnect successfulBotFilter;
+  private Disconnect successfulAuth;
+  private PlayerPositionAndLook captchaPosAndLook;
+  private PlayerPositionAndLook authPosAndLook;
+  private PlayerAbilities noAbilities;
+  private List<SetExp> experience;
+  private ByteBuf brandBuf;
+
+  public ServerPackets(VirtualServer virtualServer) {
+    this.virtualServer = virtualServer;
+  }
+
+  public void createPackets() {
+    Settings.ANTIBOT.CAPTCHA_COORDS captchaCoords = Settings.IMP.ANTIBOT.CAPTCHA_COORDS;
+    Settings.AUTH.AUTH_COORDS authCoords = Settings.IMP.AUTH.AUTH_COORDS;
+    // TODO: Проверять валид ли ид
+    dimension = new DimensionData(key, dimensionId, true,
+            0.0f, false, false, false, true,
+            true, true, false, false, 256,
+            "minecraft:infiniburn_nether",
+            0L, false, 1.0, key, 0, 256);
+    legacyDimension = new DimensionData(key, legacyDimensionId, true,
+            0.0f, false, false, false, true,
+            true, true, false, false, 256,
+            "minecraft:infiniburn_nether",
+            0L, false, 1.0, key, 0, 256);
+    this.virtualWorld = new VirtualWorld(dimension,
+        new DimensionInfo(key, key, true, false), captchaCoords.X, captchaCoords.Y);
+    virtualWorld.setSkyLight(0, 60, 0,
+        (byte) 1); //1.7 workaround //TODO: Maybe broken with new light system realiztion
+
+    /*
+    for (int x = 0; x < 16; x++) {
+      for (int z = 0; z < 16; z++) {
+        virtualWorld.setBlock(x, 40, z, SimpleBlock.GRANITE);
+        virtualWorld.setBlock(x, 60, z, SimpleBlock.GRANITE);
+      }
+    }
+    for (int x = 1; x < 15; x++) {
+      for (int z = 1; z < 15; z++) {
+        if (x % 3 == 0 && z % 3 == 0) {
+          virtualWorld.setBlock(x, 40, z, SimpleBlock.BARRIER);
+          virtualWorld.setBlockLight(x, 41, z, (byte) 15);
+        }
+      }
+    }
+    for (int x = 0; x < 16; x++) {
+      for (int y = 40; y <= 60; y++) {
+        virtualWorld.setBlock(x, y, 0, SimpleBlock.GRANITE);
+        virtualWorld.setBlock(0, y, x, SimpleBlock.GRANITE);
+        virtualWorld.setBlock(x, y, 15, SimpleBlock.GRANITE);
+        virtualWorld.setBlock(15, y, x, SimpleBlock.GRANITE);
+      }
+    }
+    */
+
+    experience = createExpPackets();
+    captchaPosAndLook = createPlayerPosAndLookPacket(captchaCoords.X, captchaCoords.Y, captchaCoords.Z);
+    authPosAndLook = createPlayerPosAndLookPacket(authCoords.X, authCoords.Y, authCoords.Z);
+
+    joinPacket = createJoinGamePacket();
+    legacyJoinPacket = createLegacyJoinGamePacket();
+    worldPacket = createChunksPackets();
+
+    noAbilities = createAbilitiesPacket();
+    alreadyConnected = createDisconnectPacket(Settings.IMP.MESSAGES.VELOCITY.ERROR.ALREADY_CONNECTED_PROXY);
+    tooBigPacket = createDisconnectPacket(Settings.IMP.ANTIBOT.STRINGS.TOO_BIG_PACKET);
+    captchaFailed = createDisconnectPacket(Settings.IMP.ANTIBOT.STRINGS.CAPTCHA_FAILED);
+    fallingCheckFailed = createDisconnectPacket(Settings.IMP.ANTIBOT.STRINGS.FALLING_CHECK_FAILED);
+    setSlot = createSetSlotPacket(0, 36, 358, 1, 0);
+    resetSlot = createSetSlotPacket(0, 36, -1, 0, 0);
+
+    checkingChat = createChatPacket(Settings.IMP.ANTIBOT.STRINGS.CHECKING);
+    checkingCaptchaChat = createChatPacket(Settings.IMP.ANTIBOT.STRINGS.CHECKING_CAPTCHA);
+    loginChat = createChatPacket(Settings.IMP.AUTH.STRINGS.LOGIN);
+    registerChat = createChatPacket(Settings.IMP.AUTH.STRINGS.REGISTER);
+    wrongPasswordChat = createChatPacket(Settings.IMP.AUTH.STRINGS.PASSWORD_WRONG);
+    wrongPassword = createDisconnectPacket(Settings.IMP.AUTH.STRINGS.PASSWORD_WRONG);
+    nicknamePremium = createDisconnectPacket(Settings.IMP.AUTH.STRINGS.NICKNAME_PREMIUM);
+    nicknameInvalid = createDisconnectPacket(Settings.IMP.AUTH.STRINGS.NICKNAME_INVALID);
+    successfulBotFilter = createDisconnectPacket(Settings.IMP.ANTIBOT.STRINGS.SUCCESSFUL);
+    successfulAuth = createDisconnectPacket(Settings.IMP.AUTH.STRINGS.SUCCESSFUL);
+    ipLimit = createDisconnectPacket(Settings.IMP.AUTH.STRINGS.IP_LIMIT);
+    brandBuf = createBrandBuf(hardcodedBrandString);
+  }
+
+  private PlayerAbilities createAbilitiesPacket() {
+    return new PlayerAbilities((byte) 6, 0f, 0f);
+  }
+
+  private JoinGame createJoinGamePacket() {
+    DimensionRegistry dimensionRegistry = new DimensionRegistry(ImmutableSet.of(dimension), ImmutableSet.of(key));
+
+    JoinGame joinGame = new JoinGame();
+    joinGame.setEntityId(0);
+    joinGame.setGamemode((short) 2);
+    joinGame.setPreviousGamemode((short) 2);
+    joinGame.setDimension(dimensionId);
+    joinGame.setDifficulty((short) 0);
+    joinGame.setMaxPlayers(1);
+    joinGame.setPartialHashedSeed(System.currentTimeMillis());
+    joinGame.setLevelType("flat");
+    joinGame.setViewDistance(4);
+    joinGame.setReducedDebugInfo(true);
+    joinGame.setIsHardcore(Settings.IMP.ANTIBOT.BOTFILTER_DIMENSION.HARDCORE_HEARTS);
+    joinGame.setDimensionRegistry(dimensionRegistry);
+    joinGame.setDimensionInfo(new DimensionInfo(key, key, false, false));
+    joinGame.setCurrentDimensionData(dimension);
+    joinGame.setBiomeRegistry(Biome.getRegistry());
+    return joinGame;
+  }
+
+  private JoinGame createLegacyJoinGamePacket() {
+    JoinGame joinGame = createJoinGamePacket();
+    joinGame.setDimension(legacyDimensionId);
+    return joinGame;
+  }
+
+  public PlayerPositionAndLook createPlayerPosAndLookPacket(double x, double y, double z) {
+    return new PlayerPositionAndLook(x, y, z, 0f, 0f, -133, false, true);
+  }
+
+  private List<ChunkData> createChunksPackets() {
+    List<ChunkData> packets = new ArrayList<>();
+    for (SimpleChunk chunk : virtualWorld.getChunks()) {
+      packets.add(createChunkDataPacket(chunk));
+    }
+    return packets;
+  }
+
+  private List<SetExp> createExpPackets() {
+    List<SetExp> packets = new ArrayList<>();
+    long ticks = BotFilterSessionHandler.TOTAL_TICKS;
+    float expInterval = 1f / (float) ticks;
+    for (int i = 0; i < ticks; ++i) {
+      packets.add(new SetExp(i * expInterval, i, 0));
+    }
+    return packets;
+  }
+
+  public ChunkData createChunkDataPacket(SimpleChunk chunk) {
+    return new ChunkData(chunk.getFullChunkSnapshot(), true);
+  }
+
+  private SetSlot createSetSlotPacket(int windowId, int slot, int item, int count, int data) {
+    return new SetSlot(windowId, slot, item, count, data);
+  }
+
+  public PluginMessage getBotFilterBrand() {
+    return createBrandPacket(brandBuf.copy());
+  }
+
+  private PluginMessage createBrandPacket(ByteBuf brandBuf) {
+    return new PluginMessage("MC|Brand", brandBuf);
+  }
+
+  private ByteBuf createBrandBuf(String brand) {
+    ByteBuf brandBuf = ByteBufAllocator.DEFAULT.heapBuffer();
+    ProtocolUtils.writeString(brandBuf, brand);
+    return brandBuf;
+  }
+
+  private Chat createChatPacket(String text) {
+    return new Chat(
+      ProtocolUtils.getJsonChatSerializer(ProtocolVersion.MINIMUM_VERSION).serialize(
+        LegacyComponentSerializer
+          .legacyAmpersand()
+          .deserialize(text)
+      ), Chat.CHAT_TYPE, null
+    );
+  }
+
+  private Disconnect createDisconnectPacket(String message) {
+    Component component = LegacyComponentSerializer.legacyAmpersand().deserialize(message);
+    return Disconnect.create(component, ProtocolVersion.MINIMUM_VERSION);
+  }
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/VirtualServer.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/VirtualServer.java
new file mode 100644
index 00000000..5dc6ce52
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/VirtualServer.java
@@ -0,0 +1,73 @@
+/*
+ * This file is part of Velocity-BotFilter, licensed under the AGPLv3 License (AGPLv3).
+ *
+ * Copyright (C) 2021 Vjatšeslav Maspanov <Leymooo>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.virtual.server;
+
+import com.velocitypowered.api.network.ProtocolVersion;
+import com.velocitypowered.proxy.connection.MinecraftConnection;
+import com.velocitypowered.proxy.connection.MinecraftSessionHandler;
+import com.velocitypowered.proxy.connection.client.ConnectedPlayer;
+import com.velocitypowered.proxy.protocol.StateRegistry;
+import lombok.Getter;
+import net.elytrium.elytraproxy.ElytraProxy;
+
+public class VirtualServer implements MinecraftSessionHandler {
+
+  @Getter
+  private final ElytraProxy elytraProxy;
+  @Getter
+  private final ServerPackets packets;
+
+  public VirtualServer(ElytraProxy elytraProxy) {
+    this.elytraProxy = elytraProxy;
+    this.packets = new ServerPackets(this);
+  }
+
+  public void reload() {
+    packets.createPackets();
+  }
+
+  public void spawnPlayer(VirtualSessionHandler handler) {
+    ConnectedPlayer player = handler.getPlayer();
+    MinecraftConnection connection = player.getConnection();
+    connection.setSessionHandler(handler);
+    handler.onSpawn();
+  }
+
+  public void sendJoinPacket(VirtualSessionHandler handler) {
+    ConnectedPlayer player = handler.getPlayer();
+    MinecraftConnection connection = player.getConnection();
+
+    if (connection.getProtocolVersion().isBefore(ProtocolVersion.MINECRAFT_1_16)) {
+      connection.write(packets.getLegacyJoinPacket());
+    } else {
+      connection.write(packets.getJoinPacket());
+    }
+  }
+
+  public void loginComplete(VirtualSessionHandler handler) {
+    ConnectedPlayer player = handler.getPlayer();
+    MinecraftConnection connection = player.getConnection();
+
+    if (connection.getState() != StateRegistry.VIRTUAL) {
+      connection.setState(StateRegistry.VIRTUAL);
+      sendJoinPacket(handler);
+    }
+  }
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/VirtualSessionHandler.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/VirtualSessionHandler.java
new file mode 100644
index 00000000..8bbe8cc1
--- /dev/null
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/VirtualSessionHandler.java
@@ -0,0 +1,61 @@
+/*
+ * Copyright (C) 2021 Elytrium
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package net.elytrium.elytraproxy.virtual.server;
+
+import com.velocitypowered.proxy.connection.MinecraftSessionHandler;
+import com.velocitypowered.proxy.connection.client.ConnectedPlayer;
+import java.util.Locale;
+import lombok.Getter;
+import net.elytrium.elytraproxy.virtual.protocol.packet.Player;
+import net.elytrium.elytraproxy.virtual.protocol.packet.PlayerPosition;
+import net.elytrium.elytraproxy.virtual.protocol.packet.PlayerPositionAndLook;
+import net.elytrium.elytraproxy.virtual.protocol.packet.TeleportConfirm;
+
+@Getter
+public abstract class VirtualSessionHandler implements MinecraftSessionHandler {
+  public final ConnectedPlayer player;
+  public final MinecraftSessionHandler originalHandler;
+  public final VirtualServer virtualServer;
+  public final String nickname;
+
+  public VirtualSessionHandler(
+      ConnectedPlayer player, MinecraftSessionHandler originalHandler, VirtualServer virtualServer) {
+    this.player = player;
+    this.originalHandler = originalHandler;
+    this.virtualServer = virtualServer;
+    this.nickname = player.getUsername().toLowerCase(Locale.ROOT);
+  }
+
+  public abstract void onSpawn();
+
+  public boolean handle(Player packet) {
+    return false;
+  }
+
+  public boolean handle(PlayerPosition packet) {
+    return false;
+  }
+
+  public boolean handle(PlayerPositionAndLook packet) {
+    return false;
+  }
+
+  public boolean handle(TeleportConfirm packet) {
+    return false;
+  }
+}
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/world/SimpleBlock.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/SimpleBlock.java
similarity index 87%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/world/SimpleBlock.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/SimpleBlock.java
index fe06742f..c041013e 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/world/SimpleBlock.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/SimpleBlock.java
@@ -17,18 +17,18 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.server.world;
-
-import static net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.BlockInfo.fallback;
-import static net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.BlockInfo.info;
-import static net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.Version.MINECRAFT_1_13;
-import static net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.Version.MINECRAFT_1_13_1;
-import static net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.Version.MINECRAFT_1_14;
-import static net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.Version.MINECRAFT_1_16;
-import static net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.Version.MINECRAFT_1_16_2;
-import static net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.Version.MINECRAFT_1_17;
-import static net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.Version.MINECRAFT_1_7;
-import static net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock.Version.MINECRAFT_1_8;
+package net.elytrium.elytraproxy.virtual.server.world;
+
+import static net.elytrium.elytraproxy.virtual.server.world.SimpleBlock.BlockInfo.fallback;
+import static net.elytrium.elytraproxy.virtual.server.world.SimpleBlock.BlockInfo.info;
+import static net.elytrium.elytraproxy.virtual.server.world.SimpleBlock.Version.MINECRAFT_1_13;
+import static net.elytrium.elytraproxy.virtual.server.world.SimpleBlock.Version.MINECRAFT_1_13_1;
+import static net.elytrium.elytraproxy.virtual.server.world.SimpleBlock.Version.MINECRAFT_1_14;
+import static net.elytrium.elytraproxy.virtual.server.world.SimpleBlock.Version.MINECRAFT_1_16;
+import static net.elytrium.elytraproxy.virtual.server.world.SimpleBlock.Version.MINECRAFT_1_16_2;
+import static net.elytrium.elytraproxy.virtual.server.world.SimpleBlock.Version.MINECRAFT_1_17;
+import static net.elytrium.elytraproxy.virtual.server.world.SimpleBlock.Version.MINECRAFT_1_7;
+import static net.elytrium.elytraproxy.virtual.server.world.SimpleBlock.Version.MINECRAFT_1_8;
 
 import com.velocitypowered.api.network.ProtocolVersion;
 import java.util.Arrays;
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/world/VirtualWorld.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/VirtualWorld.java
similarity index 89%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/world/VirtualWorld.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/VirtualWorld.java
index b4c6a728..4f6d2259 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/world/VirtualWorld.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/VirtualWorld.java
@@ -17,9 +17,10 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.server.world;
+package net.elytrium.elytraproxy.virtual.server.world;
 
 import com.google.common.collect.ImmutableList;
+import com.velocitypowered.proxy.connection.registry.DimensionData;
 import com.velocitypowered.proxy.connection.registry.DimensionInfo;
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.util.HashMap;
@@ -29,9 +30,8 @@ import java.util.function.Function;
 import java.util.function.Supplier;
 import lombok.Getter;
 import lombok.NonNull;
-import net.elytrium.elytraproxy.botfilter.protocol.data.registry.Biome;
-import net.elytrium.elytraproxy.botfilter.protocol.data.registry.Dimension;
-import net.elytrium.elytraproxy.botfilter.server.world.chunk.SimpleChunk;
+import net.elytrium.elytraproxy.virtual.protocol.data.registry.Biome;
+import net.elytrium.elytraproxy.virtual.server.world.chunk.SimpleChunk;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
@@ -39,16 +39,16 @@ public class VirtualWorld {
 
   @NonNull
   @Getter
-  private final Dimension dimension;
+  private final DimensionData dimension;
   @NonNull
   @Getter
   private final DimensionInfo dimensionInfo;
   private final Map<Long, SimpleChunk> chunks = new HashMap<>();
 
-  public VirtualWorld(@NonNull Dimension dimension, @NonNull DimensionInfo dimensionInfo) {
+  public VirtualWorld(@NonNull DimensionData dimension, @NonNull DimensionInfo dimensionInfo, int x, int z) {
     this.dimension = dimension;
     this.dimensionInfo = dimensionInfo;
-    getChunkOrNew(0, 0);
+    getChunkOrNew(x, z);
   }
 
   public void setBlock(int x, int y, int z, @Nullable SimpleBlock block) {
@@ -115,7 +115,7 @@ public class VirtualWorld {
     long index = getChunkIndex(x, z);
     SimpleChunk simpleChunk = chunks.get(index);
     if (simpleChunk == null) {
-      chunks.put(index, simpleChunk = new SimpleChunk(this, x, z));
+      chunks.put(index, simpleChunk = new SimpleChunk(x, z));
     }
     return simpleChunk;
   }
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/world/chunk/ChunkSnapshot.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/ChunkSnapshot.java
similarity index 86%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/world/chunk/ChunkSnapshot.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/ChunkSnapshot.java
index 385bf6e9..9c2c3ca4 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/world/chunk/ChunkSnapshot.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/ChunkSnapshot.java
@@ -17,12 +17,12 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.server.world.chunk;
+package net.elytrium.elytraproxy.virtual.server.world.chunk;
 
 import lombok.Getter;
 import lombok.RequiredArgsConstructor;
-import net.elytrium.elytraproxy.botfilter.protocol.data.registry.Biome;
-import net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock;
+import net.elytrium.elytraproxy.virtual.protocol.data.registry.Biome;
+import net.elytrium.elytraproxy.virtual.server.world.SimpleBlock;
 
 @RequiredArgsConstructor
 @Getter
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/world/chunk/LightSection.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/LightSection.java
similarity index 95%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/world/chunk/LightSection.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/LightSection.java
index a39a8098..7c899885 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/world/chunk/LightSection.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/LightSection.java
@@ -17,14 +17,14 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.server.world.chunk;
+package net.elytrium.elytraproxy.virtual.server.world.chunk;
 
 import com.google.common.base.Preconditions;
 import lombok.AccessLevel;
 import lombok.AllArgsConstructor;
 import lombok.Getter;
 import lombok.NoArgsConstructor;
-import net.elytrium.elytraproxy.botfilter.protocol.util.mcprotocollib.NibbleArray3d;
+import net.elytrium.elytraproxy.virtual.protocol.util.mcprotocollib.NibbleArray3d;
 
 @AllArgsConstructor(access = AccessLevel.PRIVATE)
 @NoArgsConstructor
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/world/chunk/SimpleChunk.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/SimpleChunk.java
similarity index 92%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/world/chunk/SimpleChunk.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/SimpleChunk.java
index 2986366f..db6a8cca 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/world/chunk/SimpleChunk.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/SimpleChunk.java
@@ -17,7 +17,7 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.server.world.chunk;
+package net.elytrium.elytraproxy.virtual.server.world.chunk;
 
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.util.Arrays;
@@ -25,9 +25,8 @@ import java.util.function.Function;
 import java.util.function.Supplier;
 import lombok.Getter;
 import lombok.NonNull;
-import net.elytrium.elytraproxy.botfilter.protocol.data.registry.Biome;
-import net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock;
-import net.elytrium.elytraproxy.botfilter.server.world.VirtualWorld;
+import net.elytrium.elytraproxy.virtual.protocol.data.registry.Biome;
+import net.elytrium.elytraproxy.virtual.server.world.SimpleBlock;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
@@ -36,8 +35,6 @@ public class SimpleChunk {
 
   public static final int MAX_BLOCKS_PER_SECTION = 16 * 16 * 16;
 
-  @Getter
-  private final VirtualWorld world;
   @Getter
   private final int x;
   @Getter
@@ -46,8 +43,7 @@ public class SimpleChunk {
   private final LightSection[] light = new LightSection[18];
   private final Biome[] biomes = new Biome[1024];
 
-  public SimpleChunk(VirtualWorld world, int x, int z) {
-    this.world = world;
+  public SimpleChunk(int x, int z) {
     this.x = x;
     this.z = z;
     Arrays.fill(biomes, Biome.PLAINS);
diff --git a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/world/chunk/SimpleSection.java b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/SimpleSection.java
similarity index 88%
rename from proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/world/chunk/SimpleSection.java
rename to proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/SimpleSection.java
index 1a062bd0..5825c7c0 100644
--- a/proxy/src/main/java/net/elytrium/elytraproxy/botfilter/server/world/chunk/SimpleSection.java
+++ b/proxy/src/main/java/net/elytrium/elytraproxy/virtual/server/world/chunk/SimpleSection.java
@@ -17,15 +17,15 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-package net.elytrium.elytraproxy.botfilter.server.world.chunk;
+package net.elytrium.elytraproxy.virtual.server.world.chunk;
 
 import com.google.common.base.Preconditions;
 import lombok.AllArgsConstructor;
 import lombok.Getter;
 import lombok.RequiredArgsConstructor;
-import net.elytrium.elytraproxy.botfilter.protocol.data.storage.BlockStorage;
-import net.elytrium.elytraproxy.botfilter.protocol.data.storage.BlockStorage19;
-import net.elytrium.elytraproxy.botfilter.server.world.SimpleBlock;
+import net.elytrium.elytraproxy.virtual.protocol.data.storage.BlockStorage;
+import net.elytrium.elytraproxy.virtual.protocol.data.storage.BlockStorage19;
+import net.elytrium.elytraproxy.virtual.server.world.SimpleBlock;
 import org.jetbrains.annotations.Nullable;
 
 @RequiredArgsConstructor
-- 
2.32.0

